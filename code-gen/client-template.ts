import http from "@node-sdk/http";
import identity from "lodash.identity";
import pickBy from "lodash.pickby";
import get from "lodash.get";
import fs from "fs";
import { fillApiPath } from "@node-sdk/utils";
import { Logger } from "@node-sdk/typings";
import { formatErrors } from "@node-sdk/client/utils";
import { IRequestOptions } from "./types";
import { IPayload } from "../client/types";

// auto gen
export default abstract class Client {
    declare tokenManager;

    declare domain;

    declare logger: Logger;

    abstract formatPayload(
        // eslint-disable-next-line no-unused-vars
        payload?: IPayload,
        // eslint-disable-next-line no-unused-vars
        options?: IRequestOptions
    ): Promise<Required<IPayload>>;

    acs = {
        user: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=acs&resource=user&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { user_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user?: {
                                    feature?: {
                                        card?: number;
                                        face_uploaded?: boolean;
                                    };
                                    user_id?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/acs/v1/users/:user_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=acs&resource=user&apiName=patch&version=v1 click to debug }
             */
            patch: async (
                payload?: {
                    data?: { feature?: { card?: number } };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { user_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/acs/v1/users/:user_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=acs&resource=user&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/acs/v1/users`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    feature?: {
                                                        card?: number;
                                                        face_uploaded?: boolean;
                                                    };
                                                    user_id?: string;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=acs&resource=user&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    feature?: {
                                        card?: number;
                                        face_uploaded?: boolean;
                                    };
                                    user_id?: string;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/acs/v1/users`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        accessRecord: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=acs&resource=access_record&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params: {
                        page_size?: number;
                        page_token?: string;
                        from: number;
                        to: number;
                        device_id?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/acs/v1/access_records`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    access_record_id?: string;
                                                    user_id?: string;
                                                    device_id?: string;
                                                    is_clock_in?: boolean;
                                                    access_time?: string;
                                                    access_type?: "FA";
                                                    access_data?: string;
                                                    is_door_open?: boolean;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=acs&resource=access_record&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params: {
                        page_size?: number;
                        page_token?: string;
                        from: number;
                        to: number;
                        device_id?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    access_record_id?: string;
                                    user_id?: string;
                                    device_id?: string;
                                    is_clock_in?: boolean;
                                    access_time?: string;
                                    access_type?: "FA";
                                    access_data?: string;
                                    is_door_open?: boolean;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/acs/v1/access_records`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        device: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=acs&resource=device&apiName=list&version=v1 click to debug }
             */
            list: async (payload?: {}, options?: IRequestOptions) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    device_id?: string;
                                    device_name?: string;
                                    device_sn?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/acs/v1/devices`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        accessRecordAccessPhoto: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=acs&resource=access_record.access_photo&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    path?: { access_record_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await http
                    .request<any, any>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/acs/v1/access_records/:access_record_id/access_photo`,
                            path
                        ),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return {
                    writeFile: async (filePath: string) => {
                        await res.pipe(fs.createWriteStream(filePath));
                    },
                };
            },
        },
        userFace: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=acs&resource=user.face&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    params?: {
                        is_cropped?: boolean;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { user_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await http
                    .request<any, any>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/acs/v1/users/:user_id/face`,
                            path
                        ),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return {
                    writeFile: async (filePath: string) => {
                        await res.pipe(fs.createWriteStream(filePath));
                    },
                };
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=acs&resource=user.face&apiName=update&version=v1 click to debug }
             */
            update: async (
                payload?: {
                    data: {
                        files: Buffer;
                        file_type: string;
                        file_name: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { user_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/acs/v1/users/:user_id/face`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers: {
                            ...headers,
                            "Content-Type": "multipart/form-data",
                        },
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return get(res, "data", {});
            },
        },
    };

    admin = {
        adminDeptStat: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=admin&resource=admin_dept_stat&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params: {
                        department_id_type:
                            | "department_id"
                            | "open_department_id";
                        start_date: string;
                        end_date: string;
                        department_id: string;
                        contains_child_dept: boolean;
                        page_size?: number;
                        page_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    date?: string;
                                    department_id?: string;
                                    department_name?: string;
                                    department_path?: string;
                                    total_user_num?: number;
                                    active_user_num?: number;
                                    active_user_rate?: string;
                                    suite_dau?: number;
                                    suite_active_rate?: string;
                                    new_user_num?: number;
                                    new_active_num?: number;
                                    resign_user_num?: number;
                                    im_dau?: number;
                                    send_messenger_user_num?: number;
                                    send_messenger_num?: number;
                                    avg_send_messenger_num?: string;
                                    docs_dau?: number;
                                    create_docs_user_num?: number;
                                    create_docs_num?: number;
                                    avg_create_docs_num?: string;
                                    cal_dau?: number;
                                    create_cal_user_num?: number;
                                    create_cal_num?: number;
                                    avg_create_cal_num?: string;
                                    vc_dau?: number;
                                    vc_duration?: number;
                                    avg_vc_duration?: string;
                                    avg_duration?: string;
                                    task_dau?: number;
                                    create_task_user_num?: number;
                                    create_task_num?: number;
                                    avg_create_task_num?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/admin/v1/admin_dept_stats`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        password: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=admin&resource=password&apiName=reset&version=v1 click to debug }
             */
            reset: async (
                payload?: {
                    data: {
                        password: { ent_email_password: string };
                        user_id: string;
                    };
                    params: {
                        user_id_type: "open_id" | "union_id" | "user_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/admin/v1/password/reset`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        badgeImage: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge_image&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: { image_file: Buffer; image_type: number };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { image_key?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/admin/v1/badge_images`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers: {
                            ...headers,
                            "Content-Type": "multipart/form-data",
                        },
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return get(res, "data", {});
            },
        },
        badgeGrant: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge.grant&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path: { badge_id: string; grant_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/admin/v1/badges/:badge_id/grants/:grant_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge.grant&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        name: string;
                        grant_type: number;
                        time_zone: string;
                        rule_detail: {
                            effective_time?: string;
                            expiration_time?: string;
                            anniversary?: number;
                            effective_period?: number;
                        };
                        is_grant_all: boolean;
                        user_ids?: Array<string>;
                        department_ids?: Array<string>;
                        group_ids?: Array<string>;
                    };
                    params?: {
                        user_id_type?: "open_id" | "union_id" | "user_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path: { badge_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                grant?: {
                                    id?: string;
                                    badge_id?: string;
                                    name: string;
                                    grant_type: number;
                                    time_zone: string;
                                    rule_detail: {
                                        effective_time?: string;
                                        expiration_time?: string;
                                        anniversary?: number;
                                        effective_period?: number;
                                    };
                                    is_grant_all: boolean;
                                    user_ids?: Array<string>;
                                    department_ids?: Array<string>;
                                    group_ids?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/admin/v1/badges/:badge_id/grants`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge.grant&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params: {
                        page_size: number;
                        page_token?: string;
                        user_id_type?: "open_id" | "union_id" | "user_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path: { badge_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/admin/v1/badges/:badge_id/grants`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                grants?: Array<{
                                                    id?: string;
                                                    badge_id?: string;
                                                    name: string;
                                                    grant_type: number;
                                                    time_zone: string;
                                                    rule_detail: {
                                                        effective_time?: string;
                                                        expiration_time?: string;
                                                        anniversary?: number;
                                                        effective_period?: number;
                                                    };
                                                    is_grant_all: boolean;
                                                    user_ids?: Array<string>;
                                                    department_ids?: Array<string>;
                                                    group_ids?: Array<string>;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge.grant&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params: {
                        page_size: number;
                        page_token?: string;
                        user_id_type?: "open_id" | "union_id" | "user_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path: { badge_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                grants?: Array<{
                                    id?: string;
                                    badge_id?: string;
                                    name: string;
                                    grant_type: number;
                                    time_zone: string;
                                    rule_detail: {
                                        effective_time?: string;
                                        expiration_time?: string;
                                        anniversary?: number;
                                        effective_period?: number;
                                    };
                                    is_grant_all: boolean;
                                    user_ids?: Array<string>;
                                    department_ids?: Array<string>;
                                    group_ids?: Array<string>;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/admin/v1/badges/:badge_id/grants`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge.grant&apiName=update&version=v1 click to debug }
             */
            update: async (
                payload?: {
                    data: {
                        name: string;
                        grant_type: number;
                        time_zone: string;
                        rule_detail: {
                            effective_time?: string;
                            expiration_time?: string;
                            anniversary?: number;
                            effective_period?: number;
                        };
                        is_grant_all: boolean;
                        user_ids?: Array<string>;
                        department_ids?: Array<string>;
                        group_ids?: Array<string>;
                    };
                    params?: {
                        user_id_type?: "open_id" | "union_id" | "user_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path: { badge_id: string; grant_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                grant?: {
                                    id?: string;
                                    badge_id?: string;
                                    name: string;
                                    grant_type: number;
                                    time_zone: string;
                                    rule_detail: {
                                        effective_time?: string;
                                        expiration_time?: string;
                                        anniversary?: number;
                                        effective_period?: number;
                                    };
                                    is_grant_all: boolean;
                                    user_ids?: Array<string>;
                                    department_ids?: Array<string>;
                                    group_ids?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/admin/v1/badges/:badge_id/grants/:grant_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge.grant&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "open_id" | "union_id" | "user_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path: { badge_id: string; grant_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                grant?: {
                                    id?: string;
                                    badge_id?: string;
                                    name: string;
                                    grant_type: number;
                                    time_zone: string;
                                    rule_detail: {
                                        effective_time?: string;
                                        expiration_time?: string;
                                        anniversary?: number;
                                        effective_period?: number;
                                    };
                                    is_grant_all: boolean;
                                    user_ids?: Array<string>;
                                    department_ids?: Array<string>;
                                    group_ids?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/admin/v1/badges/:badge_id/grants/:grant_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        badge: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        name: string;
                        explanation?: string;
                        detail_image: string;
                        show_image: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                badge?: {
                                    id?: string;
                                    name: string;
                                    explanation?: string;
                                    detail_image: string;
                                    show_image: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/admin/v1/badges`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    path: { badge_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                badge?: {
                                    id?: string;
                                    name: string;
                                    explanation?: string;
                                    detail_image: string;
                                    show_image: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/admin/v1/badges/:badge_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge&apiName=update&version=v1 click to debug }
             */
            update: async (
                payload?: {
                    data: {
                        name: string;
                        explanation?: string;
                        detail_image: string;
                        show_image: string;
                    };
                    path: { badge_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                badge?: {
                                    id?: string;
                                    name: string;
                                    explanation?: string;
                                    detail_image: string;
                                    show_image: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/admin/v1/badges/:badge_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params: {
                        page_size: number;
                        page_token?: string;
                        name?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/admin/v1/badges`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                badges?: Array<{
                                                    id?: string;
                                                    name: string;
                                                    explanation?: string;
                                                    detail_image: string;
                                                    show_image: string;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=admin&resource=badge&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params: {
                        page_size: number;
                        page_token?: string;
                        name?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                badges?: Array<{
                                    id?: string;
                                    name: string;
                                    explanation?: string;
                                    detail_image: string;
                                    show_image: string;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/admin/v1/badges`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        adminUserStat: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=admin&resource=admin_user_stat&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        start_date: string;
                        end_date: string;
                        department_id?: string;
                        user_id?: string;
                        page_size?: number;
                        page_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    date?: string;
                                    user_id?: string;
                                    user_name?: string;
                                    department_name?: string;
                                    department_path?: string;
                                    create_time?: string;
                                    user_active_flag?: number;
                                    register_time?: string;
                                    suite_active_flag?: number;
                                    last_active_time?: string;
                                    im_active_flag?: number;
                                    send_messenger_num?: number;
                                    docs_active_flag?: number;
                                    create_docs_num?: number;
                                    cal_active_flag?: number;
                                    create_cal_num?: number;
                                    vc_active_flag?: number;
                                    vc_duration?: number;
                                    active_os?: string;
                                    create_task_num?: number;
                                    vc_num?: number;
                                    app_package_type?: string;
                                    os_name?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/admin/v1/admin_user_stats`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };

    application = {
        applicationAppVersion: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=application&resource=application.app_version&apiName=patch&version=v6 click to debug }
             */
            patch: async (
                payload?: {
                    data?: { status?: number };
                    params: {
                        user_id_type: "user_id" | "union_id" | "open_id";
                        operator_id: string;
                        reject_reason?: string;
                    };
                    path: { app_id: string; version_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/application/v6/applications/:app_id/app_versions/:version_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=application&resource=application.app_version&apiName=get&version=v6 click to debug }
             */
            get: async (
                payload?: {
                    params: {
                        lang: "zh_cn" | "en_us" | "ja_jp";
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { app_id: string; version_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                app_version?: {
                                    app_id: string;
                                    version?: string;
                                    version_id: string;
                                    app_name?: string;
                                    avatar_url?: string;
                                    description?: string;
                                    scopes?: Array<{
                                        scope: string;
                                        description?: string;
                                        level?: number;
                                    }>;
                                    back_home_url?: string;
                                    i18n?: Array<{
                                        i18n_key: "zh_cn" | "en_us" | "ja_jp";
                                        name?: string;
                                        description?: string;
                                        help_use?: string;
                                    }>;
                                    common_categories?: Array<string>;
                                    events?: Array<string>;
                                    status?: number;
                                    create_time?: string;
                                    publish_time?: string;
                                    ability?: {
                                        gadget?: {
                                            enable_pc_mode?: number;
                                            schema_urls?: Array<string>;
                                            pc_use_mobile_pkg?: boolean;
                                            pc_version?: string;
                                            mobile_version?: string;
                                            mobile_min_lark_version?: string;
                                            pc_min_lark_version?: string;
                                        };
                                        web_app?: {
                                            pc_url?: string;
                                            mobile_url?: string;
                                        };
                                        bot?: { card_request_url?: string };
                                        workplace_widgets?: Array<{
                                            min_lark_version?: string;
                                        }>;
                                        navigate?: {
                                            pc?: {
                                                version?: string;
                                                image_url?: string;
                                                hover_image_url?: string;
                                            };
                                            mobile?: {
                                                version?: string;
                                                image_url?: string;
                                                hover_image_url?: string;
                                            };
                                        };
                                        cloud_doc?: {
                                            space_url?: string;
                                            i18n?: Array<{
                                                i18n_key:
                                                    | "zh_cn"
                                                    | "en_us"
                                                    | "ja_jp";
                                                name?: string;
                                                read_description?: string;
                                                write_description?: string;
                                            }>;
                                            icon_url?: string;
                                            mode?: number;
                                        };
                                        docs_blocks?: Array<{
                                            block_type_id?: string;
                                            i18n?: Array<{
                                                i18n_key?:
                                                    | "zh_cn"
                                                    | "en_us"
                                                    | "ja_jp";
                                                name?: string;
                                            }>;
                                            mobile_icon_url?: string;
                                            pc_icon_url?: string;
                                        }>;
                                        message_action?: {
                                            pc_app_link?: string;
                                            mobile_app_link?: string;
                                            i18n?: Array<{
                                                i18n_key?:
                                                    | "zh_cn"
                                                    | "en_us"
                                                    | "ja_jp";
                                                name?: string;
                                            }>;
                                        };
                                        plus_menu?: {
                                            pc_app_link?: string;
                                            mobile_app_link?: string;
                                        };
                                    };
                                    remark?: {
                                        remark?: string;
                                        update_remark?: string;
                                        visibility?: {
                                            is_all?: boolean;
                                            visible_list?: {
                                                open_ids?: Array<string>;
                                                department_ids?: Array<string>;
                                            };
                                            invisible_list?: {
                                                open_ids?: Array<string>;
                                                department_ids?: Array<string>;
                                            };
                                        };
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/application/v6/applications/:app_id/app_versions/:version_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        application: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=application&resource=application&apiName=patch&version=v6 click to debug }
             */
            patch: async (
                payload?: {
                    data?: { common_categories?: Array<string> };
                    params: { lang: "zh_cn" | "en_us" | "ja_jp" };
                    path: { app_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/application/v6/applications/:app_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=application&resource=application&apiName=underauditlist&version=v6 click to debug }
             */
            underauditlistWithIterator: async (
                payload?: {
                    params: {
                        lang: "zh_cn" | "en_us" | "ja_jp";
                        page_token?: string;
                        page_size?: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/application/v6/applications/underauditlist`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items: Array<{
                                                    app_id: string;
                                                    creator_id?: string;
                                                    status?: number;
                                                    scene_type?: number;
                                                    payment_type?: number;
                                                    redirect_urls?: Array<string>;
                                                    online_version_id?: string;
                                                    unaudit_version_id?: string;
                                                    app_name?: string;
                                                    avatar_url?: string;
                                                    description?: string;
                                                    scopes?: Array<{
                                                        scope: string;
                                                        description?: string;
                                                        level?: number;
                                                    }>;
                                                    back_home_url?: string;
                                                    i18n?: Array<{
                                                        i18n_key:
                                                            | "zh_cn"
                                                            | "en_us"
                                                            | "ja_jp";
                                                        name?: string;
                                                        description?: string;
                                                        help_use?: string;
                                                    }>;
                                                    primary_language?:
                                                        | "zh_cn"
                                                        | "en_us"
                                                        | "ja_jp";
                                                    common_categories?: Array<string>;
                                                    owner?: {
                                                        type: number;
                                                        owner_id?: string;
                                                        name?: string;
                                                        help_desk?: string;
                                                        email?: string;
                                                        phone?: string;
                                                    };
                                                }>;
                                                has_more: boolean;
                                                page_token?: string;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=application&resource=application&apiName=underauditlist&version=v6 click to debug }
             */
            underauditlist: async (
                payload?: {
                    params: {
                        lang: "zh_cn" | "en_us" | "ja_jp";
                        page_token?: string;
                        page_size?: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items: Array<{
                                    app_id: string;
                                    creator_id?: string;
                                    status?: number;
                                    scene_type?: number;
                                    payment_type?: number;
                                    redirect_urls?: Array<string>;
                                    online_version_id?: string;
                                    unaudit_version_id?: string;
                                    app_name?: string;
                                    avatar_url?: string;
                                    description?: string;
                                    scopes?: Array<{
                                        scope: string;
                                        description?: string;
                                        level?: number;
                                    }>;
                                    back_home_url?: string;
                                    i18n?: Array<{
                                        i18n_key: "zh_cn" | "en_us" | "ja_jp";
                                        name?: string;
                                        description?: string;
                                        help_use?: string;
                                    }>;
                                    primary_language?:
                                        | "zh_cn"
                                        | "en_us"
                                        | "ja_jp";
                                    common_categories?: Array<string>;
                                    owner?: {
                                        type: number;
                                        owner_id?: string;
                                        name?: string;
                                        help_desk?: string;
                                        email?: string;
                                        phone?: string;
                                    };
                                }>;
                                has_more: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/application/v6/applications/underauditlist`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=application&resource=application&apiName=get&version=v6 click to debug }
             */
            get: async (
                payload?: {
                    params: {
                        lang: "zh_cn" | "en_us" | "ja_jp";
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { app_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                app?: {
                                    app_id: string;
                                    creator_id?: string;
                                    status?: number;
                                    scene_type?: number;
                                    payment_type?: number;
                                    redirect_urls?: Array<string>;
                                    online_version_id?: string;
                                    unaudit_version_id?: string;
                                    app_name?: string;
                                    avatar_url?: string;
                                    description?: string;
                                    scopes?: Array<{
                                        scope: string;
                                        description?: string;
                                        level?: number;
                                    }>;
                                    back_home_url?: string;
                                    i18n?: Array<{
                                        i18n_key: "zh_cn" | "en_us" | "ja_jp";
                                        name?: string;
                                        description?: string;
                                        help_use?: string;
                                    }>;
                                    primary_language?:
                                        | "zh_cn"
                                        | "en_us"
                                        | "ja_jp";
                                    common_categories?: Array<string>;
                                    owner?: {
                                        type: number;
                                        owner_id?: string;
                                        name?: string;
                                        help_desk?: string;
                                        email?: string;
                                        phone?: string;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/application/v6/applications/:app_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        applicationAppUsage: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=application&resource=application.app_usage&apiName=overview&version=v6 click to debug }
             */
            overview: async (
                payload?: {
                    data: {
                        date: string;
                        cycle_type: number;
                        department_id?: string;
                        ability: "app" | "mp" | "h5" | "bot";
                    };
                    params?: {
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path: { app_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    metric_name: string;
                                    metric_value: number;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/application/v6/applications/:app_id/app_usage/overview`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        applicationFeedback: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=application&resource=application.feedback&apiName=patch&version=v6 click to debug }
             */
            patch: async (
                payload?: {
                    params: {
                        user_id_type?: "open_id" | "union_id" | "user_id";
                        status: number;
                        operator_id: string;
                    };
                    path: { app_id: string; feedback_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/application/v6/applications/:app_id/feedbacks/:feedback_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=application&resource=application.feedback&apiName=list&version=v6 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        from_date?: string;
                        to_date?: string;
                        feedback_type?: number;
                        status?: number;
                        user_id_type?: "open_id" | "union_id" | "user_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { app_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                feedback_list?: Array<{
                                    feedback_id: string;
                                    app_id: string;
                                    feedback_time: string;
                                    tenant_name?: string;
                                    feedback_type: number;
                                    status: number;
                                    fault_type?: Array<number>;
                                    fault_time?: string;
                                    source?: number;
                                    contact?: string;
                                    update_time?: string;
                                    description: string;
                                    user_id?: string;
                                    operator_id?: string;
                                    images?: Array<string>;
                                    feedback_path?: string;
                                }>;
                                has_more: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/application/v6/applications/:app_id/feedbacks`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };

    approval = {
        instance: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=add_sign&version=v4 click to debug }
             */
            addSign: async (
                payload?: {
                    data: {
                        user_id: string;
                        approval_code: string;
                        instance_code: string;
                        task_id: string;
                        comment?: string;
                        add_sign_user_ids: Array<string>;
                        add_sign_type: number;
                        approval_method?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/instances/add_sign`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=preview&version=v4 click to debug }
             */
            preview: async (
                payload?: {
                    data: {
                        user_id: string;
                        approval_code?: string;
                        department_id?: string;
                        form?: string;
                        instance_code?: string;
                        locale?: string;
                        task_id?: string;
                    };
                    params?: {
                        user_id_type?: "open_id" | "user_id" | "union_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                preview_nodes?: Array<{
                                    node_id?: string;
                                    node_name?: string;
                                    node_type?: string;
                                    comments?: Array<string>;
                                    custom_node_id?: string;
                                    user_id_list?: Array<string>;
                                    end_cc_id_list?: Array<string>;
                                    is_empty_logic?: boolean;
                                    is_approver_type_free?: boolean;
                                    has_cc_type_free?: boolean;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/instances/preview`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=cc&version=v4 click to debug }
             */
            cc: async (
                payload?: {
                    data: {
                        approval_code: string;
                        instance_code: string;
                        user_id: string;
                        cc_user_ids: Array<string>;
                        comment?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/instances/cc`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=list&version=v4 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params: {
                        page_size?: number;
                        page_token?: string;
                        approval_code: string;
                        start_time: string;
                        end_time: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/approval/v4/instances`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                instance_code_list: Array<string>;
                                                page_token: string;
                                                has_more: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=list&version=v4 click to debug }
             */
            list: async (
                payload?: {
                    params: {
                        page_size?: number;
                        page_token?: string;
                        approval_code: string;
                        start_time: string;
                        end_time: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                instance_code_list: Array<string>;
                                page_token: string;
                                has_more: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/instances`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=cancel&version=v4 click to debug }
             */
            cancel: async (
                payload?: {
                    data: {
                        approval_code: string;
                        instance_code: string;
                        user_id: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/instances/cancel`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=get&version=v4 click to debug }
             */
            get: async (
                payload?: {
                    params?: {
                        locale?: "zh-CN" | "en-US" | "ja-JP";
                        user_id?: string;
                        user_id_type?: "user_id" | "open_id" | "union_id";
                    };
                    path: { instance_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                approval_name: string;
                                start_time?: string;
                                end_time: string;
                                user_id: string;
                                open_id: string;
                                serial_number: string;
                                department_id: string;
                                status:
                                    | "PENDING"
                                    | "APPROVED"
                                    | "REJECTED"
                                    | "CANCELED"
                                    | "DELETED";
                                uuid: string;
                                form: string;
                                task_list: Array<{
                                    id: string;
                                    user_id: string;
                                    open_id?: string;
                                    status:
                                        | "PENDING"
                                        | "APPROVED"
                                        | "REJECTED"
                                        | "TRANSFERRED"
                                        | "DONE";
                                    node_id?: string;
                                    node_name?: string;
                                    custom_node_id?: string;
                                    type?:
                                        | "AND"
                                        | "OR"
                                        | "AUTO_PASS"
                                        | "AUTO_REJECT"
                                        | "SEQUENTIAL";
                                    start_time: string;
                                    end_time?: string;
                                }>;
                                comment_list: Array<{
                                    id: string;
                                    user_id: string;
                                    open_id: string;
                                    comment: string;
                                    create_time: string;
                                    files?: Array<{
                                        url?: string;
                                        file_size?: number;
                                        title?: string;
                                        type?: string;
                                    }>;
                                }>;
                                timeline: Array<{
                                    type:
                                        | "START"
                                        | "PASS"
                                        | "REJECT"
                                        | "AUTO_PASS"
                                        | "AUTO_REJECT"
                                        | "REMOVE_REPEAT"
                                        | "TRANSFER"
                                        | "ADD_APPROVER_BEFORE"
                                        | "ADD_APPROVER"
                                        | "ADD_APPROVER_AFTER"
                                        | "DELETE_APPROVER"
                                        | "ROLLBACK_SELECTED"
                                        | "ROLLBACK"
                                        | "CANCEL"
                                        | "DELETE"
                                        | "CC";
                                    create_time: string;
                                    user_id?: string;
                                    open_id?: string;
                                    user_id_list?: Array<string>;
                                    open_id_list?: Array<string>;
                                    task_id?: string;
                                    comment?: string;
                                    cc_user_list?: Array<{
                                        user_id?: string;
                                        cc_id?: string;
                                        open_id?: string;
                                    }>;
                                    ext: string;
                                    node_key?: string;
                                    files?: Array<{
                                        url?: string;
                                        file_size?: number;
                                        title?: string;
                                        type?: string;
                                    }>;
                                }>;
                                modified_instance_code?: string;
                                reverted_instance_code?: string;
                                approval_code: string;
                                reverted?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/instances/:instance_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=specified_rollback&version=v4 click to debug }
             */
            specifiedRollback: async (
                payload?: {
                    data: {
                        user_id: string;
                        task_id: string;
                        reason?: string;
                        extra?: string;
                        task_def_key_list: Array<string>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/instances/specified_rollback`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=query&version=v4 click to debug }
             */
            queryWithIterator: async (
                payload?: {
                    data: {
                        user_id: string;
                        approval_code?: string;
                        instance_code?: string;
                        instance_external_id?: string;
                        group_external_id?: string;
                        instance_title?: string;
                        instance_status?:
                            | "PENDING"
                            | "RECALL"
                            | "REJECT"
                            | "DELETED"
                            | "APPROVED"
                            | "ALL";
                        instance_start_time_from?: string;
                        instance_start_time_to?: string;
                        locale?: "zh-CN" | "en-US" | "ja-JP";
                    };
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/approval/v4/instances/query`,
                                path
                            ),
                            method: "POST",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                count?: number;
                                                instance_list?: Array<{
                                                    approval?: {
                                                        code?: string;
                                                        name?: string;
                                                        is_external?: boolean;
                                                        external?: {
                                                            batch_cc_read?: boolean;
                                                        };
                                                    };
                                                    group?: {
                                                        external_id?: string;
                                                        name?: string;
                                                    };
                                                    instance?: {
                                                        code?: string;
                                                        external_id?: string;
                                                        user_id?: string;
                                                        start_time?: string;
                                                        end_time?: string;
                                                        status?:
                                                            | "reject"
                                                            | "pending"
                                                            | "recall"
                                                            | "deleted"
                                                            | "approved";
                                                        title?: string;
                                                        extra?: string;
                                                        serial_id?: string;
                                                        link?: {
                                                            pc_link?: string;
                                                            mobile_link?: string;
                                                        };
                                                    };
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=query&version=v4 click to debug }
             */
            query: async (
                payload?: {
                    data: {
                        user_id: string;
                        approval_code?: string;
                        instance_code?: string;
                        instance_external_id?: string;
                        group_external_id?: string;
                        instance_title?: string;
                        instance_status?:
                            | "PENDING"
                            | "RECALL"
                            | "REJECT"
                            | "DELETED"
                            | "APPROVED"
                            | "ALL";
                        instance_start_time_from?: string;
                        instance_start_time_to?: string;
                        locale?: "zh-CN" | "en-US" | "ja-JP";
                    };
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                count?: number;
                                instance_list?: Array<{
                                    approval?: {
                                        code?: string;
                                        name?: string;
                                        is_external?: boolean;
                                        external?: { batch_cc_read?: boolean };
                                    };
                                    group?: {
                                        external_id?: string;
                                        name?: string;
                                    };
                                    instance?: {
                                        code?: string;
                                        external_id?: string;
                                        user_id?: string;
                                        start_time?: string;
                                        end_time?: string;
                                        status?:
                                            | "reject"
                                            | "pending"
                                            | "recall"
                                            | "deleted"
                                            | "approved";
                                        title?: string;
                                        extra?: string;
                                        serial_id?: string;
                                        link?: {
                                            pc_link?: string;
                                            mobile_link?: string;
                                        };
                                    };
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/instances/query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=search_cc&version=v4 click to debug }
             */
            searchCc: async (
                payload?: {
                    data: {
                        user_id: string;
                        approval_code?: string;
                        instance_code?: string;
                        instance_external_id?: string;
                        group_external_id?: string;
                        cc_title?: string;
                        read_status?: "READ" | "UNREAD" | "ALL";
                        cc_create_time_from?: string;
                        cc_create_time_to?: string;
                        locale?: "zh-CN" | "en-US" | "ja-JP";
                    };
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                count?: number;
                                cc_list?: Array<{
                                    approval?: {
                                        code?: string;
                                        name?: string;
                                        is_external?: boolean;
                                        external?: { batch_cc_read?: boolean };
                                    };
                                    group?: {
                                        external_id?: string;
                                        name?: string;
                                    };
                                    instance?: {
                                        code?: string;
                                        external_id?: string;
                                        user_id?: string;
                                        start_time?: string;
                                        end_time?: string;
                                        status?:
                                            | "reject"
                                            | "pending"
                                            | "recall"
                                            | "deleted"
                                            | "approved";
                                        title?: string;
                                        extra?: string;
                                        serial_id?: string;
                                        link?: {
                                            pc_link?: string;
                                            mobile_link?: string;
                                        };
                                    };
                                    cc?: {
                                        user_id?: string;
                                        create_time?: string;
                                        read_status?: "read" | "unread";
                                        title?: string;
                                        extra?: string;
                                        link?: {
                                            pc_link?: string;
                                            mobile_link?: string;
                                        };
                                    };
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/instances/search_cc`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance&apiName=create&version=v4 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        approval_code: string;
                        user_id?: string;
                        open_id: string;
                        department_id?: string;
                        form: string;
                        node_approver_user_id_list?: Array<{
                            key?: string;
                            value?: Array<string>;
                        }>;
                        node_approver_open_id_list?: Array<{
                            key?: string;
                            value?: Array<string>;
                        }>;
                        node_cc_user_id_list?: Array<{
                            key?: string;
                            value?: Array<string>;
                        }>;
                        node_cc_open_id_list?: Array<{
                            key?: string;
                            value?: Array<string>;
                        }>;
                        uuid?: string;
                        allow_resubmit?: boolean;
                        allow_submit_again?: boolean;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { instance_code: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/instances`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        task: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=task&apiName=query&version=v4 click to debug }
             */
            queryWithIterator: async (
                payload?: {
                    params: {
                        page_size?: number;
                        page_token?: string;
                        user_id: string;
                        topic: "1" | "2" | "3" | "17" | "18";
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/approval/v4/tasks/query`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                tasks: Array<{
                                                    topic:
                                                        | "1"
                                                        | "2"
                                                        | "3"
                                                        | "17"
                                                        | "18";
                                                    user_id: string;
                                                    title: string;
                                                    urls: {
                                                        helpdesk?: string;
                                                        mobile?: string;
                                                        pc?: string;
                                                    };
                                                    process_external_id?: string;
                                                    task_external_id?: string;
                                                    status:
                                                        | "1"
                                                        | "2"
                                                        | "17"
                                                        | "18"
                                                        | "33"
                                                        | "34";
                                                    process_status:
                                                        | "0"
                                                        | "1"
                                                        | "2"
                                                        | "3"
                                                        | "4"
                                                        | "5";
                                                    definition_code: string;
                                                    initiators?: Array<string>;
                                                    initiator_names?: Array<string>;
                                                    task_id: string;
                                                    process_id: string;
                                                    process_code: string;
                                                    definition_group_id?: string;
                                                    definition_group_name?: string;
                                                    definition_id?: string;
                                                    definition_name?: string;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                                count?: {
                                                    total: number;
                                                    has_more?: boolean;
                                                };
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=task&apiName=query&version=v4 click to debug }
             */
            query: async (
                payload?: {
                    params: {
                        page_size?: number;
                        page_token?: string;
                        user_id: string;
                        topic: "1" | "2" | "3" | "17" | "18";
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                tasks: Array<{
                                    topic: "1" | "2" | "3" | "17" | "18";
                                    user_id: string;
                                    title: string;
                                    urls: {
                                        helpdesk?: string;
                                        mobile?: string;
                                        pc?: string;
                                    };
                                    process_external_id?: string;
                                    task_external_id?: string;
                                    status:
                                        | "1"
                                        | "2"
                                        | "17"
                                        | "18"
                                        | "33"
                                        | "34";
                                    process_status:
                                        | "0"
                                        | "1"
                                        | "2"
                                        | "3"
                                        | "4"
                                        | "5";
                                    definition_code: string;
                                    initiators?: Array<string>;
                                    initiator_names?: Array<string>;
                                    task_id: string;
                                    process_id: string;
                                    process_code: string;
                                    definition_group_id?: string;
                                    definition_group_name?: string;
                                    definition_id?: string;
                                    definition_name?: string;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                                count?: { total: number; has_more?: boolean };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/tasks/query`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=task&apiName=transfer&version=v4 click to debug }
             */
            transfer: async (
                payload?: {
                    data: {
                        approval_code: string;
                        instance_code: string;
                        user_id: string;
                        comment?: string;
                        transfer_user_id: string;
                        task_id: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/tasks/transfer`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=task&apiName=search&version=v4 click to debug }
             */
            search: async (
                payload?: {
                    data: {
                        user_id: string;
                        approval_code?: string;
                        instance_code?: string;
                        instance_external_id?: string;
                        group_external_id?: string;
                        task_title?: string;
                        task_status?:
                            | "PENDING"
                            | "REJECTED"
                            | "APPROVED"
                            | "TRANSFERRED"
                            | "DONE"
                            | "RM_REPEAT"
                            | "PROCESSED"
                            | "ALL";
                        task_start_time_from?: string;
                        task_start_time_to?: string;
                        locale?: "zh-CN" | "en-US" | "ja-JP";
                    };
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                count?: number;
                                task_list?: Array<{
                                    approval?: {
                                        code?: string;
                                        name?: string;
                                        is_external?: boolean;
                                        external?: { batch_cc_read?: boolean };
                                    };
                                    group?: {
                                        external_id?: string;
                                        name?: string;
                                    };
                                    instance?: {
                                        code?: string;
                                        external_id?: string;
                                        user_id?: string;
                                        start_time?: string;
                                        end_time?: string;
                                        status?:
                                            | "reject"
                                            | "pending"
                                            | "recall"
                                            | "deleted"
                                            | "approved";
                                        title?: string;
                                        extra?: string;
                                        serial_id?: string;
                                        link?: {
                                            pc_link?: string;
                                            mobile_link?: string;
                                        };
                                    };
                                    task?: {
                                        user_id?: string;
                                        start_time?: string;
                                        end_time?: string;
                                        status?:
                                            | "rejected"
                                            | "pending"
                                            | "approved"
                                            | "transferred"
                                            | "done"
                                            | "rm_repeat"
                                            | "processed"
                                            | "hidden";
                                        title?: string;
                                        extra?: string;
                                        link?: {
                                            pc_link?: string;
                                            mobile_link?: string;
                                        };
                                        task_id?: string;
                                    };
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/tasks/search`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=task&apiName=resubmit&version=v4 click to debug }
             */
            resubmit: async (
                payload?: {
                    data: {
                        approval_code: string;
                        instance_code: string;
                        user_id: string;
                        comment?: string;
                        task_id: string;
                        form: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/tasks/resubmit`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=task&apiName=reject&version=v4 click to debug }
             */
            reject: async (
                payload?: {
                    data: {
                        approval_code: string;
                        instance_code: string;
                        user_id: string;
                        comment?: string;
                        task_id: string;
                        form?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/tasks/reject`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=task&apiName=approve&version=v4 click to debug }
             */
            approve: async (
                payload?: {
                    data: {
                        approval_code: string;
                        instance_code: string;
                        user_id: string;
                        comment?: string;
                        task_id: string;
                        form?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/tasks/approve`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        approval: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=approval&apiName=unsubscribe&version=v4 click to debug }
             */
            unsubscribe: async (
                payload?: {
                    path?: { approval_code?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/approvals/:approval_code/unsubscribe`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=approval&apiName=subscribe&version=v4 click to debug }
             */
            subscribe: async (
                payload?: {
                    path: { approval_code: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/approvals/:approval_code/subscribe`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=approval&apiName=get&version=v4 click to debug }
             */
            get: async (
                payload?: {
                    params?: { locale?: "zh-CN" | "en-US" | "ja-JP" };
                    path: { approval_code: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                approval_name: string;
                                status:
                                    | "ACTIVE"
                                    | "INACTIVE"
                                    | "DELETED"
                                    | "UNKNOWN";
                                form: string;
                                node_list: Array<{
                                    name: string;
                                    need_approver: boolean;
                                    node_id: string;
                                    custom_node_id?: string;
                                    node_type:
                                        | "AND"
                                        | "OR"
                                        | "SEQUENTIAL"
                                        | "CC_NODE";
                                }>;
                                viewers: Array<{
                                    type:
                                        | "TENANT"
                                        | "DEPARTMENT"
                                        | "USER"
                                        | "ROLE"
                                        | "USER_GROUP"
                                        | "NONE";
                                    id?: string;
                                    user_id?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/approvals/:approval_code`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=approval&apiName=create&version=v4 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        approval_name: string;
                        approval_code?: string;
                        description?: string;
                        viewers?: Array<{
                            viewer_type?:
                                | "TENANT"
                                | "DEPARTMENT"
                                | "USER"
                                | "NONE";
                            viewer_user_id?: string;
                            viewer_department_id?: string;
                        }>;
                        form: { form_content: string };
                        node_list?: Array<{
                            id: string;
                            name?: string;
                            node_type?: "AND" | "OR" | "SEQUENTIAL";
                            approver?: Array<{
                                type:
                                    | "Supervisor"
                                    | "SupervisorTopDown"
                                    | "DepartmentManager"
                                    | "DepartmentManagerTopDown"
                                    | "Personal"
                                    | "Free";
                                user_id?: string;
                                level?: string;
                            }>;
                            ccer?: Array<{
                                type:
                                    | "Supervisor"
                                    | "SupervisorTopDown"
                                    | "DepartmentManager"
                                    | "DepartmentManagerTopDown"
                                    | "Personal"
                                    | "Free";
                                user_id?: string;
                                level?: string;
                            }>;
                            privilege_field?: {
                                writable: Array<string>;
                                readable: Array<string>;
                            };
                        }>;
                        settings?: {
                            revert_interval?: number;
                            revert_option?: number;
                        };
                        config?: {
                            can_update_viewer: boolean;
                            can_update_form: boolean;
                            can_update_process: boolean;
                            can_update_revert: boolean;
                            help_url: string;
                        };
                        icon?: number;
                        i18n_resources: Array<{
                            locale: "zh-CN" | "en-US" | "ja-JP";
                            texts: Array<{ key: string; value: string }>;
                            is_default: boolean;
                        }>;
                        process_manager_ids?: Array<string>;
                    };
                    params?: {
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                approval_code?: string;
                                approval_id?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/approvals`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        instanceComment: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance.comment&apiName=create&version=v4 click to debug }
             */
            create: async (
                payload?: {
                    data?: {
                        content?: string;
                        at_info_list?: Array<{
                            user_id: string;
                            name: string;
                            offset: string;
                        }>;
                        parent_comment_id?: string;
                        comment_id?: string;
                        disable_bot?: boolean;
                        extra?: string;
                    };
                    params: {
                        user_id_type?: "open_id" | "user_id" | "union_id";
                        user_id: string;
                    };
                    path: { instance_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { comment_id: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/instances/:instance_id/comments`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance.comment&apiName=delete&version=v4 click to debug }
             */
            delete: async (
                payload?: {
                    params: {
                        user_id_type?: "open_id" | "user_id" | "union_id";
                        user_id: string;
                    };
                    path: { instance_id: string; comment_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { comment_id?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/instances/:instance_id/comments/:comment_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance.comment&apiName=remove&version=v4 click to debug }
             */
            remove: async (
                payload?: {
                    params?: {
                        user_id_type?: "open_id" | "user_id" | "union_id";
                        user_id?: string;
                    };
                    path: { instance_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                instance_id?: string;
                                external_id?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/instances/:instance_id/comments/remove`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance.comment&apiName=list&version=v4 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params: {
                        user_id_type?: "open_id" | "user_id" | "union_id";
                        user_id: string;
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { instance_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/approval/v4/instances/:instance_id/comments`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                comments: Array<{
                                                    id: string;
                                                    content: string;
                                                    create_time: string;
                                                    update_time: string;
                                                    is_delete: number;
                                                    replies?: Array<{
                                                        id: string;
                                                        content: string;
                                                        create_time?: string;
                                                        update_time?: string;
                                                        is_delete: number;
                                                        at_info_list?: Array<{
                                                            user_id: string;
                                                            name: string;
                                                            offset: string;
                                                        }>;
                                                        commentator: string;
                                                        extra?: string;
                                                    }>;
                                                    at_info_list?: Array<{
                                                        user_id: string;
                                                        name: string;
                                                        offset: string;
                                                    }>;
                                                    commentator: string;
                                                    extra?: string;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=instance.comment&apiName=list&version=v4 click to debug }
             */
            list: async (
                payload?: {
                    params: {
                        user_id_type?: "open_id" | "user_id" | "union_id";
                        user_id: string;
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { instance_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                comments: Array<{
                                    id: string;
                                    content: string;
                                    create_time: string;
                                    update_time: string;
                                    is_delete: number;
                                    replies?: Array<{
                                        id: string;
                                        content: string;
                                        create_time?: string;
                                        update_time?: string;
                                        is_delete: number;
                                        at_info_list?: Array<{
                                            user_id: string;
                                            name: string;
                                            offset: string;
                                        }>;
                                        commentator: string;
                                        extra?: string;
                                    }>;
                                    at_info_list?: Array<{
                                        user_id: string;
                                        name: string;
                                        offset: string;
                                    }>;
                                    commentator: string;
                                    extra?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/instances/:instance_id/comments`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        externalTask: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=external_task&apiName=list&version=v4 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    data?: {
                        approval_codes?: Array<string>;
                        instance_ids?: Array<string>;
                        user_ids?: Array<string>;
                        status?:
                            | "PENDING"
                            | "APPROVED"
                            | "REJECTED"
                            | "TRANSFERRED"
                            | "DONE";
                    };
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/approval/v4/external_tasks`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                data?: Array<{
                                                    instance_id: string;
                                                    approval_id: string;
                                                    approval_code: string;
                                                    status:
                                                        | "PENDING"
                                                        | "APPROVED"
                                                        | "REJECTED"
                                                        | "CANCELED"
                                                        | "DELETED"
                                                        | "HIDDEN";
                                                    update_time: string;
                                                    tasks?: Array<{
                                                        id: string;
                                                        status:
                                                            | "PENDING"
                                                            | "APPROVED"
                                                            | "REJECTED"
                                                            | "TRANSFERRED"
                                                            | "DONE";
                                                        update_time: string;
                                                    }>;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=external_task&apiName=list&version=v4 click to debug }
             */
            list: async (
                payload?: {
                    data?: {
                        approval_codes?: Array<string>;
                        instance_ids?: Array<string>;
                        user_ids?: Array<string>;
                        status?:
                            | "PENDING"
                            | "APPROVED"
                            | "REJECTED"
                            | "TRANSFERRED"
                            | "DONE";
                    };
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                data?: Array<{
                                    instance_id: string;
                                    approval_id: string;
                                    approval_code: string;
                                    status:
                                        | "PENDING"
                                        | "APPROVED"
                                        | "REJECTED"
                                        | "CANCELED"
                                        | "DELETED"
                                        | "HIDDEN";
                                    update_time: string;
                                    tasks?: Array<{
                                        id: string;
                                        status:
                                            | "PENDING"
                                            | "APPROVED"
                                            | "REJECTED"
                                            | "TRANSFERRED"
                                            | "DONE";
                                        update_time: string;
                                    }>;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/external_tasks`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        externalInstance: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=external_instance&apiName=check&version=v4 click to debug }
             */
            check: async (
                payload?: {
                    data: {
                        instances: Array<{
                            instance_id: string;
                            update_time: string;
                            tasks: Array<{
                                task_id: string;
                                update_time: string;
                            }>;
                        }>;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                diff_instances?: Array<{
                                    instance_id: string;
                                    update_time?: string;
                                    tasks?: Array<{
                                        task_id: string;
                                        update_time: string;
                                    }>;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/external_instances/check`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=external_instance&apiName=create&version=v4 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        approval_code: string;
                        status:
                            | "PENDING"
                            | "APPROVED"
                            | "REJECTED"
                            | "CANCELED"
                            | "DELETED"
                            | "HIDDEN";
                        extra?: string;
                        instance_id: string;
                        links: { pc_link: string; mobile_link?: string };
                        title?: string;
                        form?: Array<{ name?: string; value?: string }>;
                        user_id?: string;
                        user_name?: string;
                        open_id?: string;
                        department_id?: string;
                        department_name?: string;
                        start_time: string;
                        end_time: string;
                        update_time: string;
                        display_method?:
                            | "BROWSER"
                            | "SIDEBAR"
                            | "NORMAL"
                            | "TRUSTEESHIP";
                        update_mode?: "REPLACE" | "UPDATE";
                        task_list?: Array<{
                            task_id: string;
                            user_id?: string;
                            open_id?: string;
                            title?: string;
                            links: { pc_link: string; mobile_link?: string };
                            status:
                                | "PENDING"
                                | "APPROVED"
                                | "REJECTED"
                                | "TRANSFERRED"
                                | "DONE";
                            extra?: string;
                            create_time: string;
                            end_time: string;
                            update_time?: string;
                            action_context?: string;
                            action_configs?: Array<{
                                action_type: "APPROVE" | "REJECT" | "{KEY}";
                                action_name?: string;
                                is_need_reason?: boolean;
                                is_reason_required?: boolean;
                                is_need_attachment?: boolean;
                            }>;
                            display_method?:
                                | "BROWSER"
                                | "SIDEBAR"
                                | "NORMAL"
                                | "TRUSTEESHIP";
                        }>;
                        cc_list?: Array<{
                            cc_id: string;
                            user_id?: string;
                            open_id?: string;
                            links: { pc_link: string; mobile_link?: string };
                            read_status: "READ" | "UNREAD";
                            extra?: string;
                            title?: string;
                            create_time: string;
                            update_time: string;
                            display_method?:
                                | "BROWSER"
                                | "SIDEBAR"
                                | "NORMAL"
                                | "TRUSTEESHIP";
                        }>;
                        i18n_resources: Array<{
                            locale: "zh-CN" | "en-US" | "ja-JP";
                            texts: Array<{ key: string; value: string }>;
                            is_default: boolean;
                        }>;
                        trusteeship_url_token?: string;
                        trusteeship_user_id_type?: string;
                        trusteeship_urls?: {
                            form_detail_url?: string;
                            action_definition_url?: string;
                            approval_node_url?: string;
                            action_callback_url?: string;
                        };
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                data?: {
                                    approval_code: string;
                                    status:
                                        | "PENDING"
                                        | "APPROVED"
                                        | "REJECTED"
                                        | "CANCELED"
                                        | "DELETED"
                                        | "HIDDEN";
                                    extra?: string;
                                    instance_id: string;
                                    links: {
                                        pc_link: string;
                                        mobile_link?: string;
                                    };
                                    title?: string;
                                    form?: Array<{
                                        name?: string;
                                        value?: string;
                                    }>;
                                    user_id?: string;
                                    user_name?: string;
                                    open_id?: string;
                                    department_id?: string;
                                    department_name?: string;
                                    start_time: string;
                                    end_time: string;
                                    update_time: string;
                                    display_method?:
                                        | "BROWSER"
                                        | "SIDEBAR"
                                        | "NORMAL"
                                        | "TRUSTEESHIP";
                                    update_mode?: "REPLACE" | "UPDATE";
                                    task_list?: Array<{
                                        task_id: string;
                                        user_id?: string;
                                        open_id?: string;
                                        title?: string;
                                        links: {
                                            pc_link: string;
                                            mobile_link?: string;
                                        };
                                        status:
                                            | "PENDING"
                                            | "APPROVED"
                                            | "REJECTED"
                                            | "TRANSFERRED"
                                            | "DONE";
                                        extra?: string;
                                        create_time: string;
                                        end_time: string;
                                        update_time?: string;
                                        action_context?: string;
                                        action_configs?: Array<{
                                            action_type:
                                                | "APPROVE"
                                                | "REJECT"
                                                | "{KEY}";
                                            action_name?: string;
                                            is_need_reason?: boolean;
                                            is_reason_required?: boolean;
                                            is_need_attachment?: boolean;
                                        }>;
                                        display_method?:
                                            | "BROWSER"
                                            | "SIDEBAR"
                                            | "NORMAL"
                                            | "TRUSTEESHIP";
                                    }>;
                                    cc_list?: Array<{
                                        cc_id: string;
                                        user_id?: string;
                                        open_id?: string;
                                        links: {
                                            pc_link: string;
                                            mobile_link?: string;
                                        };
                                        read_status: "READ" | "UNREAD";
                                        extra?: string;
                                        title?: string;
                                        create_time: string;
                                        update_time: string;
                                        display_method?:
                                            | "BROWSER"
                                            | "SIDEBAR"
                                            | "NORMAL"
                                            | "TRUSTEESHIP";
                                    }>;
                                    i18n_resources: Array<{
                                        locale: "zh-CN" | "en-US" | "ja-JP";
                                        texts: Array<{
                                            key: string;
                                            value: string;
                                        }>;
                                        is_default: boolean;
                                    }>;
                                    trusteeship_url_token?: string;
                                    trusteeship_user_id_type?: string;
                                    trusteeship_urls?: {
                                        form_detail_url?: string;
                                        action_definition_url?: string;
                                        approval_node_url?: string;
                                        action_callback_url?: string;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/external_instances`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        externalApproval: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=approval&resource=external_approval&apiName=create&version=v4 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        approval_name: string;
                        approval_code: string;
                        group_code: string;
                        group_name?: string;
                        description?: string;
                        external: {
                            biz_name?: string;
                            biz_type?: string;
                            create_link_mobile?: string;
                            create_link_pc?: string;
                            support_pc?: boolean;
                            support_mobile?: boolean;
                            support_batch_read?: boolean;
                            enable_mark_readed?: boolean;
                            enable_quick_operate?: boolean;
                            action_callback_url?: string;
                            action_callback_token?: string;
                            action_callback_key?: string;
                            allow_batch_operate?: boolean;
                            exclude_efficiency_statistics?: boolean;
                        };
                        viewers?: Array<{
                            viewer_type?:
                                | "TENANT"
                                | "DEPARTMENT"
                                | "USER"
                                | "NONE";
                            viewer_user_id?: string;
                            viewer_department_id?: string;
                        }>;
                        i18n_resources?: Array<{
                            locale: "zh-CN" | "en-US" | "ja-JP";
                            texts: Array<{ key: string; value: string }>;
                            is_default: boolean;
                        }>;
                    };
                    params?: {
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { approval_code: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/approval/v4/external_approvals`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };

    attendance = {
        file: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=file&apiName=upload&version=v1 click to debug }
             */
            upload: async (
                payload?: {
                    data?: { file?: Buffer };
                    params: { file_name: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { file?: { file_id: string } };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/files/upload`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers: {
                            ...headers,
                            "Content-Type": "multipart/form-data",
                        },
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return get(res, "data", {});
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=file&apiName=download&version=v1 click to debug }
             */
            download: async (
                payload?: {
                    path: { file_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await http
                    .request<any, any>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/files/:file_id/download`,
                            path
                        ),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return {
                    writeFile: async (filePath: string) => {
                        await res.pipe(fs.createWriteStream(filePath));
                    },
                };
            },
        },
        userSetting: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_setting&apiName=query&version=v1 click to debug }
             */
            query: async (
                payload?: {
                    data: { user_ids: Array<string> };
                    params: { employee_type: "employee_id" | "employee_no" };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_settings?: Array<{
                                    user_id: string;
                                    face_key: string;
                                    face_key_update_time?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_settings/query`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_setting&apiName=modify&version=v1 click to debug }
             */
            modify: async (
                payload?: {
                    data?: {
                        user_setting?: {
                            user_id: string;
                            face_key: string;
                            face_key_update_time?: string;
                        };
                    };
                    params: { employee_type: "employee_id" | "employee_no" };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_setting?: {
                                    user_id: string;
                                    face_key: string;
                                    face_key_update_time?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_settings/modify`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        userStatsView: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_stats_view&apiName=update&version=v1 click to debug }
             */
            update: async (
                payload?: {
                    data: {
                        view: {
                            view_id: string;
                            stats_type: "daily" | "month";
                            user_id: string;
                            items?: Array<{
                                code: string;
                                child_items?: Array<{
                                    code: string;
                                    value: string;
                                }>;
                            }>;
                        };
                    };
                    params: { employee_type: "employee_id" | "employee_no" };
                    path: { user_stats_view_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                view?: {
                                    view_id: string;
                                    stats_type: "daily" | "month";
                                    user_id: string;
                                    items?: Array<{
                                        code: string;
                                        title?: string;
                                        child_items?: Array<{
                                            code: string;
                                            value: string;
                                            title?: string;
                                            column_type?: number;
                                            read_only?: boolean;
                                            min_value?: string;
                                            max_value?: string;
                                        }>;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_stats_views/:user_stats_view_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_stats_view&apiName=query&version=v1 click to debug }
             */
            query: async (
                payload?: {
                    data: {
                        locale: "en" | "ja" | "zh";
                        stats_type: "daily" | "month";
                        user_id?: string;
                    };
                    params: { employee_type: "employee_id" | "employee_no" };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                view?: {
                                    view_id: string;
                                    stats_type: "daily" | "month";
                                    user_id: string;
                                    items?: Array<{
                                        code: string;
                                        title?: string;
                                        child_items?: Array<{
                                            code: string;
                                            value: string;
                                            title?: string;
                                            column_type?: number;
                                            read_only?: boolean;
                                            min_value?: string;
                                            max_value?: string;
                                        }>;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_stats_views/query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        userDailyShift: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_daily_shift&apiName=query&version=v1 click to debug }
             */
            query: async (
                payload?: {
                    data: {
                        user_ids: Array<string>;
                        check_date_from: number;
                        check_date_to: number;
                    };
                    params: { employee_type: "employee_id" | "employee_no" };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_daily_shifts?: Array<{
                                    group_id: string;
                                    shift_id: string;
                                    month: number;
                                    user_id: string;
                                    day_no: number;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_daily_shifts/query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_daily_shift&apiName=batch_create&version=v1 click to debug }
             */
            batchCreate: async (
                payload?: {
                    data: {
                        user_daily_shifts: Array<{
                            group_id: string;
                            shift_id: string;
                            month: number;
                            user_id: string;
                            day_no: number;
                        }>;
                        operator_id?: string;
                    };
                    params: { employee_type: "employee_id" | "employee_no" };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_daily_shifts?: Array<{
                                    group_id: string;
                                    shift_id: string;
                                    month: number;
                                    user_id: string;
                                    day_no: number;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_daily_shifts/batch_create`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        userTaskRemedy: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_task_remedy&apiName=query_user_allowed_remedys&version=v1 click to debug }
             */
            queryUserAllowedRemedys: async (
                payload?: {
                    data: { user_id: string; remedy_date: number };
                    params: { employee_type: "employee_id" | "employee_no" };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_allowed_remedys?: Array<{
                                    user_id: string;
                                    remedy_date: number;
                                    is_free_punch?: boolean;
                                    punch_no?: number;
                                    work_type?: number;
                                    punch_status?: string;
                                    normal_punch_time?: string;
                                    remedy_start_time?: string;
                                    remedy_end_time?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_task_remedys/query_user_allowed_remedys`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_task_remedy&apiName=query&version=v1 click to debug }
             */
            query: async (
                payload?: {
                    data: {
                        user_ids: Array<string>;
                        check_time_from: string;
                        check_time_to: string;
                        check_date_type?: "PeriodTime" | "CreateTime";
                        status?: number;
                    };
                    params: { employee_type: "employee_id" | "employee_no" };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_remedys?: Array<{
                                    user_id: string;
                                    remedy_date: number;
                                    punch_no: number;
                                    work_type: number;
                                    approval_id?: string;
                                    remedy_time: string;
                                    status?: number;
                                    reason: string;
                                    time?: string;
                                    time_zone?: string;
                                    create_time?: string;
                                    update_time?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_task_remedys/query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_task_remedy&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        user_id: string;
                        remedy_date: number;
                        punch_no: number;
                        work_type: number;
                        remedy_time: string;
                        reason: string;
                        time?: string;
                    };
                    params: { employee_type: "employee_id" | "employee_no" };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_remedy?: {
                                    user_id: string;
                                    remedy_date: number;
                                    punch_no: number;
                                    work_type: number;
                                    approval_id?: string;
                                    remedy_time: string;
                                    status?: number;
                                    reason: string;
                                    time?: string;
                                    time_zone?: string;
                                    create_time?: string;
                                    update_time?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_task_remedys`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        userStatsField: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_stats_field&apiName=query&version=v1 click to debug }
             */
            query: async (
                payload?: {
                    data: {
                        locale: "en" | "ja" | "zh";
                        stats_type: "daily" | "month";
                        start_date: number;
                        end_date: number;
                    };
                    params: { employee_type: "employee_id" | "employee_no" };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_stats_field?: {
                                    stats_type: "daily" | "month";
                                    user_id: string;
                                    fields: Array<{
                                        code: string;
                                        title: string;
                                        child_fields?: Array<{
                                            code: string;
                                            title: string;
                                            time_unit?: string;
                                        }>;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_stats_fields/query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        group: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=group&apiName=search&version=v1 click to debug }
             */
            search: async (
                payload?: {
                    data: { group_name: string; exactly_matched?: boolean };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                group_list?: Array<{
                                    group_id: string;
                                    group_name: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/groups/search`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=group&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/attendance/v1/groups`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                group_list?: Array<{
                                                    group_id: string;
                                                    group_name: string;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=group&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                group_list?: Array<{
                                    group_id: string;
                                    group_name: string;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/groups`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=group&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path: { group_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/groups/:group_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=group&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        group: {
                            group_id?: string;
                            group_name: string;
                            time_zone: string;
                            bind_dept_ids?: Array<string>;
                            except_dept_ids?: Array<string>;
                            bind_user_ids?: Array<string>;
                            except_user_ids?: Array<string>;
                            group_leader_ids: Array<string>;
                            sub_group_leader_ids?: Array<string>;
                            allow_out_punch?: boolean;
                            out_punch_need_approval?: boolean;
                            out_punch_need_remark?: boolean;
                            out_punch_need_photo?: boolean;
                            out_punch_allowed_hide_addr?: boolean;
                            allow_pc_punch?: boolean;
                            allow_remedy?: boolean;
                            remedy_limit?: boolean;
                            remedy_limit_count?: number;
                            remedy_date_limit?: boolean;
                            remedy_date_num?: number;
                            allow_remedy_type_lack?: boolean;
                            allow_remedy_type_late?: boolean;
                            allow_remedy_type_early?: boolean;
                            allow_remedy_type_normal?: boolean;
                            show_cumulative_time?: boolean;
                            show_over_time?: boolean;
                            hide_staff_punch_time?: boolean;
                            face_punch?: boolean;
                            face_punch_cfg?: number;
                            face_downgrade?: boolean;
                            replace_basic_pic?: boolean;
                            machines?: Array<{
                                machine_sn: string;
                                machine_name: string;
                            }>;
                            gps_range?: number;
                            locations?: Array<{
                                location_name: string;
                                location_type: number;
                                latitude?: number;
                                longitude?: number;
                                ssid?: string;
                                bssid?: string;
                                map_type?: number;
                                address?: string;
                                ip?: string;
                                feature?: string;
                                gps_range?: number;
                            }>;
                            group_type: number;
                            punch_day_shift_ids: Array<string>;
                            free_punch_cfg?: {
                                free_start_time: string;
                                free_end_time: string;
                                punch_day: number;
                                work_day_no_punch_as_lack?: boolean;
                            };
                            calendar_id: number;
                            need_punch_special_days?: Array<{
                                punch_day: number;
                                shift_id: string;
                            }>;
                            no_need_punch_special_days?: Array<{
                                punch_day: number;
                                shift_id: string;
                            }>;
                            work_day_no_punch_as_lack?: boolean;
                            effect_now?: boolean;
                            remedy_period_type?: number;
                            remedy_period_custom_date?: number;
                            punch_type?: number;
                            rest_clockIn_need_approval?: boolean;
                            clockIn_need_photo?: boolean;
                        };
                        operator_id?: string;
                    };
                    params: {
                        employee_type: "employee_id" | "employee_no";
                        dept_type: "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                group?: {
                                    group_id?: string;
                                    group_name: string;
                                    time_zone: string;
                                    bind_dept_ids?: Array<string>;
                                    except_dept_ids?: Array<string>;
                                    bind_user_ids?: Array<string>;
                                    except_user_ids?: Array<string>;
                                    group_leader_ids: Array<string>;
                                    sub_group_leader_ids?: Array<string>;
                                    allow_out_punch?: boolean;
                                    out_punch_need_approval?: boolean;
                                    out_punch_need_remark?: boolean;
                                    out_punch_need_photo?: boolean;
                                    out_punch_allowed_hide_addr?: boolean;
                                    allow_pc_punch?: boolean;
                                    allow_remedy?: boolean;
                                    remedy_limit?: boolean;
                                    remedy_limit_count?: number;
                                    remedy_date_limit?: boolean;
                                    remedy_date_num?: number;
                                    allow_remedy_type_lack?: boolean;
                                    allow_remedy_type_late?: boolean;
                                    allow_remedy_type_early?: boolean;
                                    allow_remedy_type_normal?: boolean;
                                    show_cumulative_time?: boolean;
                                    show_over_time?: boolean;
                                    hide_staff_punch_time?: boolean;
                                    face_punch?: boolean;
                                    face_punch_cfg?: number;
                                    face_downgrade?: boolean;
                                    replace_basic_pic?: boolean;
                                    machines?: Array<{
                                        machine_sn: string;
                                        machine_name: string;
                                    }>;
                                    gps_range?: number;
                                    locations?: Array<{
                                        location_id?: string;
                                        location_name: string;
                                        location_type: number;
                                        latitude?: number;
                                        longitude?: number;
                                        ssid?: string;
                                        bssid?: string;
                                        map_type?: number;
                                        address?: string;
                                        ip?: string;
                                        feature?: string;
                                        gps_range?: number;
                                    }>;
                                    group_type: number;
                                    punch_day_shift_ids: Array<string>;
                                    free_punch_cfg?: {
                                        free_start_time: string;
                                        free_end_time: string;
                                        punch_day: number;
                                        work_day_no_punch_as_lack?: boolean;
                                    };
                                    calendar_id: number;
                                    need_punch_special_days?: Array<{
                                        punch_day: number;
                                        shift_id: string;
                                    }>;
                                    no_need_punch_special_days?: Array<{
                                        punch_day: number;
                                        shift_id: string;
                                    }>;
                                    work_day_no_punch_as_lack?: boolean;
                                    effect_now?: boolean;
                                    remedy_period_type?: number;
                                    remedy_period_custom_date?: number;
                                    punch_type?: number;
                                    effect_time?: string;
                                    rest_clockIn_need_approval?: boolean;
                                    clockIn_need_photo?: boolean;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/groups`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=group&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    params: {
                        employee_type: "employee_id" | "employee_no";
                        dept_type: "open_id";
                    };
                    path: { group_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                group_id?: string;
                                group_name: string;
                                time_zone: string;
                                bind_dept_ids?: Array<string>;
                                except_dept_ids?: Array<string>;
                                bind_user_ids?: Array<string>;
                                except_user_ids?: Array<string>;
                                group_leader_ids: Array<string>;
                                sub_group_leader_ids?: Array<string>;
                                allow_out_punch?: boolean;
                                out_punch_need_approval?: boolean;
                                out_punch_need_remark?: boolean;
                                out_punch_need_photo?: boolean;
                                out_punch_allowed_hide_addr?: boolean;
                                allow_pc_punch?: boolean;
                                allow_remedy?: boolean;
                                remedy_limit?: boolean;
                                remedy_limit_count?: number;
                                remedy_date_limit?: boolean;
                                remedy_date_num?: number;
                                allow_remedy_type_lack?: boolean;
                                allow_remedy_type_late?: boolean;
                                allow_remedy_type_early?: boolean;
                                allow_remedy_type_normal?: boolean;
                                show_cumulative_time?: boolean;
                                show_over_time?: boolean;
                                hide_staff_punch_time?: boolean;
                                face_punch?: boolean;
                                face_punch_cfg?: number;
                                face_downgrade?: boolean;
                                replace_basic_pic?: boolean;
                                machines?: Array<{
                                    machine_sn: string;
                                    machine_name: string;
                                }>;
                                gps_range?: number;
                                locations?: Array<{
                                    location_id?: string;
                                    location_name: string;
                                    location_type: number;
                                    latitude?: number;
                                    longitude?: number;
                                    ssid?: string;
                                    bssid?: string;
                                    map_type?: number;
                                    address?: string;
                                    ip?: string;
                                    feature?: string;
                                    gps_range?: number;
                                }>;
                                group_type: number;
                                punch_day_shift_ids: Array<string>;
                                free_punch_cfg?: {
                                    free_start_time: string;
                                    free_end_time: string;
                                    punch_day: number;
                                    work_day_no_punch_as_lack?: boolean;
                                };
                                calendar_id: number;
                                need_punch_special_days?: Array<{
                                    punch_day: number;
                                    shift_id: string;
                                }>;
                                no_need_punch_special_days?: Array<{
                                    punch_day: number;
                                    shift_id: string;
                                }>;
                                work_day_no_punch_as_lack?: boolean;
                                remedy_period_type?: number;
                                remedy_period_custom_date?: number;
                                punch_type?: number;
                                effect_time?: string;
                                rest_clockIn_need_approval?: boolean;
                                clockIn_need_photo?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/groups/:group_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        shift: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=shift&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path: { shift_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/shifts/:shift_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=shift&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        shift_name: string;
                        punch_times: number;
                        is_flexible?: boolean;
                        flexible_minutes?: number;
                        flexible_rule?: Array<{
                            flexible_early_minutes: number;
                            flexible_late_minutes: number;
                        }>;
                        no_need_off?: boolean;
                        punch_time_rule: Array<{
                            on_time: string;
                            off_time: string;
                            late_minutes_as_late: number;
                            late_minutes_as_lack: number;
                            on_advance_minutes: number;
                            early_minutes_as_early: number;
                            early_minutes_as_lack: number;
                            off_delay_minutes: number;
                            late_minutes_as_serious_late?: number;
                        }>;
                        late_off_late_on_rule?: Array<{
                            late_off_minutes: number;
                            late_on_minutes: number;
                        }>;
                        rest_time_rule?: Array<{
                            rest_begin_time: string;
                            rest_end_time: string;
                        }>;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                shift?: {
                                    shift_id: string;
                                    shift_name: string;
                                    punch_times: number;
                                    is_flexible?: boolean;
                                    flexible_minutes?: number;
                                    flexible_rule?: Array<{
                                        flexible_early_minutes: number;
                                        flexible_late_minutes: number;
                                    }>;
                                    no_need_off?: boolean;
                                    punch_time_rule: Array<{
                                        on_time: string;
                                        off_time: string;
                                        late_minutes_as_late: number;
                                        late_minutes_as_lack: number;
                                        on_advance_minutes: number;
                                        early_minutes_as_early: number;
                                        early_minutes_as_lack: number;
                                        off_delay_minutes: number;
                                        late_minutes_as_serious_late?: number;
                                    }>;
                                    late_off_late_on_rule?: Array<{
                                        late_off_minutes: number;
                                        late_on_minutes: number;
                                    }>;
                                    rest_time_rule?: Array<{
                                        rest_begin_time: string;
                                        rest_end_time: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/shifts`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=shift&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    path: { shift_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                shift_id: string;
                                shift_name: string;
                                punch_times: number;
                                is_flexible?: boolean;
                                flexible_minutes?: number;
                                flexible_rule?: Array<{
                                    flexible_early_minutes: number;
                                    flexible_late_minutes: number;
                                }>;
                                no_need_off?: boolean;
                                punch_time_rule: Array<{
                                    on_time: string;
                                    off_time: string;
                                    late_minutes_as_late: number;
                                    late_minutes_as_lack: number;
                                    on_advance_minutes: number;
                                    early_minutes_as_early: number;
                                    early_minutes_as_lack: number;
                                    off_delay_minutes: number;
                                    late_minutes_as_serious_late?: number;
                                }>;
                                late_off_late_on_rule?: Array<{
                                    late_off_minutes: number;
                                    late_on_minutes: number;
                                }>;
                                rest_time_rule?: Array<{
                                    rest_begin_time: string;
                                    rest_end_time: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/shifts/:shift_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=shift&apiName=query&version=v1 click to debug }
             */
            query: async (
                payload?: {
                    params: { shift_name: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                shift_id: string;
                                shift_name: string;
                                punch_times: number;
                                is_flexible?: boolean;
                                flexible_minutes?: number;
                                flexible_rule?: Array<{
                                    flexible_early_minutes: number;
                                    flexible_late_minutes: number;
                                }>;
                                no_need_off?: boolean;
                                punch_time_rule: Array<{
                                    on_time: string;
                                    off_time: string;
                                    late_minutes_as_late: number;
                                    late_minutes_as_lack: number;
                                    on_advance_minutes: number;
                                    early_minutes_as_early: number;
                                    early_minutes_as_lack: number;
                                    off_delay_minutes: number;
                                    late_minutes_as_serious_late?: number;
                                }>;
                                late_off_late_on_rule?: Array<{
                                    late_off_minutes: number;
                                    late_on_minutes: number;
                                }>;
                                rest_time_rule?: Array<{
                                    rest_begin_time: string;
                                    rest_end_time: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/shifts/query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=shift&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/attendance/v1/shifts`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                shift_list?: Array<{
                                                    shift_id: string;
                                                    shift_name: string;
                                                    punch_times: number;
                                                    is_flexible?: boolean;
                                                    flexible_minutes?: number;
                                                    flexible_rule?: Array<{
                                                        flexible_early_minutes: number;
                                                        flexible_late_minutes: number;
                                                    }>;
                                                    no_need_off?: boolean;
                                                    punch_time_rule: Array<{
                                                        on_time: string;
                                                        off_time: string;
                                                        late_minutes_as_late: number;
                                                        late_minutes_as_lack: number;
                                                        on_advance_minutes: number;
                                                        early_minutes_as_early: number;
                                                        early_minutes_as_lack: number;
                                                        off_delay_minutes: number;
                                                        late_minutes_as_serious_late?: number;
                                                    }>;
                                                    late_off_late_on_rule?: Array<{
                                                        late_off_minutes: number;
                                                        late_on_minutes: number;
                                                    }>;
                                                    rest_time_rule?: Array<{
                                                        rest_begin_time: string;
                                                        rest_end_time: string;
                                                    }>;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=shift&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                shift_list?: Array<{
                                    shift_id: string;
                                    shift_name: string;
                                    punch_times: number;
                                    is_flexible?: boolean;
                                    flexible_minutes?: number;
                                    flexible_rule?: Array<{
                                        flexible_early_minutes: number;
                                        flexible_late_minutes: number;
                                    }>;
                                    no_need_off?: boolean;
                                    punch_time_rule: Array<{
                                        on_time: string;
                                        off_time: string;
                                        late_minutes_as_late: number;
                                        late_minutes_as_lack: number;
                                        on_advance_minutes: number;
                                        early_minutes_as_early: number;
                                        early_minutes_as_lack: number;
                                        off_delay_minutes: number;
                                        late_minutes_as_serious_late?: number;
                                    }>;
                                    late_off_late_on_rule?: Array<{
                                        late_off_minutes: number;
                                        late_on_minutes: number;
                                    }>;
                                    rest_time_rule?: Array<{
                                        rest_begin_time: string;
                                        rest_end_time: string;
                                    }>;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/shifts`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        userFlow: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_flow&apiName=query&version=v1 click to debug }
             */
            query: async (
                payload?: {
                    data: {
                        user_ids: Array<string>;
                        check_time_from: string;
                        check_time_to: string;
                    };
                    params: {
                        employee_type: "employee_id" | "employee_no";
                        include_terminated_user?: boolean;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_flow_results?: Array<{
                                    user_id: string;
                                    creator_id: string;
                                    location_name: string;
                                    check_time: string;
                                    comment: string;
                                    record_id?: string;
                                    longitude?: number;
                                    latitude?: number;
                                    ssid?: string;
                                    bssid?: string;
                                    is_field?: boolean;
                                    is_wifi?: boolean;
                                    type?: number;
                                    photo_urls?: Array<string>;
                                    device_id?: string;
                                    check_result?:
                                        | "NoNeedCheck"
                                        | "SystemCheck"
                                        | "Normal"
                                        | "Early"
                                        | "Late"
                                        | "SeriousLate"
                                        | "Lack"
                                        | "Invalid"
                                        | "None"
                                        | "Todo";
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_flows/query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_flow&apiName=batch_create&version=v1 click to debug }
             */
            batchCreate: async (
                payload?: {
                    data: {
                        flow_records: Array<{
                            user_id: string;
                            creator_id: string;
                            location_name: string;
                            check_time: string;
                            comment: string;
                            record_id?: string;
                            longitude?: number;
                            latitude?: number;
                            ssid?: string;
                            bssid?: string;
                            is_field?: boolean;
                            is_wifi?: boolean;
                            type?: number;
                            photo_urls?: Array<string>;
                            device_id?: string;
                            check_result?:
                                | "NoNeedCheck"
                                | "SystemCheck"
                                | "Normal"
                                | "Early"
                                | "Late"
                                | "SeriousLate"
                                | "Lack"
                                | "Invalid"
                                | "None"
                                | "Todo";
                        }>;
                    };
                    params: { employee_type: "employee_id" | "employee_no" };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                flow_records?: Array<{
                                    user_id: string;
                                    creator_id: string;
                                    location_name: string;
                                    check_time: string;
                                    comment: string;
                                    record_id?: string;
                                    longitude?: number;
                                    latitude?: number;
                                    ssid?: string;
                                    bssid?: string;
                                    is_field?: boolean;
                                    is_wifi?: boolean;
                                    type?: number;
                                    photo_urls?: Array<string>;
                                    device_id?: string;
                                    check_result?:
                                        | "NoNeedCheck"
                                        | "SystemCheck"
                                        | "Normal"
                                        | "Early"
                                        | "Late"
                                        | "SeriousLate"
                                        | "Lack"
                                        | "Invalid"
                                        | "None"
                                        | "Todo";
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_flows/batch_create`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_flow&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    params: {
                        employee_type:
                            | "open_id"
                            | "employee_id"
                            | "employee_no";
                    };
                    path: { user_flow_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_id: string;
                                creator_id: string;
                                location_name: string;
                                check_time: string;
                                comment: string;
                                record_id?: string;
                                longitude?: number;
                                latitude?: number;
                                ssid?: string;
                                bssid?: string;
                                is_field?: boolean;
                                is_wifi?: boolean;
                                type?: number;
                                photo_urls?: Array<string>;
                                device_id?: string;
                                check_result?:
                                    | "NoNeedCheck"
                                    | "SystemCheck"
                                    | "Normal"
                                    | "Early"
                                    | "Late"
                                    | "SeriousLate"
                                    | "Lack"
                                    | "Invalid"
                                    | "None"
                                    | "Todo";
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_flows/:user_flow_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        userTask: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_task&apiName=query&version=v1 click to debug }
             */
            query: async (
                payload?: {
                    data: {
                        user_ids: Array<string>;
                        check_date_from: number;
                        check_date_to: number;
                    };
                    params: {
                        employee_type: "employee_id" | "employee_no";
                        ignore_invalid_users?: boolean;
                        include_terminated_user?: boolean;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_task_results?: Array<{
                                    result_id: string;
                                    user_id: string;
                                    employee_name: string;
                                    day: number;
                                    group_id: string;
                                    shift_id: string;
                                    records: Array<{
                                        check_in_record_id: string;
                                        check_in_record?: {
                                            user_id: string;
                                            creator_id: string;
                                            location_name: string;
                                            check_time: string;
                                            comment: string;
                                            record_id?: string;
                                            longitude?: number;
                                            latitude?: number;
                                            ssid?: string;
                                            bssid?: string;
                                            is_field?: boolean;
                                            is_wifi?: boolean;
                                            type?: number;
                                            photo_urls?: Array<string>;
                                            device_id?: string;
                                            check_result?:
                                                | "NoNeedCheck"
                                                | "SystemCheck"
                                                | "Normal"
                                                | "Early"
                                                | "Late"
                                                | "SeriousLate"
                                                | "Lack"
                                                | "Invalid"
                                                | "None"
                                                | "Todo";
                                        };
                                        check_out_record_id: string;
                                        check_out_record?: {
                                            user_id: string;
                                            creator_id: string;
                                            location_name: string;
                                            check_time: string;
                                            comment: string;
                                            record_id?: string;
                                            longitude?: number;
                                            latitude?: number;
                                            ssid?: string;
                                            bssid?: string;
                                            is_field?: boolean;
                                            is_wifi?: boolean;
                                            type?: number;
                                            photo_urls?: Array<string>;
                                            device_id?: string;
                                            check_result?:
                                                | "NoNeedCheck"
                                                | "SystemCheck"
                                                | "Normal"
                                                | "Early"
                                                | "Late"
                                                | "SeriousLate"
                                                | "Lack"
                                                | "Invalid"
                                                | "None"
                                                | "Todo";
                                        };
                                        check_in_result:
                                            | "NoNeedCheck"
                                            | "SystemCheck"
                                            | "Normal"
                                            | "Early"
                                            | "Late"
                                            | "Lack";
                                        check_out_result:
                                            | "NoNeedCheck"
                                            | "SystemCheck"
                                            | "Normal"
                                            | "Early"
                                            | "Late"
                                            | "Lack";
                                        check_in_result_supplement:
                                            | "None"
                                            | "ManagerModification"
                                            | "CardReplacement"
                                            | "ShiftChange"
                                            | "Travel"
                                            | "Leave"
                                            | "GoOut"
                                            | "CardReplacementApplication"
                                            | "FieldPunch";
                                        check_out_result_supplement:
                                            | "None"
                                            | "ManagerModification"
                                            | "CardReplacement"
                                            | "ShiftChange"
                                            | "Travel"
                                            | "Leave"
                                            | "GoOut"
                                            | "CardReplacementApplication"
                                            | "FieldPunch";
                                        check_in_shift_time?: string;
                                        check_out_shift_time?: string;
                                    }>;
                                }>;
                                invalid_user_ids?: Array<string>;
                                unauthorized_user_ids?: Array<string>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_tasks/query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        approvalInfo: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=approval_info&apiName=process&version=v1 click to debug }
             */
            process: async (
                payload?: {
                    data: {
                        approval_id: string;
                        approval_type: string;
                        status: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                approval_info?: {
                                    approval_id: string;
                                    approval_type:
                                        | "leave"
                                        | "overtime"
                                        | "trip"
                                        | "out"
                                        | "remedy";
                                    status: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/approval_infos/process`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        userApproval: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_approval&apiName=query&version=v1 click to debug }
             */
            query: async (
                payload?: {
                    data: {
                        user_ids: Array<string>;
                        check_date_from: number;
                        check_date_to: number;
                        check_date_type?: "PeriodTime" | "CreateTime";
                        status?: number;
                    };
                    params: { employee_type: "employee_id" | "employee_no" };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_approvals?: Array<{
                                    user_id: string;
                                    date: string;
                                    outs?: Array<{
                                        approval_id?: string;
                                        uniq_id: string;
                                        unit: number;
                                        interval: number;
                                        start_time: string;
                                        end_time: string;
                                        i18n_names: {
                                            ch?: string;
                                            en?: string;
                                            ja?: string;
                                        };
                                        default_locale: string;
                                        reason: string;
                                        approve_pass_time?: string;
                                        approve_apply_time?: string;
                                    }>;
                                    leaves?: Array<{
                                        approval_id?: string;
                                        uniq_id?: string;
                                        unit: number;
                                        interval: number;
                                        start_time: string;
                                        end_time: string;
                                        i18n_names: {
                                            ch?: string;
                                            en?: string;
                                            ja?: string;
                                        };
                                        default_locale: "ch" | "en" | "ja";
                                        reason: string;
                                        approve_pass_time?: string;
                                        approve_apply_time?: string;
                                    }>;
                                    overtime_works?: Array<{
                                        approval_id?: string;
                                        duration: number;
                                        unit: number;
                                        category: number;
                                        type: number;
                                        start_time: string;
                                        end_time: string;
                                    }>;
                                    trips?: Array<{
                                        approval_id?: string;
                                        start_time: string;
                                        end_time: string;
                                        reason: string;
                                        approve_pass_time: string;
                                        approve_apply_time: string;
                                    }>;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_approvals/query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_approval&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data?: {
                        user_approval?: {
                            user_id: string;
                            date: string;
                            outs?: Array<{
                                uniq_id: string;
                                unit: number;
                                interval: number;
                                start_time: string;
                                end_time: string;
                                i18n_names: {
                                    ch?: string;
                                    en?: string;
                                    ja?: string;
                                };
                                default_locale: string;
                                reason: string;
                            }>;
                            leaves?: Array<{
                                uniq_id?: string;
                                unit: number;
                                interval: number;
                                start_time: string;
                                end_time: string;
                                i18n_names: {
                                    ch?: string;
                                    en?: string;
                                    ja?: string;
                                };
                                default_locale: "ch" | "en" | "ja";
                                reason: string;
                            }>;
                            overtime_works?: Array<{
                                duration: number;
                                unit: number;
                                category: number;
                                type: number;
                                start_time: string;
                                end_time: string;
                            }>;
                            trips?: Array<{
                                start_time: string;
                                end_time: string;
                                reason: string;
                            }>;
                        };
                    };
                    params: { employee_type: "employee_id" | "employee_no" };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_approval?: {
                                    user_id: string;
                                    date: string;
                                    outs?: Array<{
                                        approval_id?: string;
                                        uniq_id: string;
                                        unit: number;
                                        interval: number;
                                        start_time: string;
                                        end_time: string;
                                        i18n_names: {
                                            ch?: string;
                                            en?: string;
                                            ja?: string;
                                        };
                                        default_locale: string;
                                        reason: string;
                                        approve_pass_time?: string;
                                        approve_apply_time?: string;
                                    }>;
                                    leaves?: Array<{
                                        approval_id?: string;
                                        uniq_id?: string;
                                        unit: number;
                                        interval: number;
                                        start_time: string;
                                        end_time: string;
                                        i18n_names: {
                                            ch?: string;
                                            en?: string;
                                            ja?: string;
                                        };
                                        default_locale: "ch" | "en" | "ja";
                                        reason: string;
                                        approve_pass_time?: string;
                                        approve_apply_time?: string;
                                    }>;
                                    overtime_works?: Array<{
                                        approval_id?: string;
                                        duration: number;
                                        unit: number;
                                        category: number;
                                        type: number;
                                        start_time: string;
                                        end_time: string;
                                    }>;
                                    trips?: Array<{
                                        approval_id?: string;
                                        start_time: string;
                                        end_time: string;
                                        reason: string;
                                        approve_pass_time: string;
                                        approve_apply_time: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_approvals`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        userStatsData: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=attendance&resource=user_stats_data&apiName=query&version=v1 click to debug }
             */
            query: async (
                payload?: {
                    data: {
                        locale: "en" | "ja" | "zh";
                        stats_type: "daily" | "month";
                        start_date: number;
                        end_date: number;
                        user_ids?: Array<string>;
                        need_history?: boolean;
                        current_group_only?: boolean;
                        user_id?: string;
                    };
                    params: { employee_type: "employee_id" | "employee_no" };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_datas?: Array<{
                                    name: string;
                                    user_id: string;
                                    datas?: Array<{
                                        code: string;
                                        value: string;
                                        features?: Array<{
                                            key: string;
                                            value: string;
                                        }>;
                                        title?: string;
                                    }>;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/attendance/v1/user_stats_datas/query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };

    aweme_ecosystem = {};

    baike = {
        entity: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=baike&resource=entity&apiName=match&version=v1 click to debug }
             */
            match: async (
                payload?: {
                    data: { word: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                results?: Array<{
                                    entity_id?: string;
                                    type?: number;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/baike/v1/entities/match`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=baike&resource=entity&apiName=highlight&version=v1 click to debug }
             */
            highlight: async (
                payload?: {
                    data: { text: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                phrases?: Array<{
                                    name: string;
                                    entity_ids: Array<string>;
                                    span: { start: number; end: number };
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/baike/v1/entities/highlight`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=baike&resource=entity&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        main_keys: Array<{
                            key: string;
                            display_status: {
                                allow_highlight: boolean;
                                allow_search: boolean;
                            };
                        }>;
                        full_names?: Array<{
                            key: string;
                            display_status: {
                                allow_highlight: boolean;
                                allow_search: boolean;
                            };
                        }>;
                        aliases?: Array<{
                            key: string;
                            display_status: {
                                allow_highlight: boolean;
                                allow_search: boolean;
                            };
                        }>;
                        description?: string;
                        related_meta?: {
                            users?: Array<{ id: string; title?: string }>;
                            chats?: Array<{ id: string }>;
                            docs?: Array<{ title?: string; url?: string }>;
                            oncalls?: Array<{ id: string }>;
                            links?: Array<{ title?: string; url?: string }>;
                            abbreviations?: Array<{ id?: string }>;
                            classifications?: Array<{
                                id: string;
                                father_id?: string;
                            }>;
                        };
                        outer_info?: { provider: string; outer_id: string };
                        rich_text?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                entity?: {
                                    id?: string;
                                    main_keys: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    full_names?: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    aliases?: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    description?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    related_meta?: {
                                        users?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        chats?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        docs?: Array<{
                                            title?: string;
                                            url?: string;
                                        }>;
                                        oncalls?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        links?: Array<{
                                            title?: string;
                                            url?: string;
                                        }>;
                                        abbreviations?: Array<{ id?: string }>;
                                        classifications?: Array<{
                                            id: string;
                                            name?: string;
                                            father_id?: string;
                                        }>;
                                    };
                                    categories?: Array<string>;
                                    statistics?: {
                                        like_count: number;
                                        dislike_count: number;
                                    };
                                    outer_info?: {
                                        provider: string;
                                        outer_id: string;
                                    };
                                    rich_text?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/baike/v1/entities`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=baike&resource=entity&apiName=update&version=v1 click to debug }
             */
            update: async (
                payload?: {
                    data: {
                        main_keys: Array<{
                            key: string;
                            display_status: {
                                allow_highlight: boolean;
                                allow_search: boolean;
                            };
                        }>;
                        full_names?: Array<{
                            key: string;
                            display_status: {
                                allow_highlight: boolean;
                                allow_search: boolean;
                            };
                        }>;
                        aliases?: Array<{
                            key: string;
                            display_status: {
                                allow_highlight: boolean;
                                allow_search: boolean;
                            };
                        }>;
                        description?: string;
                        related_meta?: {
                            users?: Array<{ id: string; title?: string }>;
                            chats?: Array<{ id: string }>;
                            docs?: Array<{ title?: string; url?: string }>;
                            oncalls?: Array<{ id: string }>;
                            links?: Array<{ title?: string; url?: string }>;
                            abbreviations?: Array<{ id?: string }>;
                            classifications?: Array<{
                                id: string;
                                father_id?: string;
                            }>;
                        };
                        outer_info?: { provider: string; outer_id: string };
                        rich_text?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { entity_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                entity?: {
                                    id?: string;
                                    main_keys: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    full_names?: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    aliases?: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    description?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    related_meta?: {
                                        users?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        chats?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        docs?: Array<{
                                            title?: string;
                                            url?: string;
                                        }>;
                                        oncalls?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        links?: Array<{
                                            title?: string;
                                            url?: string;
                                        }>;
                                        abbreviations?: Array<{ id?: string }>;
                                        classifications?: Array<{
                                            id: string;
                                            name?: string;
                                            father_id?: string;
                                        }>;
                                    };
                                    categories?: Array<string>;
                                    statistics?: {
                                        like_count: number;
                                        dislike_count: number;
                                    };
                                    outer_info?: {
                                        provider: string;
                                        outer_id: string;
                                    };
                                    rich_text?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/baike/v1/entities/:entity_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=baike&resource=entity&apiName=search&version=v1 click to debug }
             */
            searchWithIterator: async (
                payload?: {
                    data: { query: string };
                    params?: {
                        page_token?: string;
                        page_size?: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/baike/v1/entities/search`,
                                path
                            ),
                            method: "POST",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                entities?: Array<{
                                                    id?: string;
                                                    main_keys: Array<{
                                                        key: string;
                                                        display_status: {
                                                            allow_highlight: boolean;
                                                            allow_search: boolean;
                                                        };
                                                    }>;
                                                    full_names?: Array<{
                                                        key: string;
                                                        display_status: {
                                                            allow_highlight: boolean;
                                                            allow_search: boolean;
                                                        };
                                                    }>;
                                                    aliases?: Array<{
                                                        key: string;
                                                        display_status: {
                                                            allow_highlight: boolean;
                                                            allow_search: boolean;
                                                        };
                                                    }>;
                                                    description?: string;
                                                    create_time?: string;
                                                    update_time?: string;
                                                    related_meta?: {
                                                        users?: Array<{
                                                            id: string;
                                                            title?: string;
                                                            url?: string;
                                                        }>;
                                                        chats?: Array<{
                                                            id: string;
                                                            title?: string;
                                                            url?: string;
                                                        }>;
                                                        docs?: Array<{
                                                            title?: string;
                                                            url?: string;
                                                        }>;
                                                        oncalls?: Array<{
                                                            id: string;
                                                            title?: string;
                                                            url?: string;
                                                        }>;
                                                        links?: Array<{
                                                            title?: string;
                                                            url?: string;
                                                        }>;
                                                        abbreviations?: Array<{
                                                            id?: string;
                                                        }>;
                                                        classifications?: Array<{
                                                            id: string;
                                                            name?: string;
                                                            father_id?: string;
                                                        }>;
                                                    };
                                                    categories?: Array<string>;
                                                    statistics?: {
                                                        like_count: number;
                                                        dislike_count: number;
                                                    };
                                                    outer_info?: {
                                                        provider: string;
                                                        outer_id: string;
                                                    };
                                                    rich_text?: string;
                                                }>;
                                                page_token?: string;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=baike&resource=entity&apiName=search&version=v1 click to debug }
             */
            search: async (
                payload?: {
                    data: { query: string };
                    params?: {
                        page_token?: string;
                        page_size?: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                entities?: Array<{
                                    id?: string;
                                    main_keys: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    full_names?: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    aliases?: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    description?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    related_meta?: {
                                        users?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        chats?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        docs?: Array<{
                                            title?: string;
                                            url?: string;
                                        }>;
                                        oncalls?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        links?: Array<{
                                            title?: string;
                                            url?: string;
                                        }>;
                                        abbreviations?: Array<{ id?: string }>;
                                        classifications?: Array<{
                                            id: string;
                                            name?: string;
                                            father_id?: string;
                                        }>;
                                    };
                                    categories?: Array<string>;
                                    statistics?: {
                                        like_count: number;
                                        dislike_count: number;
                                    };
                                    outer_info?: {
                                        provider: string;
                                        outer_id: string;
                                    };
                                    rich_text?: string;
                                }>;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/baike/v1/entities/search`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=baike&resource=entity&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    params?: {
                        provider?: string;
                        outer_id?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { entity_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                entity?: {
                                    id?: string;
                                    main_keys: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    full_names?: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    aliases?: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    description?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    related_meta?: {
                                        users?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        chats?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        docs?: Array<{
                                            title?: string;
                                            url?: string;
                                        }>;
                                        oncalls?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        links?: Array<{
                                            title?: string;
                                            url?: string;
                                        }>;
                                        abbreviations?: Array<{ id?: string }>;
                                        classifications?: Array<{
                                            id: string;
                                            name?: string;
                                            father_id?: string;
                                        }>;
                                    };
                                    categories?: Array<string>;
                                    statistics?: {
                                        like_count: number;
                                        dislike_count: number;
                                    };
                                    outer_info?: {
                                        provider: string;
                                        outer_id: string;
                                    };
                                    rich_text?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/baike/v1/entities/:entity_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=baike&resource=entity&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        provider?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/baike/v1/entities`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                entities?: Array<{
                                                    id?: string;
                                                    main_keys: Array<{
                                                        key: string;
                                                        display_status: {
                                                            allow_highlight: boolean;
                                                            allow_search: boolean;
                                                        };
                                                    }>;
                                                    full_names?: Array<{
                                                        key: string;
                                                        display_status: {
                                                            allow_highlight: boolean;
                                                            allow_search: boolean;
                                                        };
                                                    }>;
                                                    aliases?: Array<{
                                                        key: string;
                                                        display_status: {
                                                            allow_highlight: boolean;
                                                            allow_search: boolean;
                                                        };
                                                    }>;
                                                    description?: string;
                                                    create_time?: string;
                                                    update_time?: string;
                                                    related_meta?: {
                                                        users?: Array<{
                                                            id: string;
                                                            title?: string;
                                                            url?: string;
                                                        }>;
                                                        chats?: Array<{
                                                            id: string;
                                                            title?: string;
                                                            url?: string;
                                                        }>;
                                                        docs?: Array<{
                                                            title?: string;
                                                            url?: string;
                                                        }>;
                                                        oncalls?: Array<{
                                                            id: string;
                                                            title?: string;
                                                            url?: string;
                                                        }>;
                                                        links?: Array<{
                                                            title?: string;
                                                            url?: string;
                                                        }>;
                                                        abbreviations?: Array<{
                                                            id?: string;
                                                        }>;
                                                        classifications?: Array<{
                                                            id: string;
                                                            name?: string;
                                                            father_id?: string;
                                                        }>;
                                                    };
                                                    categories?: Array<string>;
                                                    statistics?: {
                                                        like_count: number;
                                                        dislike_count: number;
                                                    };
                                                    outer_info?: {
                                                        provider: string;
                                                        outer_id: string;
                                                    };
                                                    rich_text?: string;
                                                }>;
                                                page_token?: string;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=baike&resource=entity&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        provider?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                entities?: Array<{
                                    id?: string;
                                    main_keys: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    full_names?: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    aliases?: Array<{
                                        key: string;
                                        display_status: {
                                            allow_highlight: boolean;
                                            allow_search: boolean;
                                        };
                                    }>;
                                    description?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    related_meta?: {
                                        users?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        chats?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        docs?: Array<{
                                            title?: string;
                                            url?: string;
                                        }>;
                                        oncalls?: Array<{
                                            id: string;
                                            title?: string;
                                            url?: string;
                                        }>;
                                        links?: Array<{
                                            title?: string;
                                            url?: string;
                                        }>;
                                        abbreviations?: Array<{ id?: string }>;
                                        classifications?: Array<{
                                            id: string;
                                            name?: string;
                                            father_id?: string;
                                        }>;
                                    };
                                    categories?: Array<string>;
                                    statistics?: {
                                        like_count: number;
                                        dislike_count: number;
                                    };
                                    outer_info?: {
                                        provider: string;
                                        outer_id: string;
                                    };
                                    rich_text?: string;
                                }>;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/baike/v1/entities`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        classification: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=baike&resource=classification&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/baike/v1/classifications`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    id: string;
                                                    name?: string;
                                                    father_id?: string;
                                                }>;
                                                page_token?: string;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=baike&resource=classification&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id: string;
                                    name?: string;
                                    father_id?: string;
                                }>;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/baike/v1/classifications`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        draft: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=baike&resource=draft&apiName=update&version=v1 click to debug }
             */
            update: async (
                payload?: {
                    data: {
                        id?: string;
                        main_keys: Array<{
                            key: string;
                            display_status: {
                                allow_highlight: boolean;
                                allow_search: boolean;
                            };
                        }>;
                        full_names?: Array<{
                            key: string;
                            display_status: {
                                allow_highlight: boolean;
                                allow_search: boolean;
                            };
                        }>;
                        aliases?: Array<{
                            key: string;
                            display_status: {
                                allow_highlight: boolean;
                                allow_search: boolean;
                            };
                        }>;
                        description?: string;
                        related_meta?: {
                            users?: Array<{ id: string; title?: string }>;
                            chats?: Array<{ id: string }>;
                            docs?: Array<{ title?: string; url?: string }>;
                            oncalls?: Array<{ id: string }>;
                            links?: Array<{ title?: string; url?: string }>;
                            abbreviations?: Array<{ id?: string }>;
                            classifications?: Array<{
                                id: string;
                                father_id?: string;
                            }>;
                        };
                        rich_text?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { draft_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                draft?: {
                                    draft_id?: string;
                                    entity?: {
                                        id?: string;
                                        main_keys: Array<{
                                            key: string;
                                            display_status: {
                                                allow_highlight: boolean;
                                                allow_search: boolean;
                                            };
                                        }>;
                                        full_names?: Array<{
                                            key: string;
                                            display_status: {
                                                allow_highlight: boolean;
                                                allow_search: boolean;
                                            };
                                        }>;
                                        aliases?: Array<{
                                            key: string;
                                            display_status: {
                                                allow_highlight: boolean;
                                                allow_search: boolean;
                                            };
                                        }>;
                                        description?: string;
                                        create_time?: string;
                                        update_time?: string;
                                        related_meta?: {
                                            users?: Array<{
                                                id: string;
                                                title?: string;
                                                url?: string;
                                            }>;
                                            chats?: Array<{
                                                id: string;
                                                title?: string;
                                                url?: string;
                                            }>;
                                            docs?: Array<{
                                                title?: string;
                                                url?: string;
                                            }>;
                                            oncalls?: Array<{
                                                id: string;
                                                title?: string;
                                                url?: string;
                                            }>;
                                            links?: Array<{
                                                title?: string;
                                                url?: string;
                                            }>;
                                            abbreviations?: Array<{
                                                id?: string;
                                            }>;
                                            classifications?: Array<{
                                                id: string;
                                                name?: string;
                                                father_id?: string;
                                            }>;
                                        };
                                        categories?: Array<string>;
                                        statistics?: {
                                            like_count: number;
                                            dislike_count: number;
                                        };
                                        outer_info?: {
                                            provider: string;
                                            outer_id: string;
                                        };
                                        rich_text?: string;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/baike/v1/drafts/:draft_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=baike&resource=draft&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        id?: string;
                        main_keys: Array<{
                            key: string;
                            display_status: {
                                allow_highlight: boolean;
                                allow_search: boolean;
                            };
                        }>;
                        full_names?: Array<{
                            key: string;
                            display_status: {
                                allow_highlight: boolean;
                                allow_search: boolean;
                            };
                        }>;
                        aliases?: Array<{
                            key: string;
                            display_status: {
                                allow_highlight: boolean;
                                allow_search: boolean;
                            };
                        }>;
                        description?: string;
                        related_meta?: {
                            users?: Array<{ id: string; title?: string }>;
                            chats?: Array<{ id: string }>;
                            docs?: Array<{ title?: string; url?: string }>;
                            oncalls?: Array<{ id: string }>;
                            links?: Array<{ title?: string; url?: string }>;
                            abbreviations?: Array<{ id?: string }>;
                            classifications?: Array<{
                                id: string;
                                father_id?: string;
                            }>;
                        };
                        outer_info?: { provider: string; outer_id: string };
                        rich_text?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                draft?: {
                                    draft_id?: string;
                                    entity?: {
                                        id?: string;
                                        main_keys: Array<{
                                            key: string;
                                            display_status: {
                                                allow_highlight: boolean;
                                                allow_search: boolean;
                                            };
                                        }>;
                                        full_names?: Array<{
                                            key: string;
                                            display_status: {
                                                allow_highlight: boolean;
                                                allow_search: boolean;
                                            };
                                        }>;
                                        aliases?: Array<{
                                            key: string;
                                            display_status: {
                                                allow_highlight: boolean;
                                                allow_search: boolean;
                                            };
                                        }>;
                                        description?: string;
                                        create_time?: string;
                                        update_time?: string;
                                        related_meta?: {
                                            users?: Array<{
                                                id: string;
                                                title?: string;
                                                url?: string;
                                            }>;
                                            chats?: Array<{
                                                id: string;
                                                title?: string;
                                                url?: string;
                                            }>;
                                            docs?: Array<{
                                                title?: string;
                                                url?: string;
                                            }>;
                                            oncalls?: Array<{
                                                id: string;
                                                title?: string;
                                                url?: string;
                                            }>;
                                            links?: Array<{
                                                title?: string;
                                                url?: string;
                                            }>;
                                            abbreviations?: Array<{
                                                id?: string;
                                            }>;
                                            classifications?: Array<{
                                                id: string;
                                                name?: string;
                                                father_id?: string;
                                            }>;
                                        };
                                        categories?: Array<string>;
                                        statistics?: {
                                            like_count: number;
                                            dislike_count: number;
                                        };
                                        outer_info?: {
                                            provider: string;
                                            outer_id: string;
                                        };
                                        rich_text?: string;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/baike/v1/drafts`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };

    block = {
        entity: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=block&resource=entity&apiName=create&version=v2 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        title: string;
                        block_type_id: string;
                        source_data: string;
                        source_meta: string;
                        version: string;
                        source_link?: string;
                        owner?: string;
                        extra?: string;
                        i18n_summary?: string;
                        i18n_preview?: string;
                        summary?: string;
                        preview?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                entity: {
                                    block_id: string;
                                    title?: string;
                                    block_type_id: string;
                                    source_data: string;
                                    source_meta: string;
                                    version: string;
                                    source_link?: string;
                                    summary?: string;
                                    preview?: string;
                                    i18n_summay?: string;
                                    i18n_preview?: string;
                                    owner?: string;
                                    extra?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/block/v2/entities`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=block&resource=entity&apiName=update&version=v2 click to debug }
             */
            update: async (
                payload?: {
                    data: {
                        title?: string;
                        block_type_id: string;
                        source_data: string;
                        source_meta: string;
                        version: string;
                        source_link?: string;
                        summary?: string;
                        preview?: string;
                        i18n_summay?: string;
                        i18n_preview?: string;
                        owner?: string;
                        extra?: string;
                    };
                    path: { block_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/block/v2/entities/:block_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        message: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=block&resource=message&apiName=create&version=v2 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        body: string;
                        version: string;
                        block_id: string;
                        resource?: string;
                        open_ids: Array<string>;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/block/v2/message`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };

    calendar = {
        calendarAcl: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.acl&apiName=create&version=v4 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        role:
                            | "unknown"
                            | "free_busy_reader"
                            | "reader"
                            | "writer"
                            | "owner";
                        scope: { type: "user"; user_id?: string };
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                acl_id: string;
                                role:
                                    | "unknown"
                                    | "free_busy_reader"
                                    | "reader"
                                    | "writer"
                                    | "owner";
                                scope: { type: "user"; user_id?: string };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/acls`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.acl&apiName=delete&version=v4 click to debug }
             */
            delete: async (
                payload?: {
                    path: { calendar_id: string; acl_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/acls/:acl_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.acl&apiName=list&version=v4 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/acls`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                acls?: Array<{
                                                    acl_id: string;
                                                    role:
                                                        | "unknown"
                                                        | "free_busy_reader"
                                                        | "reader"
                                                        | "writer"
                                                        | "owner";
                                                    scope: {
                                                        type: "user";
                                                        user_id?: string;
                                                    };
                                                }>;
                                                has_more?: boolean;
                                                page_token?: string;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.acl&apiName=list&version=v4 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                acls?: Array<{
                                    acl_id: string;
                                    role:
                                        | "unknown"
                                        | "free_busy_reader"
                                        | "reader"
                                        | "writer"
                                        | "owner";
                                    scope: { type: "user"; user_id?: string };
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/acls`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.acl&apiName=subscription&version=v4 click to debug }
             */
            subscription: async (
                payload?: {
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/acls/subscription`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.acl&apiName=unsubscription&version=v4 click to debug }
             */
            unsubscription: async (
                payload?: {
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/acls/unsubscription`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        calendarEventAttendee: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event.attendee&apiName=list&version=v4 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { calendar_id: string; event_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id/attendees`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    type?:
                                                        | "user"
                                                        | "chat"
                                                        | "resource"
                                                        | "third_party";
                                                    attendee_id?: string;
                                                    rsvp_status?:
                                                        | "needs_action"
                                                        | "accept"
                                                        | "tentative"
                                                        | "decline"
                                                        | "removed";
                                                    is_optional?: boolean;
                                                    is_organizer?: boolean;
                                                    is_external?: boolean;
                                                    display_name?: string;
                                                    chat_members?: Array<{
                                                        rsvp_status?:
                                                            | "needs_action"
                                                            | "accept"
                                                            | "tentative"
                                                            | "decline"
                                                            | "removed";
                                                        is_optional?: boolean;
                                                        display_name?: string;
                                                        is_organizer?: boolean;
                                                        is_external?: boolean;
                                                    }>;
                                                    user_id?: string;
                                                    chat_id?: string;
                                                    room_id?: string;
                                                    third_party_email?: string;
                                                    operate_id?: string;
                                                    resource_customization?: Array<{
                                                        index_key: string;
                                                        input_content?: string;
                                                        options?: Array<{
                                                            option_key?: string;
                                                            others_content?: string;
                                                        }>;
                                                    }>;
                                                }>;
                                                has_more?: boolean;
                                                page_token?: string;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event.attendee&apiName=list&version=v4 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { calendar_id: string; event_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    type?:
                                        | "user"
                                        | "chat"
                                        | "resource"
                                        | "third_party";
                                    attendee_id?: string;
                                    rsvp_status?:
                                        | "needs_action"
                                        | "accept"
                                        | "tentative"
                                        | "decline"
                                        | "removed";
                                    is_optional?: boolean;
                                    is_organizer?: boolean;
                                    is_external?: boolean;
                                    display_name?: string;
                                    chat_members?: Array<{
                                        rsvp_status?:
                                            | "needs_action"
                                            | "accept"
                                            | "tentative"
                                            | "decline"
                                            | "removed";
                                        is_optional?: boolean;
                                        display_name?: string;
                                        is_organizer?: boolean;
                                        is_external?: boolean;
                                    }>;
                                    user_id?: string;
                                    chat_id?: string;
                                    room_id?: string;
                                    third_party_email?: string;
                                    operate_id?: string;
                                    resource_customization?: Array<{
                                        index_key: string;
                                        input_content?: string;
                                        options?: Array<{
                                            option_key?: string;
                                            others_content?: string;
                                        }>;
                                    }>;
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id/attendees`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event.attendee&apiName=create&version=v4 click to debug }
             */
            create: async (
                payload?: {
                    data?: {
                        attendees?: Array<{
                            type?: "user" | "chat" | "resource" | "third_party";
                            is_optional?: boolean;
                            user_id?: string;
                            chat_id?: string;
                            room_id?: string;
                            third_party_email?: string;
                            operate_id?: string;
                            resource_customization?: Array<{
                                index_key: string;
                                input_content?: string;
                                options?: Array<{
                                    option_key?: string;
                                    others_content?: string;
                                }>;
                            }>;
                        }>;
                        need_notification?: boolean;
                        instance_start_time_admin?: string;
                        is_enable_admin?: boolean;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { calendar_id: string; event_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                attendees?: Array<{
                                    type?:
                                        | "user"
                                        | "chat"
                                        | "resource"
                                        | "third_party";
                                    attendee_id?: string;
                                    rsvp_status?:
                                        | "needs_action"
                                        | "accept"
                                        | "tentative"
                                        | "decline"
                                        | "removed";
                                    is_optional?: boolean;
                                    is_organizer?: boolean;
                                    is_external?: boolean;
                                    display_name?: string;
                                    chat_members?: Array<{
                                        rsvp_status?:
                                            | "needs_action"
                                            | "accept"
                                            | "tentative"
                                            | "decline"
                                            | "removed";
                                        is_optional?: boolean;
                                        display_name?: string;
                                        is_organizer?: boolean;
                                        is_external?: boolean;
                                    }>;
                                    user_id?: string;
                                    chat_id?: string;
                                    room_id?: string;
                                    third_party_email?: string;
                                    operate_id?: string;
                                    resource_customization?: Array<{
                                        index_key: string;
                                        input_content?: string;
                                        options?: Array<{
                                            option_key?: string;
                                            others_content?: string;
                                        }>;
                                    }>;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id/attendees`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event.attendee&apiName=batch_delete&version=v4 click to debug }
             */
            batchDelete: async (
                payload?: {
                    data?: {
                        attendee_ids?: Array<string>;
                        delete_ids?: Array<{
                            type?: "user" | "chat" | "resource" | "third_party";
                            user_id?: string;
                            chat_id?: string;
                            room_id?: string;
                            third_party_email?: string;
                        }>;
                        need_notification?: boolean;
                        instance_start_time_admin?: string;
                        is_enable_admin?: boolean;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { calendar_id: string; event_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id/attendees/batch_delete`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        calendarEvent: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event&apiName=subscription&version=v4 click to debug }
             */
            subscription: async (
                payload?: {
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/subscription`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event&apiName=get&version=v4 click to debug }
             */
            get: async (
                payload?: {
                    path: { calendar_id: string; event_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                event?: {
                                    event_id: string;
                                    organizer_calendar_id?: string;
                                    summary?: string;
                                    description?: string;
                                    start_time: {
                                        date?: string;
                                        timestamp?: string;
                                        timezone?: string;
                                    };
                                    end_time: {
                                        date?: string;
                                        timestamp?: string;
                                        timezone?: string;
                                    };
                                    vchat?: {
                                        vc_type?:
                                            | "vc"
                                            | "third_party"
                                            | "no_meeting"
                                            | "lark_live"
                                            | "unknown";
                                        icon_type?: "vc" | "live" | "default";
                                        description?: string;
                                        meeting_url?: string;
                                    };
                                    visibility?:
                                        | "default"
                                        | "public"
                                        | "private";
                                    attendee_ability?:
                                        | "none"
                                        | "can_see_others"
                                        | "can_invite_others"
                                        | "can_modify_event";
                                    free_busy_status?: "busy" | "free";
                                    location?: {
                                        name?: string;
                                        address?: string;
                                        latitude?: number;
                                        longitude?: number;
                                    };
                                    color?: number;
                                    reminders?: Array<{ minutes?: number }>;
                                    recurrence?: string;
                                    status?:
                                        | "tentative"
                                        | "confirmed"
                                        | "cancelled";
                                    is_exception?: boolean;
                                    recurring_event_id?: string;
                                    schemas?: Array<{
                                        ui_name?: string;
                                        ui_status?:
                                            | "hide"
                                            | "readonly"
                                            | "editable"
                                            | "unknown";
                                        app_link?: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event&apiName=patch&version=v4 click to debug }
             */
            patch: async (
                payload?: {
                    data?: {
                        summary?: string;
                        description?: string;
                        need_notification?: boolean;
                        start_time?: {
                            date?: string;
                            timestamp?: string;
                            timezone?: string;
                        };
                        end_time?: {
                            date?: string;
                            timestamp?: string;
                            timezone?: string;
                        };
                        vchat?: {
                            vc_type?:
                                | "vc"
                                | "third_party"
                                | "no_meeting"
                                | "lark_live"
                                | "unknown";
                            icon_type?: "vc" | "live" | "default";
                            description?: string;
                            meeting_url?: string;
                        };
                        visibility?: "default" | "public" | "private";
                        attendee_ability?:
                            | "none"
                            | "can_see_others"
                            | "can_invite_others"
                            | "can_modify_event";
                        free_busy_status?: "busy" | "free";
                        location?: {
                            name?: string;
                            address?: string;
                            latitude?: number;
                            longitude?: number;
                        };
                        color?: number;
                        reminders?: Array<{ minutes?: number }>;
                        recurrence?: string;
                        schemas?: Array<{
                            ui_name?: string;
                            ui_status?:
                                | "hide"
                                | "readonly"
                                | "editable"
                                | "unknown";
                            app_link?: string;
                        }>;
                    };
                    path: { calendar_id: string; event_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                event?: {
                                    event_id: string;
                                    organizer_calendar_id?: string;
                                    summary?: string;
                                    description?: string;
                                    need_notification?: boolean;
                                    start_time: {
                                        date?: string;
                                        timestamp?: string;
                                        timezone?: string;
                                    };
                                    end_time: {
                                        date?: string;
                                        timestamp?: string;
                                        timezone?: string;
                                    };
                                    vchat?: {
                                        vc_type?:
                                            | "vc"
                                            | "third_party"
                                            | "no_meeting"
                                            | "lark_live"
                                            | "unknown";
                                        icon_type?: "vc" | "live" | "default";
                                        description?: string;
                                        meeting_url?: string;
                                    };
                                    visibility?:
                                        | "default"
                                        | "public"
                                        | "private";
                                    attendee_ability?:
                                        | "none"
                                        | "can_see_others"
                                        | "can_invite_others"
                                        | "can_modify_event";
                                    free_busy_status?: "busy" | "free";
                                    location?: {
                                        name?: string;
                                        address?: string;
                                        latitude?: number;
                                        longitude?: number;
                                    };
                                    color?: number;
                                    reminders?: Array<{ minutes?: number }>;
                                    recurrence?: string;
                                    status?:
                                        | "tentative"
                                        | "confirmed"
                                        | "cancelled";
                                    is_exception?: boolean;
                                    recurring_event_id?: string;
                                    schemas?: Array<{
                                        ui_name?: string;
                                        ui_status?:
                                            | "hide"
                                            | "readonly"
                                            | "editable"
                                            | "unknown";
                                        app_link?: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event&apiName=create&version=v4 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        summary?: string;
                        description?: string;
                        need_notification?: boolean;
                        start_time: {
                            date?: string;
                            timestamp?: string;
                            timezone?: string;
                        };
                        end_time: {
                            date?: string;
                            timestamp?: string;
                            timezone?: string;
                        };
                        vchat?: {
                            vc_type?:
                                | "vc"
                                | "third_party"
                                | "no_meeting"
                                | "lark_live"
                                | "unknown";
                            icon_type?: "vc" | "live" | "default";
                            description?: string;
                            meeting_url?: string;
                        };
                        visibility?: "default" | "public" | "private";
                        attendee_ability?:
                            | "none"
                            | "can_see_others"
                            | "can_invite_others"
                            | "can_modify_event";
                        free_busy_status?: "busy" | "free";
                        location?: {
                            name?: string;
                            address?: string;
                            latitude?: number;
                            longitude?: number;
                        };
                        color?: number;
                        reminders?: Array<{ minutes?: number }>;
                        recurrence?: string;
                        schemas?: Array<{
                            ui_name?: string;
                            ui_status?:
                                | "hide"
                                | "readonly"
                                | "editable"
                                | "unknown";
                            app_link?: string;
                        }>;
                    };
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                event?: {
                                    event_id: string;
                                    organizer_calendar_id?: string;
                                    summary?: string;
                                    description?: string;
                                    need_notification?: boolean;
                                    start_time: {
                                        date?: string;
                                        timestamp?: string;
                                        timezone?: string;
                                    };
                                    end_time: {
                                        date?: string;
                                        timestamp?: string;
                                        timezone?: string;
                                    };
                                    vchat?: {
                                        vc_type?:
                                            | "vc"
                                            | "third_party"
                                            | "no_meeting"
                                            | "lark_live"
                                            | "unknown";
                                        icon_type?: "vc" | "live" | "default";
                                        description?: string;
                                        meeting_url?: string;
                                    };
                                    visibility?:
                                        | "default"
                                        | "public"
                                        | "private";
                                    attendee_ability?:
                                        | "none"
                                        | "can_see_others"
                                        | "can_invite_others"
                                        | "can_modify_event";
                                    free_busy_status?: "busy" | "free";
                                    location?: {
                                        name?: string;
                                        address?: string;
                                        latitude?: number;
                                        longitude?: number;
                                    };
                                    color?: number;
                                    reminders?: Array<{ minutes?: number }>;
                                    recurrence?: string;
                                    status?:
                                        | "tentative"
                                        | "confirmed"
                                        | "cancelled";
                                    is_exception?: boolean;
                                    recurring_event_id?: string;
                                    schemas?: Array<{
                                        ui_name?: string;
                                        ui_status?:
                                            | "hide"
                                            | "readonly"
                                            | "editable"
                                            | "unknown";
                                        app_link?: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event&apiName=search&version=v4 click to debug }
             */
            searchWithIterator: async (
                payload?: {
                    data: {
                        query: string;
                        filter?: {
                            start_time?: {
                                date?: string;
                                timestamp?: string;
                                timezone?: string;
                            };
                            end_time?: {
                                date?: string;
                                timestamp?: string;
                                timezone?: string;
                            };
                            user_ids?: Array<string>;
                            room_ids?: Array<string>;
                            chat_ids?: Array<string>;
                        };
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/search`,
                                path
                            ),
                            method: "POST",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    event_id: string;
                                                    organizer_calendar_id?: string;
                                                    summary?: string;
                                                    description?: string;
                                                    need_notification?: boolean;
                                                    start_time: {
                                                        date?: string;
                                                        timestamp?: string;
                                                        timezone?: string;
                                                    };
                                                    end_time: {
                                                        date?: string;
                                                        timestamp?: string;
                                                        timezone?: string;
                                                    };
                                                    vchat?: {
                                                        vc_type?:
                                                            | "vc"
                                                            | "third_party"
                                                            | "no_meeting"
                                                            | "lark_live"
                                                            | "unknown";
                                                        icon_type?:
                                                            | "vc"
                                                            | "live"
                                                            | "default";
                                                        description?: string;
                                                        meeting_url?: string;
                                                    };
                                                    visibility?:
                                                        | "default"
                                                        | "public"
                                                        | "private";
                                                    attendee_ability?:
                                                        | "none"
                                                        | "can_see_others"
                                                        | "can_invite_others"
                                                        | "can_modify_event";
                                                    free_busy_status?:
                                                        | "busy"
                                                        | "free";
                                                    location?: {
                                                        name?: string;
                                                        address?: string;
                                                        latitude?: number;
                                                        longitude?: number;
                                                    };
                                                    color?: number;
                                                    reminders?: Array<{
                                                        minutes?: number;
                                                    }>;
                                                    recurrence?: string;
                                                    status?:
                                                        | "tentative"
                                                        | "confirmed"
                                                        | "cancelled";
                                                    is_exception?: boolean;
                                                    recurring_event_id?: string;
                                                    schemas?: Array<{
                                                        ui_name?: string;
                                                        ui_status?:
                                                            | "hide"
                                                            | "readonly"
                                                            | "editable"
                                                            | "unknown";
                                                        app_link?: string;
                                                    }>;
                                                }>;
                                                page_token?: string;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event&apiName=search&version=v4 click to debug }
             */
            search: async (
                payload?: {
                    data: {
                        query: string;
                        filter?: {
                            start_time?: {
                                date?: string;
                                timestamp?: string;
                                timezone?: string;
                            };
                            end_time?: {
                                date?: string;
                                timestamp?: string;
                                timezone?: string;
                            };
                            user_ids?: Array<string>;
                            room_ids?: Array<string>;
                            chat_ids?: Array<string>;
                        };
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    event_id: string;
                                    organizer_calendar_id?: string;
                                    summary?: string;
                                    description?: string;
                                    need_notification?: boolean;
                                    start_time: {
                                        date?: string;
                                        timestamp?: string;
                                        timezone?: string;
                                    };
                                    end_time: {
                                        date?: string;
                                        timestamp?: string;
                                        timezone?: string;
                                    };
                                    vchat?: {
                                        vc_type?:
                                            | "vc"
                                            | "third_party"
                                            | "no_meeting"
                                            | "lark_live"
                                            | "unknown";
                                        icon_type?: "vc" | "live" | "default";
                                        description?: string;
                                        meeting_url?: string;
                                    };
                                    visibility?:
                                        | "default"
                                        | "public"
                                        | "private";
                                    attendee_ability?:
                                        | "none"
                                        | "can_see_others"
                                        | "can_invite_others"
                                        | "can_modify_event";
                                    free_busy_status?: "busy" | "free";
                                    location?: {
                                        name?: string;
                                        address?: string;
                                        latitude?: number;
                                        longitude?: number;
                                    };
                                    color?: number;
                                    reminders?: Array<{ minutes?: number }>;
                                    recurrence?: string;
                                    status?:
                                        | "tentative"
                                        | "confirmed"
                                        | "cancelled";
                                    is_exception?: boolean;
                                    recurring_event_id?: string;
                                    schemas?: Array<{
                                        ui_name?: string;
                                        ui_status?:
                                            | "hide"
                                            | "readonly"
                                            | "editable"
                                            | "unknown";
                                        app_link?: string;
                                    }>;
                                }>;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/search`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event&apiName=list&version=v4 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        anchor_time?: string;
                        page_token?: string;
                        sync_token?: string;
                        start_time?: string;
                        end_time?: string;
                    };
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                sync_token?: string;
                                items?: Array<{
                                    event_id: string;
                                    organizer_calendar_id?: string;
                                    summary?: string;
                                    description?: string;
                                    start_time: {
                                        date?: string;
                                        timestamp?: string;
                                        timezone?: string;
                                    };
                                    end_time: {
                                        date?: string;
                                        timestamp?: string;
                                        timezone?: string;
                                    };
                                    vchat?: {
                                        vc_type?:
                                            | "vc"
                                            | "third_party"
                                            | "no_meeting"
                                            | "lark_live"
                                            | "unknown";
                                        icon_type?: "vc" | "live" | "default";
                                        description?: string;
                                        meeting_url?: string;
                                    };
                                    visibility?:
                                        | "default"
                                        | "public"
                                        | "private";
                                    attendee_ability?:
                                        | "none"
                                        | "can_see_others"
                                        | "can_invite_others"
                                        | "can_modify_event";
                                    free_busy_status?: "busy" | "free";
                                    location?: {
                                        name?: string;
                                        address?: string;
                                        latitude?: number;
                                        longitude?: number;
                                    };
                                    color?: number;
                                    reminders?: Array<{ minutes?: number }>;
                                    recurrence?: string;
                                    status?:
                                        | "tentative"
                                        | "confirmed"
                                        | "cancelled";
                                    is_exception?: boolean;
                                    recurring_event_id?: string;
                                    schemas?: Array<{
                                        ui_name?: string;
                                        ui_status?:
                                            | "hide"
                                            | "readonly"
                                            | "editable"
                                            | "unknown";
                                        app_link?: string;
                                    }>;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event&apiName=delete&version=v4 click to debug }
             */
            delete: async (
                payload?: {
                    params?: { need_notification?: boolean };
                    path: { calendar_id: string; event_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event&apiName=unsubscription&version=v4 click to debug }
             */
            unsubscription: async (
                payload?: {
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/unsubscription`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        calendar: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=create&version=v4 click to debug }
             */
            create: async (
                payload?: {
                    data?: {
                        summary?: string;
                        description?: string;
                        permissions?:
                            | "private"
                            | "show_only_free_busy"
                            | "public";
                        color?: number;
                        summary_alias?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                calendar?: {
                                    calendar_id: string;
                                    summary?: string;
                                    description?: string;
                                    permissions?:
                                        | "private"
                                        | "show_only_free_busy"
                                        | "public";
                                    color?: number;
                                    type?:
                                        | "unknown"
                                        | "primary"
                                        | "shared"
                                        | "google"
                                        | "resource"
                                        | "exchange";
                                    summary_alias?: string;
                                    is_deleted?: boolean;
                                    is_third_party?: boolean;
                                    role?:
                                        | "unknown"
                                        | "free_busy_reader"
                                        | "reader"
                                        | "writer"
                                        | "owner";
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=delete&version=v4 click to debug }
             */
            delete: async (
                payload?: {
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=get&version=v4 click to debug }
             */
            get: async (
                payload?: {
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                calendar_id: string;
                                summary?: string;
                                description?: string;
                                permissions?:
                                    | "private"
                                    | "show_only_free_busy"
                                    | "public";
                                color?: number;
                                type?:
                                    | "unknown"
                                    | "primary"
                                    | "shared"
                                    | "google"
                                    | "resource"
                                    | "exchange";
                                summary_alias?: string;
                                is_deleted?: boolean;
                                is_third_party?: boolean;
                                role?:
                                    | "unknown"
                                    | "free_busy_reader"
                                    | "reader"
                                    | "writer"
                                    | "owner";
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=patch&version=v4 click to debug }
             */
            patch: async (
                payload?: {
                    data?: {
                        summary?: string;
                        description?: string;
                        permissions?:
                            | "private"
                            | "show_only_free_busy"
                            | "public";
                        color?: number;
                        summary_alias?: string;
                    };
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                calendar?: {
                                    calendar_id: string;
                                    summary?: string;
                                    description?: string;
                                    permissions?:
                                        | "private"
                                        | "show_only_free_busy"
                                        | "public";
                                    color?: number;
                                    type?:
                                        | "unknown"
                                        | "primary"
                                        | "shared"
                                        | "google"
                                        | "resource"
                                        | "exchange";
                                    summary_alias?: string;
                                    is_deleted?: boolean;
                                    is_third_party?: boolean;
                                    role?:
                                        | "unknown"
                                        | "free_busy_reader"
                                        | "reader"
                                        | "writer"
                                        | "owner";
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=search&version=v4 click to debug }
             */
            searchWithIterator: async (
                payload?: {
                    data: { query: string };
                    params?: { page_token?: string; page_size?: number };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/calendar/v4/calendars/search`,
                                path
                            ),
                            method: "POST",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    calendar_id: string;
                                                    summary?: string;
                                                    description?: string;
                                                    permissions?:
                                                        | "private"
                                                        | "show_only_free_busy"
                                                        | "public";
                                                    color?: number;
                                                    type?:
                                                        | "unknown"
                                                        | "primary"
                                                        | "shared"
                                                        | "google"
                                                        | "resource"
                                                        | "exchange";
                                                    summary_alias?: string;
                                                    is_deleted?: boolean;
                                                    is_third_party?: boolean;
                                                    role?:
                                                        | "unknown"
                                                        | "free_busy_reader"
                                                        | "reader"
                                                        | "writer"
                                                        | "owner";
                                                }>;
                                                page_token?: string;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=search&version=v4 click to debug }
             */
            search: async (
                payload?: {
                    data: { query: string };
                    params?: { page_token?: string; page_size?: number };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    calendar_id: string;
                                    summary?: string;
                                    description?: string;
                                    permissions?:
                                        | "private"
                                        | "show_only_free_busy"
                                        | "public";
                                    color?: number;
                                    type?:
                                        | "unknown"
                                        | "primary"
                                        | "shared"
                                        | "google"
                                        | "resource"
                                        | "exchange";
                                    summary_alias?: string;
                                    is_deleted?: boolean;
                                    is_third_party?: boolean;
                                    role?:
                                        | "unknown"
                                        | "free_busy_reader"
                                        | "reader"
                                        | "writer"
                                        | "owner";
                                }>;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/search`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=subscribe&version=v4 click to debug }
             */
            subscribe: async (
                payload?: {
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                calendar?: {
                                    calendar_id: string;
                                    summary?: string;
                                    description?: string;
                                    permissions?:
                                        | "private"
                                        | "show_only_free_busy"
                                        | "public";
                                    color?: number;
                                    type?:
                                        | "unknown"
                                        | "primary"
                                        | "shared"
                                        | "google"
                                        | "resource"
                                        | "exchange";
                                    summary_alias?: string;
                                    is_deleted?: boolean;
                                    is_third_party?: boolean;
                                    role?:
                                        | "unknown"
                                        | "free_busy_reader"
                                        | "reader"
                                        | "writer"
                                        | "owner";
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/subscribe`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=subscription&version=v4 click to debug }
             */
            subscription: async (payload?: {}, options?: IRequestOptions) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/subscription`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=unsubscribe&version=v4 click to debug }
             */
            unsubscribe: async (
                payload?: {
                    path: { calendar_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/unsubscribe`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=list&version=v4 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        sync_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                sync_token?: string;
                                calendar_list?: Array<{
                                    calendar_id: string;
                                    summary?: string;
                                    description?: string;
                                    permissions?:
                                        | "private"
                                        | "show_only_free_busy"
                                        | "public";
                                    color?: number;
                                    type?:
                                        | "unknown"
                                        | "primary"
                                        | "shared"
                                        | "google"
                                        | "resource"
                                        | "exchange";
                                    summary_alias?: string;
                                    is_deleted?: boolean;
                                    is_third_party?: boolean;
                                    role?:
                                        | "unknown"
                                        | "free_busy_reader"
                                        | "reader"
                                        | "writer"
                                        | "owner";
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=primary&version=v4 click to debug }
             */
            primary: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                calendars?: Array<{
                                    calendar?: {
                                        calendar_id: string;
                                        summary?: string;
                                        description?: string;
                                        permissions?:
                                            | "private"
                                            | "show_only_free_busy"
                                            | "public";
                                        color?: number;
                                        type?:
                                            | "unknown"
                                            | "primary"
                                            | "shared"
                                            | "google"
                                            | "resource"
                                            | "exchange";
                                        summary_alias?: string;
                                        is_deleted?: boolean;
                                        is_third_party?: boolean;
                                        role?:
                                            | "unknown"
                                            | "free_busy_reader"
                                            | "reader"
                                            | "writer"
                                            | "owner";
                                    };
                                    user_id?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/primary`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar&apiName=unsubscription&version=v4 click to debug }
             */
            unsubscription: async (payload?: {}, options?: IRequestOptions) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/unsubscription`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        timeoffEvent: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=timeoff_event&apiName=delete&version=v4 click to debug }
             */
            delete: async (
                payload?: {
                    path: { timeoff_event_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/timeoff_events/:timeoff_event_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=timeoff_event&apiName=create&version=v4 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        user_id: string;
                        timezone: string;
                        start_time: string;
                        end_time: string;
                        title?: string;
                        description?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                timeoff_event_id: string;
                                user_id: string;
                                timezone: string;
                                start_time: string;
                                end_time: string;
                                title?: string;
                                description?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/timeoff_events`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        setting: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=setting&apiName=generate_caldav_conf&version=v4 click to debug }
             */
            generateCaldavConf: async (
                payload?: {
                    data?: { device_name?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                password?: string;
                                user_name?: string;
                                server_address?: string;
                                device_name?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/settings/generate_caldav_conf`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        freebusy: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=freebusy&apiName=list&version=v4 click to debug }
             */
            list: async (
                payload?: {
                    data: {
                        time_min: string;
                        time_max: string;
                        user_id?: string;
                        room_id?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                freebusy_list?: Array<{
                                    start_time: string;
                                    end_time: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/freebusy/list`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        calendarEventAttendeeChatMember: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event.attendee.chat_member&apiName=list&version=v4 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: {
                        page_token?: string;
                        page_size?: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: {
                        calendar_id: string;
                        event_id: string;
                        attendee_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id/attendees/:attendee_id/chat_members`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    rsvp_status?:
                                                        | "needs_action"
                                                        | "accept"
                                                        | "tentative"
                                                        | "decline"
                                                        | "removed";
                                                    is_optional?: boolean;
                                                    display_name?: string;
                                                    open_id?: string;
                                                    is_organizer?: boolean;
                                                    is_external?: boolean;
                                                }>;
                                                has_more?: boolean;
                                                page_token?: string;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=calendar.event.attendee.chat_member&apiName=list&version=v4 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        page_token?: string;
                        page_size?: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: {
                        calendar_id: string;
                        event_id: string;
                        attendee_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    rsvp_status?:
                                        | "needs_action"
                                        | "accept"
                                        | "tentative"
                                        | "decline"
                                        | "removed";
                                    is_optional?: boolean;
                                    display_name?: string;
                                    open_id?: string;
                                    is_organizer?: boolean;
                                    is_external?: boolean;
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id/attendees/:attendee_id/chat_members`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        exchangeBinding: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=exchange_binding&apiName=delete&version=v4 click to debug }
             */
            delete: async (
                payload?: {
                    path: { exchange_binding_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/exchange_bindings/:exchange_binding_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=exchange_binding&apiName=create&version=v4 click to debug }
             */
            create: async (
                payload?: {
                    data?: {
                        admin_account?: string;
                        exchange_account?: string;
                        user_id?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                admin_account?: string;
                                exchange_account?: string;
                                user_id?: string;
                                status?:
                                    | "doing"
                                    | "cal_done"
                                    | "timespan_done"
                                    | "done"
                                    | "err";
                                exchange_binding_id: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/exchange_bindings`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=calendar&resource=exchange_binding&apiName=get&version=v4 click to debug }
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { exchange_binding_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                admin_account?: string;
                                exchange_account?: string;
                                user_id?: string;
                                status?:
                                    | "doing"
                                    | "cal_done"
                                    | "timespan_done"
                                    | "done"
                                    | "err";
                                exchange_binding_id?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/calendar/v4/exchange_bindings/:exchange_binding_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };

    comment_sdk = {};

    contact = {
        customAttr: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=custom_attr&apiName=list&version=v3 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/contact/v3/custom_attrs`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    id: string;
                                                    type: string;
                                                    options?: {
                                                        default_option_id?: string;
                                                        option_type:
                                                            | "TEXT"
                                                            | "PICTURE";
                                                        options: Array<{
                                                            id: string;
                                                            value: string;
                                                            name?: string;
                                                        }>;
                                                    };
                                                    i18n_name?: Array<{
                                                        locale?: string;
                                                        value?: string;
                                                    }>;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=custom_attr&apiName=list&version=v3 click to debug }
             */
            list: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id: string;
                                    type: string;
                                    options?: {
                                        default_option_id?: string;
                                        option_type: "TEXT" | "PICTURE";
                                        options: Array<{
                                            id: string;
                                            value: string;
                                            name?: string;
                                        }>;
                                    };
                                    i18n_name?: Array<{
                                        locale?: string;
                                        value?: string;
                                    }>;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/custom_attrs`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        department: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=unbind_department_chat&version=v3 click to debug }
             */
            unbindDepartmentChat: async (
                payload?: {
                    data: { department_id: string };
                    params?: {
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/departments/unbind_department_chat`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=delete&version=v3 click to debug }
             */
            delete: async (
                payload?: {
                    params?: {
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path?: { department_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/departments/:department_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=list&version=v3 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        parent_department_id?: string;
                        fetch_child?: boolean;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/contact/v3/departments`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                items?: Array<{
                                                    name: string;
                                                    i18n_name?: {
                                                        zh_cn?: string;
                                                        ja_jp?: string;
                                                        en_us?: string;
                                                    };
                                                    parent_department_id: string;
                                                    department_id?: string;
                                                    open_department_id?: string;
                                                    leader_user_id?: string;
                                                    chat_id?: string;
                                                    order?: string;
                                                    unit_ids?: Array<string>;
                                                    member_count?: number;
                                                    status?: {
                                                        is_deleted?: boolean;
                                                    };
                                                    leaders?: Array<{
                                                        leaderType: number;
                                                        leaderID: string;
                                                    }>;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=list&version=v3 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        parent_department_id?: string;
                        fetch_child?: boolean;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    name: string;
                                    i18n_name?: {
                                        zh_cn?: string;
                                        ja_jp?: string;
                                        en_us?: string;
                                    };
                                    parent_department_id: string;
                                    department_id?: string;
                                    open_department_id?: string;
                                    leader_user_id?: string;
                                    chat_id?: string;
                                    order?: string;
                                    unit_ids?: Array<string>;
                                    member_count?: number;
                                    status?: { is_deleted?: boolean };
                                    leaders?: Array<{
                                        leaderType: number;
                                        leaderID: string;
                                    }>;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/departments`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=children&version=v3 click to debug }
             */
            childrenWithIterator: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        fetch_child?: boolean;
                        page_size?: number;
                        page_token?: string;
                    };
                    path: { department_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/contact/v3/departments/:department_id/children`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                items?: Array<{
                                                    name: string;
                                                    i18n_name?: {
                                                        zh_cn?: string;
                                                        ja_jp?: string;
                                                        en_us?: string;
                                                    };
                                                    parent_department_id: string;
                                                    department_id?: string;
                                                    open_department_id?: string;
                                                    leader_user_id?: string;
                                                    chat_id?: string;
                                                    order?: string;
                                                    unit_ids?: Array<string>;
                                                    member_count?: number;
                                                    status?: {
                                                        is_deleted?: boolean;
                                                    };
                                                    create_group_chat?: boolean;
                                                    leaders?: Array<{
                                                        leaderType: number;
                                                        leaderID: string;
                                                    }>;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=children&version=v3 click to debug }
             */
            children: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        fetch_child?: boolean;
                        page_size?: number;
                        page_token?: string;
                    };
                    path: { department_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    name: string;
                                    i18n_name?: {
                                        zh_cn?: string;
                                        ja_jp?: string;
                                        en_us?: string;
                                    };
                                    parent_department_id: string;
                                    department_id?: string;
                                    open_department_id?: string;
                                    leader_user_id?: string;
                                    chat_id?: string;
                                    order?: string;
                                    unit_ids?: Array<string>;
                                    member_count?: number;
                                    status?: { is_deleted?: boolean };
                                    create_group_chat?: boolean;
                                    leaders?: Array<{
                                        leaderType: number;
                                        leaderID: string;
                                    }>;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/departments/:department_id/children`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=search&version=v3 click to debug }
             */
            searchWithIterator: async (
                payload?: {
                    data: { query: string };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/contact/v3/departments/search`,
                                path
                            ),
                            method: "POST",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    name: string;
                                                    i18n_name?: {
                                                        zh_cn?: string;
                                                        ja_jp?: string;
                                                        en_us?: string;
                                                    };
                                                    parent_department_id: string;
                                                    department_id?: string;
                                                    open_department_id?: string;
                                                    leader_user_id?: string;
                                                    chat_id?: string;
                                                    order?: string;
                                                    unit_ids?: Array<string>;
                                                    member_count?: number;
                                                    status?: {
                                                        is_deleted?: boolean;
                                                    };
                                                    create_group_chat?: boolean;
                                                    leaders?: Array<{
                                                        leaderType: number;
                                                        leaderID: string;
                                                    }>;
                                                }>;
                                                page_token?: string;
                                                has_more: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=search&version=v3 click to debug }
             */
            search: async (
                payload?: {
                    data: { query: string };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    name: string;
                                    i18n_name?: {
                                        zh_cn?: string;
                                        ja_jp?: string;
                                        en_us?: string;
                                    };
                                    parent_department_id: string;
                                    department_id?: string;
                                    open_department_id?: string;
                                    leader_user_id?: string;
                                    chat_id?: string;
                                    order?: string;
                                    unit_ids?: Array<string>;
                                    member_count?: number;
                                    status?: { is_deleted?: boolean };
                                    create_group_chat?: boolean;
                                    leaders?: Array<{
                                        leaderType: number;
                                        leaderID: string;
                                    }>;
                                }>;
                                page_token?: string;
                                has_more: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/departments/search`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=parent&version=v3 click to debug }
             */
            parentWithIterator: async (
                payload?: {
                    params: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        department_id: string;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/contact/v3/departments/parent`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                items?: Array<{
                                                    name: string;
                                                    i18n_name?: {
                                                        zh_cn?: string;
                                                        ja_jp?: string;
                                                        en_us?: string;
                                                    };
                                                    parent_department_id: string;
                                                    department_id?: string;
                                                    open_department_id?: string;
                                                    leader_user_id?: string;
                                                    chat_id?: string;
                                                    order?: string;
                                                    unit_ids?: Array<string>;
                                                    member_count?: number;
                                                    status?: {
                                                        is_deleted?: boolean;
                                                    };
                                                    leaders?: Array<{
                                                        leaderType: number;
                                                        leaderID: string;
                                                    }>;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=parent&version=v3 click to debug }
             */
            parent: async (
                payload?: {
                    params: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        department_id: string;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    name: string;
                                    i18n_name?: {
                                        zh_cn?: string;
                                        ja_jp?: string;
                                        en_us?: string;
                                    };
                                    parent_department_id: string;
                                    department_id?: string;
                                    open_department_id?: string;
                                    leader_user_id?: string;
                                    chat_id?: string;
                                    order?: string;
                                    unit_ids?: Array<string>;
                                    member_count?: number;
                                    status?: { is_deleted?: boolean };
                                    leaders?: Array<{
                                        leaderType: number;
                                        leaderID: string;
                                    }>;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/departments/parent`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=get&version=v3 click to debug }
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path?: { department_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                department?: {
                                    name: string;
                                    i18n_name?: {
                                        zh_cn?: string;
                                        ja_jp?: string;
                                        en_us?: string;
                                    };
                                    parent_department_id: string;
                                    department_id?: string;
                                    open_department_id?: string;
                                    leader_user_id?: string;
                                    chat_id?: string;
                                    order?: string;
                                    unit_ids?: Array<string>;
                                    member_count?: number;
                                    status?: { is_deleted?: boolean };
                                    leaders?: Array<{
                                        leaderType: number;
                                        leaderID: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/departments/:department_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=patch&version=v3 click to debug }
             */
            patch: async (
                payload?: {
                    data?: {
                        name?: string;
                        i18n_name?: {
                            zh_cn?: string;
                            ja_jp?: string;
                            en_us?: string;
                        };
                        parent_department_id?: string;
                        leader_user_id?: string;
                        order?: string;
                        unit_ids?: Array<string>;
                        create_group_chat?: boolean;
                        leaders?: Array<{
                            leaderType: number;
                            leaderID: string;
                        }>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path?: { department_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                department?: {
                                    name: string;
                                    i18n_name?: {
                                        zh_cn?: string;
                                        ja_jp?: string;
                                        en_us?: string;
                                    };
                                    parent_department_id: string;
                                    department_id?: string;
                                    open_department_id?: string;
                                    leader_user_id?: string;
                                    chat_id?: string;
                                    order?: string;
                                    unit_ids?: Array<string>;
                                    member_count?: number;
                                    status?: { is_deleted?: boolean };
                                    leaders?: Array<{
                                        leaderType: number;
                                        leaderID: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/departments/:department_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=update&version=v3 click to debug }
             */
            update: async (
                payload?: {
                    data: {
                        name: string;
                        i18n_name?: {
                            zh_cn?: string;
                            ja_jp?: string;
                            en_us?: string;
                        };
                        parent_department_id: string;
                        leader_user_id?: string;
                        order?: string;
                        unit_ids?: Array<string>;
                        create_group_chat?: boolean;
                        leaders?: Array<{
                            leaderType: number;
                            leaderID: string;
                        }>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path?: { department_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                department?: {
                                    name: string;
                                    i18n_name?: {
                                        zh_cn?: string;
                                        ja_jp?: string;
                                        en_us?: string;
                                    };
                                    parent_department_id: string;
                                    department_id?: string;
                                    open_department_id?: string;
                                    leader_user_id?: string;
                                    chat_id?: string;
                                    order?: string;
                                    unit_ids?: Array<string>;
                                    member_count?: number;
                                    status?: { is_deleted?: boolean };
                                    leaders?: Array<{
                                        leaderType: number;
                                        leaderID: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/departments/:department_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=department&apiName=create&version=v3 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        name: string;
                        i18n_name?: {
                            zh_cn?: string;
                            ja_jp?: string;
                            en_us?: string;
                        };
                        parent_department_id: string;
                        department_id?: string;
                        leader_user_id?: string;
                        order?: string;
                        unit_ids?: Array<string>;
                        create_group_chat?: boolean;
                        leaders?: Array<{
                            leaderType: number;
                            leaderID: string;
                        }>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        client_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                department?: {
                                    name: string;
                                    i18n_name?: {
                                        zh_cn?: string;
                                        ja_jp?: string;
                                        en_us?: string;
                                    };
                                    parent_department_id: string;
                                    department_id?: string;
                                    open_department_id?: string;
                                    leader_user_id?: string;
                                    chat_id?: string;
                                    order?: string;
                                    unit_ids?: Array<string>;
                                    member_count?: number;
                                    status?: { is_deleted?: boolean };
                                    leaders?: Array<{
                                        leaderType: number;
                                        leaderID: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/departments`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        employeeTypeEnum: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=employee_type_enum&apiName=delete&version=v3 click to debug }
             */
            delete: async (
                payload?: {
                    path?: { enum_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/employee_type_enums/:enum_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=employee_type_enum&apiName=update&version=v3 click to debug }
             */
            update: async (
                payload?: {
                    data: {
                        content: string;
                        enum_type: number;
                        enum_status: number;
                        i18n_content?: Array<{
                            locale?: string;
                            value?: string;
                        }>;
                    };
                    path?: { enum_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                employee_type_enum?: {
                                    enum_id?: string;
                                    enum_value?: string;
                                    content: string;
                                    enum_type: number;
                                    enum_status: number;
                                    i18n_content?: Array<{
                                        locale?: string;
                                        value?: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/employee_type_enums/:enum_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=employee_type_enum&apiName=list&version=v3 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: { page_token?: string; page_size?: number };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/contact/v3/employee_type_enums`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    enum_id?: string;
                                                    enum_value?: string;
                                                    content: string;
                                                    enum_type: number;
                                                    enum_status: number;
                                                    i18n_content?: Array<{
                                                        locale?: string;
                                                        value?: string;
                                                    }>;
                                                }>;
                                                has_more?: boolean;
                                                page_token?: string;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=employee_type_enum&apiName=list&version=v3 click to debug }
             */
            list: async (
                payload?: {
                    params?: { page_token?: string; page_size?: number };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    enum_id?: string;
                                    enum_value?: string;
                                    content: string;
                                    enum_type: number;
                                    enum_status: number;
                                    i18n_content?: Array<{
                                        locale?: string;
                                        value?: string;
                                    }>;
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/employee_type_enums`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=employee_type_enum&apiName=create&version=v3 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        content: string;
                        enum_type: number;
                        enum_status: number;
                        i18n_content?: Array<{
                            locale?: string;
                            value?: string;
                        }>;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                employee_type_enum?: {
                                    enum_id?: string;
                                    enum_value?: string;
                                    content: string;
                                    enum_type: number;
                                    enum_status: number;
                                    i18n_content?: Array<{
                                        locale?: string;
                                        value?: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/employee_type_enums`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        group: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group&apiName=create&version=v3 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        group_id?: string;
                        name: string;
                        description?: string;
                        type?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { group_id: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/group`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group&apiName=delete&version=v3 click to debug }
             */
            delete: async (
                payload?: {
                    path: { group_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/group/:group_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group&apiName=patch&version=v3 click to debug }
             */
            patch: async (
                payload?: {
                    data?: { name?: string; description?: string };
                    path: { group_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/group/:group_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group&apiName=get&version=v3 click to debug }
             */
            get: async (
                payload?: {
                    path: { group_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                group: {
                                    id: string;
                                    name: string;
                                    description?: string;
                                    member_user_count?: number;
                                    member_department_count?: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/group/:group_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group&apiName=simplelist&version=v3 click to debug }
             */
            simplelistWithIterator: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        type?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/contact/v3/group/simplelist`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                grouplist: Array<{
                                                    id: string;
                                                    name: string;
                                                    description?: string;
                                                    member_user_count?: number;
                                                    member_department_count?: number;
                                                }>;
                                                page_token: string;
                                                has_more: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group&apiName=simplelist&version=v3 click to debug }
             */
            simplelist: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        type?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                grouplist: Array<{
                                    id: string;
                                    name: string;
                                    description?: string;
                                    member_user_count?: number;
                                    member_department_count?: number;
                                }>;
                                page_token: string;
                                has_more: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/group/simplelist`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group&apiName=member_belong&version=v3 click to debug }
             */
            memberBelong: async (
                payload?: {
                    params: {
                        member_id: string;
                        member_id_type?: "open_id" | "union_id" | "user_id";
                        group_type?: number;
                        page_size?: number;
                        page_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                group_list?: Array<string>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/group/member_belong`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        unit: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=unit&apiName=create&version=v3 click to debug }
             */
            create: async (
                payload?: {
                    data: { unit_id?: string; name: string; unit_type: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { unit_id: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/unit`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=unit&apiName=list&version=v3 click to debug }
             */
            list: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                unitlist: Array<{
                                    unit_id: string;
                                    name: string;
                                    unit_type: string;
                                }>;
                                has_more: boolean;
                                page_token: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/unit`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=unit&apiName=delete&version=v3 click to debug }
             */
            delete: async (
                payload?: {
                    data?: {};
                    path: { unit_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/unit/:unit_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=unit&apiName=unbind_department&version=v3 click to debug }
             */
            unbindDepartment: async (
                payload?: {
                    data: {
                        unit_id: string;
                        department_id: string;
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/unit/unbind_department`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=unit&apiName=list_department&version=v3 click to debug }
             */
            listDepartment: async (
                payload?: {
                    params: {
                        unit_id: string;
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                departmentlist: Array<{
                                    unit_id: string;
                                    department_id: string;
                                }>;
                                has_more: boolean;
                                page_token: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/unit/list_department`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=unit&apiName=patch&version=v3 click to debug }
             */
            patch: async (
                payload?: {
                    data?: { name?: string };
                    path: { unit_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/unit/:unit_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=unit&apiName=get&version=v3 click to debug }
             */
            get: async (
                payload?: {
                    path: { unit_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                unit: {
                                    unit_id: string;
                                    name: string;
                                    unit_type: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/unit/:unit_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=unit&apiName=bind_department&version=v3 click to debug }
             */
            bindDepartment: async (
                payload?: {
                    data: {
                        unit_id: string;
                        department_id: string;
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/unit/bind_department`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        scope: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=scope&apiName=list&version=v3 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: {
                        user_id_type?: "open_id" | "union_id" | "user_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/contact/v3/scopes`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                department_ids?: Array<string>;
                                                user_ids?: Array<string>;
                                                group_ids?: Array<string>;
                                                has_more?: boolean;
                                                page_token?: string;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=scope&apiName=list&version=v3 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        user_id_type?: "open_id" | "union_id" | "user_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                department_ids?: Array<string>;
                                user_ids?: Array<string>;
                                group_ids?: Array<string>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/scopes`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        user: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=user&apiName=batch_get_id&version=v3 click to debug }
             */
            batchGetId: async (
                payload?: {
                    data?: { emails?: Array<string>; mobiles?: Array<string> };
                    params?: {
                        user_id_type?: "open_id" | "union_id" | "user_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_list?: Array<{
                                    user_id?: string;
                                    mobile?: string;
                                    email?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/users/batch_get_id`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=user&apiName=delete&version=v3 click to debug }
             */
            delete: async (
                payload?: {
                    data?: {
                        department_chat_acceptor_user_id?: string;
                        external_chat_acceptor_user_id?: string;
                        docs_acceptor_user_id?: string;
                        calendar_acceptor_user_id?: string;
                        application_acceptor_user_id?: string;
                        helpdesk_acceptor_user_id?: string;
                        minutes_acceptor_user_id?: string;
                        survey_acceptor_user_id?: string;
                        email_acceptor?: {
                            processing_type: "1" | "2" | "3";
                            acceptor_user_id?: string;
                        };
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { user_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/users/:user_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=user&apiName=list&version=v3 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        department_id?: string;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/contact/v3/users`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                items?: Array<{
                                                    union_id?: string;
                                                    user_id?: string;
                                                    open_id?: string;
                                                    name: string;
                                                    en_name?: string;
                                                    nickname?: string;
                                                    email?: string;
                                                    mobile: string;
                                                    mobile_visible?: boolean;
                                                    gender?: number;
                                                    avatar?: {
                                                        avatar_72?: string;
                                                        avatar_240?: string;
                                                        avatar_640?: string;
                                                        avatar_origin?: string;
                                                    };
                                                    status?: {
                                                        is_frozen?: boolean;
                                                        is_resigned?: boolean;
                                                        is_activated?: boolean;
                                                        is_exited?: boolean;
                                                        is_unjoin?: boolean;
                                                    };
                                                    department_ids?: Array<string>;
                                                    leader_user_id?: string;
                                                    city?: string;
                                                    country?: string;
                                                    work_station?: string;
                                                    join_time?: number;
                                                    is_tenant_manager?: boolean;
                                                    employee_no?: string;
                                                    employee_type?: number;
                                                    positions?: Array<{
                                                        position_code?: string;
                                                        position_name?: string;
                                                        department_id?: string;
                                                        leader_user_id?: string;
                                                        leader_position_code?: string;
                                                        is_major?: boolean;
                                                    }>;
                                                    orders?: Array<{
                                                        department_id?: string;
                                                        user_order?: number;
                                                        department_order?: number;
                                                    }>;
                                                    custom_attrs?: Array<{
                                                        type?: string;
                                                        id?: string;
                                                        value?: {
                                                            text?: string;
                                                            url?: string;
                                                            pc_url?: string;
                                                            option_value?: string;
                                                            name?: string;
                                                            picture_url?: string;
                                                            generic_user?: {
                                                                id: string;
                                                                type: number;
                                                            };
                                                        };
                                                    }>;
                                                    enterprise_email?: string;
                                                    time_zone?: string;
                                                    description?: string;
                                                    job_title?: string;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=user&apiName=list&version=v3 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        department_id?: string;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    union_id?: string;
                                    user_id?: string;
                                    open_id?: string;
                                    name: string;
                                    en_name?: string;
                                    nickname?: string;
                                    email?: string;
                                    mobile: string;
                                    mobile_visible?: boolean;
                                    gender?: number;
                                    avatar?: {
                                        avatar_72?: string;
                                        avatar_240?: string;
                                        avatar_640?: string;
                                        avatar_origin?: string;
                                    };
                                    status?: {
                                        is_frozen?: boolean;
                                        is_resigned?: boolean;
                                        is_activated?: boolean;
                                        is_exited?: boolean;
                                        is_unjoin?: boolean;
                                    };
                                    department_ids?: Array<string>;
                                    leader_user_id?: string;
                                    city?: string;
                                    country?: string;
                                    work_station?: string;
                                    join_time?: number;
                                    is_tenant_manager?: boolean;
                                    employee_no?: string;
                                    employee_type?: number;
                                    positions?: Array<{
                                        position_code?: string;
                                        position_name?: string;
                                        department_id?: string;
                                        leader_user_id?: string;
                                        leader_position_code?: string;
                                        is_major?: boolean;
                                    }>;
                                    orders?: Array<{
                                        department_id?: string;
                                        user_order?: number;
                                        department_order?: number;
                                    }>;
                                    custom_attrs?: Array<{
                                        type?: string;
                                        id?: string;
                                        value?: {
                                            text?: string;
                                            url?: string;
                                            pc_url?: string;
                                            option_value?: string;
                                            name?: string;
                                            picture_url?: string;
                                            generic_user?: {
                                                id: string;
                                                type: number;
                                            };
                                        };
                                    }>;
                                    enterprise_email?: string;
                                    time_zone?: string;
                                    description?: string;
                                    job_title?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/users`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=user&apiName=get&version=v3 click to debug }
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path: { user_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user?: {
                                    union_id?: string;
                                    user_id?: string;
                                    open_id?: string;
                                    name?: string;
                                    en_name?: string;
                                    nickname?: string;
                                    email?: string;
                                    mobile?: string;
                                    mobile_visible?: boolean;
                                    gender?: number;
                                    avatar?: {
                                        avatar_72?: string;
                                        avatar_240?: string;
                                        avatar_640?: string;
                                        avatar_origin?: string;
                                    };
                                    status?: {
                                        is_frozen?: boolean;
                                        is_resigned?: boolean;
                                        is_activated?: boolean;
                                        is_exited?: boolean;
                                        is_unjoin?: boolean;
                                    };
                                    department_ids?: Array<string>;
                                    leader_user_id?: string;
                                    city?: string;
                                    country?: string;
                                    work_station?: string;
                                    join_time?: number;
                                    is_tenant_manager?: boolean;
                                    employee_no?: string;
                                    employee_type?: number;
                                    positions?: Array<{
                                        position_code?: string;
                                        position_name?: string;
                                        department_id?: string;
                                        leader_user_id?: string;
                                        leader_position_code?: string;
                                        is_major?: boolean;
                                    }>;
                                    orders?: Array<{
                                        department_id?: string;
                                        user_order?: number;
                                        department_order?: number;
                                    }>;
                                    custom_attrs?: Array<{
                                        type?: string;
                                        id?: string;
                                        value?: {
                                            text?: string;
                                            url?: string;
                                            pc_url?: string;
                                            option_value?: string;
                                            name?: string;
                                            picture_url?: string;
                                            generic_user?: {
                                                id: string;
                                                type: number;
                                            };
                                        };
                                    }>;
                                    enterprise_email?: string;
                                    time_zone?: string;
                                    description?: string;
                                    job_title?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/users/:user_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=user&apiName=find_by_department&version=v3 click to debug }
             */
            findByDepartmentWithIterator: async (
                payload?: {
                    params: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        department_id: string;
                        page_size?: number;
                        page_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/contact/v3/users/find_by_department`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                items?: Array<{
                                                    union_id?: string;
                                                    user_id?: string;
                                                    open_id?: string;
                                                    name: string;
                                                    en_name?: string;
                                                    nickname?: string;
                                                    email?: string;
                                                    mobile: string;
                                                    mobile_visible?: boolean;
                                                    gender?: number;
                                                    avatar_key?: string;
                                                    avatar?: {
                                                        avatar_72?: string;
                                                        avatar_240?: string;
                                                        avatar_640?: string;
                                                        avatar_origin?: string;
                                                    };
                                                    status?: {
                                                        is_frozen?: boolean;
                                                        is_resigned?: boolean;
                                                        is_activated?: boolean;
                                                        is_exited?: boolean;
                                                        is_unjoin?: boolean;
                                                    };
                                                    department_ids?: Array<string>;
                                                    leader_user_id?: string;
                                                    city?: string;
                                                    country?: string;
                                                    work_station?: string;
                                                    join_time?: number;
                                                    is_tenant_manager?: boolean;
                                                    employee_no?: string;
                                                    employee_type?: number;
                                                    positions?: Array<{
                                                        position_code?: string;
                                                        position_name?: string;
                                                        department_id?: string;
                                                        leader_user_id?: string;
                                                        leader_position_code?: string;
                                                        is_major?: boolean;
                                                    }>;
                                                    orders?: Array<{
                                                        department_id?: string;
                                                        user_order?: number;
                                                        department_order?: number;
                                                    }>;
                                                    custom_attrs?: Array<{
                                                        type?: string;
                                                        id?: string;
                                                        value?: {
                                                            text?: string;
                                                            url?: string;
                                                            pc_url?: string;
                                                            option_id?: string;
                                                            option_value?: string;
                                                            name?: string;
                                                            picture_url?: string;
                                                            generic_user?: {
                                                                id: string;
                                                                type: number;
                                                            };
                                                        };
                                                    }>;
                                                    enterprise_email?: string;
                                                    idp_type?: string;
                                                    time_zone?: string;
                                                    description?: string;
                                                    job_title?: string;
                                                    need_send_notification?: boolean;
                                                    notification_option?: {
                                                        channels?: Array<string>;
                                                        language?:
                                                            | "zh-CN"
                                                            | "en-US"
                                                            | "ja-JP";
                                                    };
                                                    is_frozen?: boolean;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=user&apiName=find_by_department&version=v3 click to debug }
             */
            findByDepartment: async (
                payload?: {
                    params: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        department_id: string;
                        page_size?: number;
                        page_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    union_id?: string;
                                    user_id?: string;
                                    open_id?: string;
                                    name: string;
                                    en_name?: string;
                                    nickname?: string;
                                    email?: string;
                                    mobile: string;
                                    mobile_visible?: boolean;
                                    gender?: number;
                                    avatar_key?: string;
                                    avatar?: {
                                        avatar_72?: string;
                                        avatar_240?: string;
                                        avatar_640?: string;
                                        avatar_origin?: string;
                                    };
                                    status?: {
                                        is_frozen?: boolean;
                                        is_resigned?: boolean;
                                        is_activated?: boolean;
                                        is_exited?: boolean;
                                        is_unjoin?: boolean;
                                    };
                                    department_ids?: Array<string>;
                                    leader_user_id?: string;
                                    city?: string;
                                    country?: string;
                                    work_station?: string;
                                    join_time?: number;
                                    is_tenant_manager?: boolean;
                                    employee_no?: string;
                                    employee_type?: number;
                                    positions?: Array<{
                                        position_code?: string;
                                        position_name?: string;
                                        department_id?: string;
                                        leader_user_id?: string;
                                        leader_position_code?: string;
                                        is_major?: boolean;
                                    }>;
                                    orders?: Array<{
                                        department_id?: string;
                                        user_order?: number;
                                        department_order?: number;
                                    }>;
                                    custom_attrs?: Array<{
                                        type?: string;
                                        id?: string;
                                        value?: {
                                            text?: string;
                                            url?: string;
                                            pc_url?: string;
                                            option_id?: string;
                                            option_value?: string;
                                            name?: string;
                                            picture_url?: string;
                                            generic_user?: {
                                                id: string;
                                                type: number;
                                            };
                                        };
                                    }>;
                                    enterprise_email?: string;
                                    idp_type?: string;
                                    time_zone?: string;
                                    description?: string;
                                    job_title?: string;
                                    need_send_notification?: boolean;
                                    notification_option?: {
                                        channels?: Array<string>;
                                        language?: "zh-CN" | "en-US" | "ja-JP";
                                    };
                                    is_frozen?: boolean;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/users/find_by_department`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=user&apiName=patch&version=v3 click to debug }
             */
            patch: async (
                payload?: {
                    data?: {
                        name?: string;
                        en_name?: string;
                        nickname?: string;
                        email?: string;
                        mobile?: string;
                        mobile_visible?: boolean;
                        gender?: number;
                        avatar_key?: string;
                        department_ids?: Array<string>;
                        leader_user_id?: string;
                        city?: string;
                        country?: string;
                        work_station?: string;
                        join_time?: number;
                        employee_no?: string;
                        employee_type?: number;
                        positions?: Array<{
                            position_code?: string;
                            position_name?: string;
                            department_id?: string;
                            leader_user_id?: string;
                            leader_position_code?: string;
                            is_major?: boolean;
                        }>;
                        orders?: Array<{
                            department_id?: string;
                            user_order?: number;
                            department_order?: number;
                        }>;
                        custom_attrs?: Array<{
                            type?: string;
                            id?: string;
                            value?: {
                                text?: string;
                                url?: string;
                                pc_url?: string;
                                option_id?: string;
                                generic_user?: { id: string; type: number };
                            };
                        }>;
                        enterprise_email?: string;
                        idp_type?: string;
                        description?: string;
                        job_title?: string;
                        is_frozen?: boolean;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path: { user_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user?: {
                                    union_id?: string;
                                    user_id?: string;
                                    open_id?: string;
                                    name: string;
                                    en_name?: string;
                                    nickname?: string;
                                    email?: string;
                                    mobile: string;
                                    mobile_visible?: boolean;
                                    gender?: number;
                                    avatar_key?: string;
                                    avatar?: {
                                        avatar_72?: string;
                                        avatar_240?: string;
                                        avatar_640?: string;
                                        avatar_origin?: string;
                                    };
                                    status?: {
                                        is_frozen?: boolean;
                                        is_resigned?: boolean;
                                        is_activated?: boolean;
                                        is_exited?: boolean;
                                        is_unjoin?: boolean;
                                    };
                                    department_ids?: Array<string>;
                                    leader_user_id?: string;
                                    city?: string;
                                    country?: string;
                                    work_station?: string;
                                    join_time?: number;
                                    is_tenant_manager?: boolean;
                                    employee_no?: string;
                                    employee_type?: number;
                                    positions?: Array<{
                                        position_code?: string;
                                        position_name?: string;
                                        department_id?: string;
                                        leader_user_id?: string;
                                        leader_position_code?: string;
                                        is_major?: boolean;
                                    }>;
                                    orders?: Array<{
                                        department_id?: string;
                                        user_order?: number;
                                        department_order?: number;
                                    }>;
                                    custom_attrs?: Array<{
                                        type?: string;
                                        id?: string;
                                        value?: {
                                            text?: string;
                                            url?: string;
                                            pc_url?: string;
                                            option_id?: string;
                                            option_value?: string;
                                            name?: string;
                                            picture_url?: string;
                                            generic_user?: {
                                                id: string;
                                                type: number;
                                            };
                                        };
                                    }>;
                                    enterprise_email?: string;
                                    idp_type?: string;
                                    time_zone?: string;
                                    description?: string;
                                    job_title?: string;
                                    need_send_notification?: boolean;
                                    notification_option?: {
                                        channels?: Array<string>;
                                        language?: "zh-CN" | "en-US" | "ja-JP";
                                    };
                                    is_frozen?: boolean;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/users/:user_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=user&apiName=update&version=v3 click to debug }
             */
            update: async (
                payload?: {
                    data: {
                        name: string;
                        en_name?: string;
                        nickname?: string;
                        email?: string;
                        mobile: string;
                        mobile_visible?: boolean;
                        gender?: number;
                        avatar_key?: string;
                        department_ids: Array<string>;
                        leader_user_id?: string;
                        city?: string;
                        country?: string;
                        work_station?: string;
                        join_time?: number;
                        employee_no?: string;
                        employee_type: number;
                        positions?: Array<{
                            position_code?: string;
                            position_name?: string;
                            department_id?: string;
                            leader_user_id?: string;
                            leader_position_code?: string;
                            is_major?: boolean;
                        }>;
                        orders?: Array<{
                            department_id?: string;
                            user_order?: number;
                            department_order?: number;
                        }>;
                        custom_attrs?: Array<{
                            type?: string;
                            id?: string;
                            value?: {
                                text?: string;
                                url?: string;
                                pc_url?: string;
                                option_id?: string;
                                generic_user?: { id: string; type: number };
                            };
                        }>;
                        enterprise_email?: string;
                        idp_type?: string;
                        description?: string;
                        job_title?: string;
                        is_frozen?: boolean;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path: { user_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user?: {
                                    union_id?: string;
                                    user_id?: string;
                                    open_id?: string;
                                    name: string;
                                    en_name?: string;
                                    nickname?: string;
                                    email?: string;
                                    mobile: string;
                                    mobile_visible?: boolean;
                                    gender?: number;
                                    avatar_key?: string;
                                    avatar?: {
                                        avatar_72?: string;
                                        avatar_240?: string;
                                        avatar_640?: string;
                                        avatar_origin?: string;
                                    };
                                    status?: {
                                        is_frozen?: boolean;
                                        is_resigned?: boolean;
                                        is_activated?: boolean;
                                        is_exited?: boolean;
                                        is_unjoin?: boolean;
                                    };
                                    department_ids?: Array<string>;
                                    leader_user_id?: string;
                                    city?: string;
                                    country?: string;
                                    work_station?: string;
                                    join_time?: number;
                                    is_tenant_manager?: boolean;
                                    employee_no?: string;
                                    employee_type?: number;
                                    positions?: Array<{
                                        position_code?: string;
                                        position_name?: string;
                                        department_id?: string;
                                        leader_user_id?: string;
                                        leader_position_code?: string;
                                        is_major?: boolean;
                                    }>;
                                    orders?: Array<{
                                        department_id?: string;
                                        user_order?: number;
                                        department_order?: number;
                                    }>;
                                    custom_attrs?: Array<{
                                        type?: string;
                                        id?: string;
                                        value?: {
                                            text?: string;
                                            url?: string;
                                            pc_url?: string;
                                            option_id?: string;
                                            option_value?: string;
                                            name?: string;
                                            picture_url?: string;
                                            generic_user?: {
                                                id: string;
                                                type: number;
                                            };
                                        };
                                    }>;
                                    enterprise_email?: string;
                                    idp_type?: string;
                                    time_zone?: string;
                                    description?: string;
                                    job_title?: string;
                                    need_send_notification?: boolean;
                                    notification_option?: {
                                        channels?: Array<string>;
                                        language?: "zh-CN" | "en-US" | "ja-JP";
                                    };
                                    is_frozen?: boolean;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/users/:user_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=user&apiName=create&version=v3 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        user_id?: string;
                        name: string;
                        en_name?: string;
                        nickname?: string;
                        email?: string;
                        mobile: string;
                        mobile_visible?: boolean;
                        gender?: number;
                        avatar_key?: string;
                        department_ids: Array<string>;
                        leader_user_id?: string;
                        city?: string;
                        country?: string;
                        work_station?: string;
                        join_time?: number;
                        employee_no?: string;
                        employee_type: number;
                        positions?: Array<{
                            position_code?: string;
                            position_name?: string;
                            department_id?: string;
                            leader_user_id?: string;
                            leader_position_code?: string;
                            is_major?: boolean;
                        }>;
                        orders?: Array<{
                            department_id?: string;
                            user_order?: number;
                            department_order?: number;
                        }>;
                        custom_attrs?: Array<{
                            type?: string;
                            id?: string;
                            value?: {
                                text?: string;
                                url?: string;
                                pc_url?: string;
                                option_id?: string;
                                generic_user?: { id: string; type: number };
                            };
                        }>;
                        enterprise_email?: string;
                        idp_type?: string;
                        description?: string;
                        job_title?: string;
                        need_send_notification?: boolean;
                        notification_option?: {
                            channels?: Array<string>;
                            language?: "zh-CN" | "en-US" | "ja-JP";
                        };
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        client_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user?: {
                                    union_id?: string;
                                    user_id?: string;
                                    open_id?: string;
                                    name: string;
                                    en_name?: string;
                                    nickname?: string;
                                    email?: string;
                                    mobile: string;
                                    mobile_visible?: boolean;
                                    gender?: number;
                                    avatar_key?: string;
                                    avatar?: {
                                        avatar_72?: string;
                                        avatar_240?: string;
                                        avatar_640?: string;
                                        avatar_origin?: string;
                                    };
                                    status?: {
                                        is_frozen?: boolean;
                                        is_resigned?: boolean;
                                        is_activated?: boolean;
                                        is_exited?: boolean;
                                        is_unjoin?: boolean;
                                    };
                                    department_ids?: Array<string>;
                                    leader_user_id?: string;
                                    city?: string;
                                    country?: string;
                                    work_station?: string;
                                    join_time?: number;
                                    is_tenant_manager?: boolean;
                                    employee_no?: string;
                                    employee_type?: number;
                                    positions?: Array<{
                                        position_code?: string;
                                        position_name?: string;
                                        department_id?: string;
                                        leader_user_id?: string;
                                        leader_position_code?: string;
                                        is_major?: boolean;
                                    }>;
                                    orders?: Array<{
                                        department_id?: string;
                                        user_order?: number;
                                        department_order?: number;
                                    }>;
                                    custom_attrs?: Array<{
                                        type?: string;
                                        id?: string;
                                        value?: {
                                            text?: string;
                                            url?: string;
                                            pc_url?: string;
                                            option_id?: string;
                                            option_value?: string;
                                            name?: string;
                                            picture_url?: string;
                                            generic_user?: {
                                                id: string;
                                                type: number;
                                            };
                                        };
                                    }>;
                                    enterprise_email?: string;
                                    idp_type?: string;
                                    time_zone?: string;
                                    description?: string;
                                    job_title?: string;
                                    need_send_notification?: boolean;
                                    notification_option?: {
                                        channels?: Array<string>;
                                        language?: "zh-CN" | "en-US" | "ja-JP";
                                    };
                                    is_frozen?: boolean;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/users`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        groupMember: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group.member&apiName=batch_remove&version=v3 click to debug }
             */
            batchRemove: async (
                payload?: {
                    data: {
                        members: Array<{
                            member_id: string;
                            member_type: string;
                            member_id_type?: string;
                        }>;
                    };
                    path: { group_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/group/:group_id/member/batch_remove`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group.member&apiName=simplelist&version=v3 click to debug }
             */
            simplelist: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        member_id_type?:
                            | "open_id"
                            | "union_id"
                            | "user_id"
                            | "department_id";
                        member_type?: "user" | "department";
                    };
                    path: { group_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                memberlist: Array<{
                                    member_id: string;
                                    member_type: string;
                                    member_id_type?: string;
                                }>;
                                page_token: string;
                                has_more: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/group/:group_id/member/simplelist`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group.member&apiName=batch_add&version=v3 click to debug }
             */
            batchAdd: async (
                payload?: {
                    data?: {
                        members?: Array<{
                            member_id: string;
                            member_type: string;
                            member_id_type?: string;
                        }>;
                    };
                    path: { group_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                results?: Array<{
                                    member_id: string;
                                    code: number;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/group/:group_id/member/batch_add`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group.member&apiName=add&version=v3 click to debug }
             */
            add: async (
                payload?: {
                    data: {
                        member_type: "user";
                        member_id_type: "open_id" | "union_id" | "user_id";
                        member_id: string;
                    };
                    path: { group_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/group/:group_id/member/add`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=contact&resource=group.member&apiName=remove&version=v3 click to debug }
             */
            remove: async (
                payload?: {
                    data: {
                        member_type: "user";
                        member_id: string;
                        member_id_type: "open_id" | "union_id" | "user_id";
                    };
                    path: { group_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/contact/v3/group/:group_id/member/remove`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };

    content_check = {};

    contract = {};

    corehr = {};

    docs_tool = {};

    docx = {
        document: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    path: { document_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                document?: {
                                    document_id?: string;
                                    revision_id?: number;
                                    title?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/docx/v1/documents/:document_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document&apiName=raw_content&version=v1 click to debug }
             */
            rawContent: async (
                payload?: {
                    params?: { lang?: number };
                    path: { document_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { content?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/docx/v1/documents/:document_id/raw_content`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data?: { folder_token?: string; title?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                document?: {
                                    document_id?: string;
                                    revision_id?: number;
                                    title?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/docx/v1/documents`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        documentBlockChildren: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document.block.children&apiName=batch_delete&version=v1 click to debug }
             */
            batchDelete: async (
                payload?: {
                    data: { start_index: number; end_index: number };
                    params?: {
                        document_revision_id?: number;
                        client_token?: string;
                    };
                    path: { document_id: string; block_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                document_revision_id?: number;
                                client_token: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/docx/v1/documents/:document_id/blocks/:block_id/children/batch_delete`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document.block.children&apiName=get&version=v1 click to debug }
             */
            getWithIterator: async (
                payload?: {
                    params?: {
                        document_revision_id?: number;
                        page_token?: string;
                        page_size?: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { document_id: string; block_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/docx/v1/documents/:document_id/blocks/:block_id/children`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    block_id?: string;
                                                    parent_id?: string;
                                                    children?: Array<string>;
                                                    block_type: number;
                                                    page?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    text?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    heading1?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    heading2?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    heading3?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    heading4?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    heading5?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    heading6?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    heading7?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    heading8?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    heading9?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    bullet?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    ordered?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    code?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    quote?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    equation?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    todo?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    bitable?: {
                                                        token?: string;
                                                    };
                                                    callout?: {
                                                        background_color?: number;
                                                        border_color?: number;
                                                        text_color?: number;
                                                        emoji_id?: string;
                                                    };
                                                    chat_card?: {
                                                        chat_id: string;
                                                        align?: number;
                                                    };
                                                    diagram?: {
                                                        diagram_type?: number;
                                                    };
                                                    divider?: {};
                                                    file?: {
                                                        token?: string;
                                                        name?: string;
                                                    };
                                                    grid?: {
                                                        column_size: number;
                                                    };
                                                    grid_column?: {
                                                        width_ratio?: number;
                                                    };
                                                    iframe?: {
                                                        component: {
                                                            iframe_type?: number;
                                                            url: string;
                                                        };
                                                    };
                                                    image?: {
                                                        width?: number;
                                                        height?: number;
                                                        token?: string;
                                                    };
                                                    isv?: {
                                                        component_id?: string;
                                                        component_type_id?: string;
                                                    };
                                                    mindnote?: {
                                                        token?: string;
                                                    };
                                                    sheet?: { token?: string };
                                                    table?: {
                                                        cells?: Array<string>;
                                                        property: {
                                                            row_size: number;
                                                            column_size: number;
                                                            column_width?: Array<number>;
                                                            merge_info?: Array<{
                                                                row_span?: number;
                                                                col_span?: number;
                                                            }>;
                                                        };
                                                    };
                                                    table_cell?: {};
                                                    view?: {
                                                        view_type?: number;
                                                    };
                                                    undefined?: {};
                                                    quote_container?: {};
                                                    task?: { task_id: string };
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document.block.children&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    params?: {
                        document_revision_id?: number;
                        page_token?: string;
                        page_size?: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { document_id: string; block_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    block_id?: string;
                                    parent_id?: string;
                                    children?: Array<string>;
                                    block_type: number;
                                    page?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    text?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading1?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading2?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading3?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading4?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading5?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading6?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading7?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading8?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading9?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    bullet?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    ordered?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    code?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    quote?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    equation?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    todo?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    bitable?: { token?: string };
                                    callout?: {
                                        background_color?: number;
                                        border_color?: number;
                                        text_color?: number;
                                        emoji_id?: string;
                                    };
                                    chat_card?: {
                                        chat_id: string;
                                        align?: number;
                                    };
                                    diagram?: { diagram_type?: number };
                                    divider?: {};
                                    file?: { token?: string; name?: string };
                                    grid?: { column_size: number };
                                    grid_column?: { width_ratio?: number };
                                    iframe?: {
                                        component: {
                                            iframe_type?: number;
                                            url: string;
                                        };
                                    };
                                    image?: {
                                        width?: number;
                                        height?: number;
                                        token?: string;
                                    };
                                    isv?: {
                                        component_id?: string;
                                        component_type_id?: string;
                                    };
                                    mindnote?: { token?: string };
                                    sheet?: { token?: string };
                                    table?: {
                                        cells?: Array<string>;
                                        property: {
                                            row_size: number;
                                            column_size: number;
                                            column_width?: Array<number>;
                                            merge_info?: Array<{
                                                row_span?: number;
                                                col_span?: number;
                                            }>;
                                        };
                                    };
                                    table_cell?: {};
                                    view?: { view_type?: number };
                                    undefined?: {};
                                    quote_container?: {};
                                    task?: { task_id: string };
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/docx/v1/documents/:document_id/blocks/:block_id/children`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document.block.children&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data?: {
                        children?: Array<{
                            block_type: number;
                            text?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                        };
                                    };
                                    mention_user?: { user_id: string };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                    };
                                    inline_block?: { block_id: string };
                                    equation?: { content: string };
                                }>;
                            };
                            heading1?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                        };
                                    };
                                    mention_user?: { user_id: string };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                    };
                                    inline_block?: { block_id: string };
                                    equation?: { content: string };
                                }>;
                            };
                            heading2?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                        };
                                    };
                                    mention_user?: { user_id: string };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                    };
                                    inline_block?: { block_id: string };
                                    equation?: { content: string };
                                }>;
                            };
                            heading3?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                        };
                                    };
                                    mention_user?: { user_id: string };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                    };
                                    inline_block?: { block_id: string };
                                    equation?: { content: string };
                                }>;
                            };
                            heading4?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                        };
                                    };
                                    mention_user?: { user_id: string };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                    };
                                    inline_block?: { block_id: string };
                                    equation?: { content: string };
                                }>;
                            };
                            heading5?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                        };
                                    };
                                    mention_user?: { user_id: string };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                    };
                                    inline_block?: { block_id: string };
                                    equation?: { content: string };
                                }>;
                            };
                            heading6?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                        };
                                    };
                                    mention_user?: { user_id: string };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                    };
                                    inline_block?: { block_id: string };
                                    equation?: { content: string };
                                }>;
                            };
                            heading7?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                        };
                                    };
                                    mention_user?: { user_id: string };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                    };
                                    inline_block?: { block_id: string };
                                    equation?: { content: string };
                                }>;
                            };
                            heading8?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                        };
                                    };
                                    mention_user?: { user_id: string };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                    };
                                    inline_block?: { block_id: string };
                                    equation?: { content: string };
                                }>;
                            };
                            heading9?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                        };
                                    };
                                    mention_user?: { user_id: string };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                    };
                                    inline_block?: { block_id: string };
                                    equation?: { content: string };
                                }>;
                            };
                            bullet?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                        };
                                    };
                                    mention_user?: { user_id: string };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                    };
                                    inline_block?: { block_id: string };
                                    equation?: { content: string };
                                }>;
                            };
                            ordered?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                        };
                                    };
                                    mention_user?: { user_id: string };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                    };
                                    inline_block?: { block_id: string };
                                    equation?: { content: string };
                                }>;
                            };
                            code?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                        };
                                    };
                                    mention_user?: { user_id: string };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                    };
                                    inline_block?: { block_id: string };
                                    equation?: { content: string };
                                }>;
                            };
                            quote?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                        };
                                    };
                                    mention_user?: { user_id: string };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                    };
                                    inline_block?: { block_id: string };
                                    equation?: { content: string };
                                }>;
                            };
                            equation?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                        };
                                    };
                                    mention_user?: { user_id: string };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                    };
                                    inline_block?: { block_id: string };
                                    equation?: { content: string };
                                }>;
                            };
                            todo?: {
                                style?: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                        };
                                    };
                                    mention_user?: { user_id: string };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                    };
                                    inline_block?: { block_id: string };
                                    equation?: { content: string };
                                }>;
                            };
                            bitable?: { token?: string; view_type?: number };
                            callout?: {
                                background_color?: number;
                                border_color?: number;
                                text_color?: number;
                            };
                            chat_card?: { chat_id: string; align?: number };
                            divider?: {};
                            file?: {};
                            grid?: { column_size: number };
                            iframe?: {
                                component: {
                                    iframe_type?: number;
                                    url: string;
                                };
                            };
                            image?: {};
                            sheet?: { row_size?: number; column_size?: number };
                            table?: {
                                property: {
                                    row_size: number;
                                    column_size: number;
                                    merge_info?: Array<{
                                        row_span?: number;
                                        col_span?: number;
                                    }>;
                                };
                            };
                            quote_container?: {};
                        }>;
                        index?: number;
                    };
                    params?: {
                        document_revision_id?: number;
                        client_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { document_id: string; block_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                children?: Array<{
                                    block_id?: string;
                                    parent_id?: string;
                                    children?: Array<string>;
                                    block_type: number;
                                    page?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    text?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading1?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading2?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading3?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading4?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading5?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading6?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading7?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading8?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading9?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    bullet?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    ordered?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    code?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    quote?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    equation?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    todo?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    bitable?: {
                                        token?: string;
                                        view_type?: number;
                                    };
                                    callout?: {
                                        background_color?: number;
                                        border_color?: number;
                                        text_color?: number;
                                        emoji_id?: string;
                                    };
                                    chat_card?: {
                                        chat_id: string;
                                        align?: number;
                                    };
                                    diagram?: { diagram_type?: number };
                                    divider?: {};
                                    file?: { token?: string; name?: string };
                                    grid?: { column_size: number };
                                    grid_column?: { width_ratio?: number };
                                    iframe?: {
                                        component: {
                                            iframe_type?: number;
                                            url: string;
                                        };
                                    };
                                    image?: {
                                        width?: number;
                                        height?: number;
                                        token?: string;
                                    };
                                    isv?: {
                                        component_id?: string;
                                        component_type_id?: string;
                                    };
                                    mindnote?: { token?: string };
                                    sheet?: {
                                        token?: string;
                                        row_size?: number;
                                        column_size?: number;
                                    };
                                    table?: {
                                        cells?: Array<string>;
                                        property: {
                                            row_size: number;
                                            column_size: number;
                                            column_width?: Array<number>;
                                            merge_info?: Array<{
                                                row_span?: number;
                                                col_span?: number;
                                            }>;
                                        };
                                    };
                                    table_cell?: {};
                                    view?: { view_type?: number };
                                    undefined?: {};
                                    quote_container?: {};
                                    task?: { task_id: string };
                                }>;
                                document_revision_id?: number;
                                client_token: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/docx/v1/documents/:document_id/blocks/:block_id/children`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        documentBlock: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document.block&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    params?: {
                        document_revision_id?: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { document_id: string; block_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                block?: {
                                    block_id?: string;
                                    parent_id?: string;
                                    children?: Array<string>;
                                    block_type: number;
                                    page?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    text?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading1?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading2?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading3?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading4?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading5?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading6?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading7?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading8?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading9?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    bullet?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    ordered?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    code?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    quote?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    equation?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    todo?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    bitable?: { token?: string };
                                    callout?: {
                                        background_color?: number;
                                        border_color?: number;
                                        text_color?: number;
                                        emoji_id?: string;
                                    };
                                    chat_card?: {
                                        chat_id: string;
                                        align?: number;
                                    };
                                    diagram?: { diagram_type?: number };
                                    divider?: {};
                                    file?: { token?: string; name?: string };
                                    grid?: { column_size: number };
                                    grid_column?: { width_ratio?: number };
                                    iframe?: {
                                        component: {
                                            iframe_type?: number;
                                            url: string;
                                        };
                                    };
                                    image?: {
                                        width?: number;
                                        height?: number;
                                        token?: string;
                                    };
                                    isv?: {
                                        component_id?: string;
                                        component_type_id?: string;
                                    };
                                    mindnote?: { token?: string };
                                    sheet?: { token?: string };
                                    table?: {
                                        cells?: Array<string>;
                                        property: {
                                            row_size: number;
                                            column_size: number;
                                            column_width?: Array<number>;
                                            merge_info?: Array<{
                                                row_span?: number;
                                                col_span?: number;
                                            }>;
                                        };
                                    };
                                    table_cell?: {};
                                    view?: { view_type?: number };
                                    undefined?: {};
                                    quote_container?: {};
                                    task?: { task_id: string };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/docx/v1/documents/:document_id/blocks/:block_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document.block&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        document_revision_id?: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { document_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/docx/v1/documents/:document_id/blocks`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    block_id?: string;
                                                    parent_id?: string;
                                                    children?: Array<string>;
                                                    block_type: number;
                                                    page?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    text?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    heading1?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    heading2?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    heading3?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    heading4?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    heading5?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    heading6?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    heading7?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    heading8?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    heading9?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    bullet?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    ordered?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    code?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    quote?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    equation?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    todo?: {
                                                        style?: {
                                                            align?: number;
                                                            done?: boolean;
                                                            folded?: boolean;
                                                            language?: number;
                                                            wrap?: boolean;
                                                        };
                                                        elements: Array<{
                                                            text_run?: {
                                                                content: string;
                                                                text_element_style?: {
                                                                    bold?: boolean;
                                                                    italic?: boolean;
                                                                    strikethrough?: boolean;
                                                                    underline?: boolean;
                                                                    inline_code?: boolean;
                                                                    background_color?: number;
                                                                    text_color?: number;
                                                                    link?: {
                                                                        url: string;
                                                                    };
                                                                };
                                                            };
                                                            mention_user?: {
                                                                user_id: string;
                                                            };
                                                            mention_doc?: {
                                                                token: string;
                                                                obj_type: number;
                                                                url: string;
                                                                title?: string;
                                                            };
                                                            reminder?: {
                                                                create_user_id: string;
                                                                is_notify?: boolean;
                                                                is_whole_day?: boolean;
                                                                expire_time: string;
                                                                notify_time: string;
                                                            };
                                                            file?: {
                                                                file_token?: string;
                                                                source_block_id?: string;
                                                            };
                                                            undefined?: {};
                                                            inline_block?: {
                                                                block_id: string;
                                                            };
                                                            equation?: {
                                                                content: string;
                                                            };
                                                        }>;
                                                    };
                                                    bitable?: {
                                                        token?: string;
                                                    };
                                                    callout?: {
                                                        background_color?: number;
                                                        border_color?: number;
                                                        text_color?: number;
                                                        emoji_id?: string;
                                                    };
                                                    chat_card?: {
                                                        chat_id: string;
                                                        align?: number;
                                                    };
                                                    diagram?: {
                                                        diagram_type?: number;
                                                    };
                                                    divider?: {};
                                                    file?: {
                                                        token?: string;
                                                        name?: string;
                                                    };
                                                    grid?: {
                                                        column_size: number;
                                                    };
                                                    grid_column?: {
                                                        width_ratio?: number;
                                                    };
                                                    iframe?: {
                                                        component: {
                                                            iframe_type?: number;
                                                            url: string;
                                                        };
                                                    };
                                                    image?: {
                                                        width?: number;
                                                        height?: number;
                                                        token?: string;
                                                    };
                                                    isv?: {
                                                        component_id?: string;
                                                        component_type_id?: string;
                                                    };
                                                    mindnote?: {
                                                        token?: string;
                                                    };
                                                    sheet?: { token?: string };
                                                    table?: {
                                                        cells?: Array<string>;
                                                        property: {
                                                            row_size: number;
                                                            column_size: number;
                                                            column_width?: Array<number>;
                                                            merge_info?: Array<{
                                                                row_span?: number;
                                                                col_span?: number;
                                                            }>;
                                                        };
                                                    };
                                                    table_cell?: {};
                                                    view?: {
                                                        view_type?: number;
                                                    };
                                                    undefined?: {};
                                                    quote_container?: {};
                                                    task?: { task_id: string };
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document.block&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        document_revision_id?: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { document_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    block_id?: string;
                                    parent_id?: string;
                                    children?: Array<string>;
                                    block_type: number;
                                    page?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    text?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading1?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading2?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading3?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading4?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading5?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading6?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading7?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading8?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading9?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    bullet?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    ordered?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    code?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    quote?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    equation?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    todo?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    bitable?: { token?: string };
                                    callout?: {
                                        background_color?: number;
                                        border_color?: number;
                                        text_color?: number;
                                        emoji_id?: string;
                                    };
                                    chat_card?: {
                                        chat_id: string;
                                        align?: number;
                                    };
                                    diagram?: { diagram_type?: number };
                                    divider?: {};
                                    file?: { token?: string; name?: string };
                                    grid?: { column_size: number };
                                    grid_column?: { width_ratio?: number };
                                    iframe?: {
                                        component: {
                                            iframe_type?: number;
                                            url: string;
                                        };
                                    };
                                    image?: {
                                        width?: number;
                                        height?: number;
                                        token?: string;
                                    };
                                    isv?: {
                                        component_id?: string;
                                        component_type_id?: string;
                                    };
                                    mindnote?: { token?: string };
                                    sheet?: { token?: string };
                                    table?: {
                                        cells?: Array<string>;
                                        property: {
                                            row_size: number;
                                            column_size: number;
                                            column_width?: Array<number>;
                                            merge_info?: Array<{
                                                row_span?: number;
                                                col_span?: number;
                                            }>;
                                        };
                                    };
                                    table_cell?: {};
                                    view?: { view_type?: number };
                                    undefined?: {};
                                    quote_container?: {};
                                    task?: { task_id: string };
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/docx/v1/documents/:document_id/blocks`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document.block&apiName=batch_update&version=v1 click to debug }
             */
            batchUpdate: async (
                payload?: {
                    data: {
                        requests: Array<{
                            update_text_elements?: {
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                        };
                                    };
                                    mention_user?: { user_id: string };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                        title?: string;
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_notify?: boolean;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                        notify_time: string;
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                    };
                                    undefined?: {};
                                    inline_block?: { block_id: string };
                                    equation?: { content: string };
                                }>;
                            };
                            update_text_style?: {
                                style: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                fields: Array<number>;
                            };
                            update_table_property?: {
                                column_width: number;
                                column_index: number;
                            };
                            insert_table_row?: { row_index: number };
                            insert_table_column?: { column_index: number };
                            delete_table_rows?: {
                                row_start_index: number;
                                row_end_index: number;
                            };
                            delete_table_columns?: {
                                column_start_index: number;
                                column_end_index: number;
                            };
                            merge_table_cells?: {
                                row_start_index: number;
                                row_end_index: number;
                                column_start_index: number;
                                column_end_index: number;
                            };
                            unmerge_table_cells?: {
                                row_index: number;
                                column_index: number;
                            };
                            insert_grid_column?: { column_index: number };
                            delete_grid_column?: { column_index: number };
                            update_grid_column_width_ratio?: {
                                width_ratios: Array<number>;
                            };
                            replace_image?: { token: string };
                            replace_file?: { token: string };
                            block_id?: string;
                            update_text?: {
                                elements: Array<{
                                    text_run?: {
                                        content: string;
                                        text_element_style?: {
                                            bold?: boolean;
                                            italic?: boolean;
                                            strikethrough?: boolean;
                                            underline?: boolean;
                                            inline_code?: boolean;
                                            background_color?: number;
                                            text_color?: number;
                                            link?: { url: string };
                                        };
                                    };
                                    mention_user?: { user_id: string };
                                    mention_doc?: {
                                        token: string;
                                        obj_type: number;
                                        url: string;
                                        title?: string;
                                    };
                                    reminder?: {
                                        create_user_id: string;
                                        is_notify?: boolean;
                                        is_whole_day?: boolean;
                                        expire_time: string;
                                        notify_time: string;
                                    };
                                    file?: {
                                        file_token?: string;
                                        source_block_id?: string;
                                    };
                                    undefined?: {};
                                    inline_block?: { block_id: string };
                                    equation?: { content: string };
                                }>;
                                style: {
                                    align?: number;
                                    done?: boolean;
                                    folded?: boolean;
                                    language?: number;
                                    wrap?: boolean;
                                };
                                fields: Array<number>;
                            };
                        }>;
                    };
                    params?: {
                        document_revision_id?: number;
                        client_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { document_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                blocks?: Array<{
                                    block_id?: string;
                                    parent_id?: string;
                                    children?: Array<string>;
                                    block_type: number;
                                    page?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    text?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading1?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading2?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading3?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading4?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading5?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading6?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading7?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading8?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading9?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    bullet?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    ordered?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    code?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    quote?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    equation?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    todo?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    bitable?: {
                                        token?: string;
                                        view_type?: number;
                                    };
                                    callout?: {
                                        background_color?: number;
                                        border_color?: number;
                                        text_color?: number;
                                        emoji_id?: string;
                                    };
                                    chat_card?: {
                                        chat_id: string;
                                        align?: number;
                                    };
                                    diagram?: { diagram_type?: number };
                                    divider?: {};
                                    file?: { token?: string; name?: string };
                                    grid?: { column_size: number };
                                    grid_column?: { width_ratio?: number };
                                    iframe?: {
                                        component: {
                                            iframe_type?: number;
                                            url: string;
                                        };
                                    };
                                    image?: {
                                        width?: number;
                                        height?: number;
                                        token?: string;
                                    };
                                    isv?: {
                                        component_id?: string;
                                        component_type_id?: string;
                                    };
                                    mindnote?: { token?: string };
                                    sheet?: {
                                        token?: string;
                                        row_size?: number;
                                        column_size?: number;
                                    };
                                    table?: {
                                        cells?: Array<string>;
                                        property: {
                                            row_size: number;
                                            column_size: number;
                                            column_width?: Array<number>;
                                            merge_info?: Array<{
                                                row_span?: number;
                                                col_span?: number;
                                            }>;
                                        };
                                    };
                                    table_cell?: {};
                                    view?: { view_type?: number };
                                    undefined?: {};
                                    quote_container?: {};
                                    task?: { task_id: string };
                                }>;
                                document_revision_id?: number;
                                client_token: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/docx/v1/documents/:document_id/blocks/batch_update`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=docx&resource=document.block&apiName=patch&version=v1 click to debug }
             */
            patch: async (
                payload?: {
                    data?: {
                        update_text_elements?: {
                            elements: Array<{
                                text_run?: {
                                    content: string;
                                    text_element_style?: {
                                        bold?: boolean;
                                        italic?: boolean;
                                        strikethrough?: boolean;
                                        underline?: boolean;
                                        inline_code?: boolean;
                                        background_color?: number;
                                        text_color?: number;
                                        link?: { url: string };
                                    };
                                };
                                mention_user?: { user_id: string };
                                mention_doc?: {
                                    token: string;
                                    obj_type: number;
                                    url: string;
                                };
                                reminder?: {
                                    create_user_id: string;
                                    is_whole_day?: boolean;
                                    expire_time: string;
                                };
                                file?: {
                                    file_token?: string;
                                    source_block_id?: string;
                                };
                                inline_block?: { block_id: string };
                                equation?: { content: string };
                            }>;
                        };
                        update_text_style?: {
                            style: {
                                align?: number;
                                done?: boolean;
                                folded?: boolean;
                                language?: number;
                                wrap?: boolean;
                            };
                            fields: Array<number>;
                        };
                        update_table_property?: {
                            column_width: number;
                            column_index: number;
                        };
                        insert_table_row?: { row_index: number };
                        insert_table_column?: { column_index: number };
                        delete_table_rows?: {
                            row_start_index: number;
                            row_end_index: number;
                        };
                        delete_table_columns?: {
                            column_start_index: number;
                            column_end_index: number;
                        };
                        merge_table_cells?: {
                            row_start_index: number;
                            row_end_index: number;
                            column_start_index: number;
                            column_end_index: number;
                        };
                        unmerge_table_cells?: {
                            row_index: number;
                            column_index: number;
                        };
                        insert_grid_column?: { column_index: number };
                        delete_grid_column?: { column_index: number };
                        update_grid_column_width_ratio?: {
                            width_ratios: Array<number>;
                        };
                        replace_image?: { token: string };
                        replace_file?: { token: string };
                        update_text?: {
                            elements: Array<{
                                text_run?: {
                                    content: string;
                                    text_element_style?: {
                                        bold?: boolean;
                                        italic?: boolean;
                                        strikethrough?: boolean;
                                        underline?: boolean;
                                        inline_code?: boolean;
                                        background_color?: number;
                                        text_color?: number;
                                        link?: { url: string };
                                    };
                                };
                                mention_user?: { user_id: string };
                                mention_doc?: {
                                    token: string;
                                    obj_type: number;
                                    url: string;
                                };
                                reminder?: {
                                    create_user_id: string;
                                    is_whole_day?: boolean;
                                    expire_time: string;
                                };
                                file?: {
                                    file_token?: string;
                                    source_block_id?: string;
                                };
                                inline_block?: { block_id: string };
                                equation?: { content: string };
                            }>;
                            style: {
                                align?: number;
                                done?: boolean;
                                folded?: boolean;
                                language?: number;
                                wrap?: boolean;
                            };
                            fields: Array<number>;
                        };
                    };
                    params?: {
                        document_revision_id?: number;
                        client_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { document_id: string; block_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                block?: {
                                    block_id?: string;
                                    parent_id?: string;
                                    children?: Array<string>;
                                    block_type: number;
                                    page?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    text?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading1?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading2?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading3?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading4?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading5?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading6?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading7?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading8?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    heading9?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    bullet?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    ordered?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    code?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    quote?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    equation?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    todo?: {
                                        style?: {
                                            align?: number;
                                            done?: boolean;
                                            folded?: boolean;
                                            language?: number;
                                            wrap?: boolean;
                                        };
                                        elements: Array<{
                                            text_run?: {
                                                content: string;
                                                text_element_style?: {
                                                    bold?: boolean;
                                                    italic?: boolean;
                                                    strikethrough?: boolean;
                                                    underline?: boolean;
                                                    inline_code?: boolean;
                                                    background_color?: number;
                                                    text_color?: number;
                                                    link?: { url: string };
                                                };
                                            };
                                            mention_user?: { user_id: string };
                                            mention_doc?: {
                                                token: string;
                                                obj_type: number;
                                                url: string;
                                                title?: string;
                                            };
                                            reminder?: {
                                                create_user_id: string;
                                                is_notify?: boolean;
                                                is_whole_day?: boolean;
                                                expire_time: string;
                                                notify_time: string;
                                            };
                                            file?: {
                                                file_token?: string;
                                                source_block_id?: string;
                                            };
                                            undefined?: {};
                                            inline_block?: { block_id: string };
                                            equation?: { content: string };
                                        }>;
                                    };
                                    bitable?: {
                                        token?: string;
                                        view_type?: number;
                                    };
                                    callout?: {
                                        background_color?: number;
                                        border_color?: number;
                                        text_color?: number;
                                        emoji_id?: string;
                                    };
                                    chat_card?: {
                                        chat_id: string;
                                        align?: number;
                                    };
                                    diagram?: { diagram_type?: number };
                                    divider?: {};
                                    file?: { token?: string; name?: string };
                                    grid?: { column_size: number };
                                    grid_column?: { width_ratio?: number };
                                    iframe?: {
                                        component: {
                                            iframe_type?: number;
                                            url: string;
                                        };
                                    };
                                    image?: {
                                        width?: number;
                                        height?: number;
                                        token?: string;
                                    };
                                    isv?: {
                                        component_id?: string;
                                        component_type_id?: string;
                                    };
                                    mindnote?: { token?: string };
                                    sheet?: {
                                        token?: string;
                                        row_size?: number;
                                        column_size?: number;
                                    };
                                    table?: {
                                        cells?: Array<string>;
                                        property: {
                                            row_size: number;
                                            column_size: number;
                                            column_width?: Array<number>;
                                            merge_info?: Array<{
                                                row_span?: number;
                                                col_span?: number;
                                            }>;
                                        };
                                    };
                                    table_cell?: {};
                                    view?: { view_type?: number };
                                    undefined?: {};
                                    quote_container?: {};
                                    task?: { task_id: string };
                                };
                                document_revision_id?: number;
                                client_token: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/docx/v1/documents/:document_id/blocks/:block_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };

    drive = {
        importTask: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=import_task&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        file_extension: string;
                        file_token: string;
                        type: string;
                        file_name?: string;
                        point: { mount_type: number; mount_key: string };
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { ticket?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/import_tasks`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=import_task&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    path: { ticket: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                result?: {
                                    ticket?: string;
                                    type: string;
                                    job_status?: number;
                                    job_error_msg?: string;
                                    token?: string;
                                    url?: string;
                                    extra?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/import_tasks/:ticket`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        media: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=media&apiName=download&version=v1 click to debug }
             */
            download: async (
                payload?: {
                    params?: { extra?: string };
                    path: { file_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await http
                    .request<any, any>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/medias/:file_token/download`,
                            path
                        ),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return {
                    writeFile: async (filePath: string) => {
                        await res.pipe(fs.createWriteStream(filePath));
                    },
                };
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=media&apiName=upload_finish&version=v1 click to debug }
             */
            uploadFinish: async (
                payload?: {
                    data: { upload_id: string; block_num: number };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { file_token?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/medias/upload_finish`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=media&apiName=upload_part&version=v1 click to debug }
             */
            uploadPart: async (
                payload?: {
                    data: {
                        upload_id: string;
                        seq: number;
                        size: number;
                        checksum?: string;
                        file: Buffer;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/medias/upload_part`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers: {
                            ...headers,
                            "Content-Type": "multipart/form-data",
                        },
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return get(res, "data", {});
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=media&apiName=batch_get_tmp_download_url&version=v1 click to debug }
             */
            batchGetTmpDownloadUrl: async (
                payload?: {
                    params: { file_tokens: number; extra?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                tmp_download_urls?: Array<{
                                    file_token: string;
                                    tmp_download_url: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/medias/batch_get_tmp_download_url`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=media&apiName=upload_prepare&version=v1 click to debug }
             */
            uploadPrepare: async (
                payload?: {
                    data: {
                        file_name: string;
                        parent_type:
                            | "doc_image"
                            | "sheet_image"
                            | "doc_file"
                            | "sheet_file"
                            | "vc_virtual_background"
                            | "bitable_image"
                            | "bitable_file"
                            | "moments"
                            | "ccm_import_open";
                        parent_node: string;
                        size: number;
                        extra?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                upload_id?: string;
                                block_size?: number;
                                block_num?: number;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/medias/upload_prepare`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=media&apiName=upload_all&version=v1 click to debug }
             */
            uploadAll: async (
                payload?: {
                    data: {
                        file_name: string;
                        parent_type:
                            | "doc_image"
                            | "docx_image"
                            | "sheet_image"
                            | "doc_file"
                            | "docx_file"
                            | "sheet_file"
                            | "vc_virtual_background"
                            | "bitable_image"
                            | "bitable_file"
                            | "moments"
                            | "ccm_import_open";
                        parent_node: string;
                        size: number;
                        checksum?: string;
                        extra?: string;
                        file: Buffer;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { file_token?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/medias/upload_all`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers: {
                            ...headers,
                            "Content-Type": "multipart/form-data",
                        },
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return get(res, "data", {});
            },
        },
        fileStatistics: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.statistics&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    params: {
                        file_type:
                            | "doc"
                            | "sheet"
                            | "mindnote"
                            | "bitable"
                            | "wiki"
                            | "file"
                            | "docx";
                    };
                    path?: { file_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                file_token?: string;
                                file_type?: string;
                                statistics?: {
                                    uv?: number;
                                    pv?: number;
                                    like_count?: number;
                                    timestamp?: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/statistics`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        fileSubscription: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.subscription&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        subscription_id?: string;
                        subscription_type: "comment_update";
                        is_subcribe?: boolean;
                        file_type: "doc" | "docx" | "wiki";
                    };
                    path: { file_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                subscription?: {
                                    subscription_id?: string;
                                    subscription_type?: "comment_update";
                                    is_subcribe?: boolean;
                                    file_type: "doc" | "docx" | "wiki";
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/subscriptions`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.subscription&apiName=patch&version=v1 click to debug }
             */
            patch: async (
                payload?: {
                    data: {
                        is_subscribe: boolean;
                        file_type: "doc" | "docx" | "wiki";
                    };
                    path?: { file_token?: string; subscription_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                subscription?: {
                                    subscription_id?: string;
                                    subscription_type?: "comment_update";
                                    is_subcribe?: boolean;
                                    file_type: "doc" | "docx" | "wiki";
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/subscriptions/:subscription_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.subscription&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    data: {
                        subscription_id?: string;
                        subscription_type?: "comment_update";
                        is_subcribe?: boolean;
                        file_type: "doc" | "docx" | "wiki";
                    };
                    path?: { file_token?: string; subscription_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                subscription?: {
                                    subscription_id?: string;
                                    subscription_type?: "comment_update";
                                    is_subcribe?: boolean;
                                    file_type: "doc" | "docx" | "wiki";
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/subscriptions/:subscription_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        file: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=download&version=v1 click to debug }
             */
            download: async (
                payload?: {
                    path?: { file_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await http
                    .request<any, any>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/download`,
                            path
                        ),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return {
                    writeFile: async (filePath: string) => {
                        await res.pipe(fs.createWriteStream(filePath));
                    },
                };
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    params: {
                        type:
                            | "file"
                            | "docx"
                            | "bitable"
                            | "folder"
                            | "doc"
                            | "sheet"
                            | "mindnote"
                            | "shortcut";
                    };
                    path?: { file_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { task_id?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=task_check&version=v1 click to debug }
             */
            taskCheck: async (
                payload?: {
                    params: { task_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { status?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/task_check`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=move&version=v1 click to debug }
             */
            move: async (
                payload?: {
                    data?: {
                        type?:
                            | "file"
                            | "docx"
                            | "bitable"
                            | "doc"
                            | "sheet"
                            | "mindnote"
                            | "folder";
                        folder_token?: string;
                    };
                    path: { file_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { task_id?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/move`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=create_folder&version=v1 click to debug }
             */
            createFolder: async (
                payload?: {
                    data: { name: string; folder_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { token?: string; url?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/create_folder`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=copy&version=v1 click to debug }
             */
            copy: async (
                payload?: {
                    data: {
                        name: string;
                        type?:
                            | "file"
                            | "doc"
                            | "sheet"
                            | "bitable"
                            | "docx"
                            | "mindnote";
                        folder_token: string;
                    };
                    path?: { file_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                file?: {
                                    token: string;
                                    name: string;
                                    type: string;
                                    parent_token?: string;
                                    url?: string;
                                    shortcut_info?: {
                                        target_type: string;
                                        target_token: string;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/copy`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=upload_finish&version=v1 click to debug }
             */
            uploadFinish: async (
                payload?: {
                    data: { upload_id: string; block_num: number };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { file_token?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/upload_finish`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=upload_part&version=v1 click to debug }
             */
            uploadPart: async (
                payload?: {
                    data: {
                        upload_id: string;
                        seq: number;
                        size: number;
                        checksum?: string;
                        file: Buffer;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/upload_part`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers: {
                            ...headers,
                            "Content-Type": "multipart/form-data",
                        },
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return get(res, "data", {});
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=upload_prepare&version=v1 click to debug }
             */
            uploadPrepare: async (
                payload?: {
                    data: {
                        file_name: string;
                        parent_type: "explorer";
                        parent_node: string;
                        size: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                upload_id?: string;
                                block_size?: number;
                                block_num?: number;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/upload_prepare`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=upload_all&version=v1 click to debug }
             */
            uploadAll: async (
                payload?: {
                    data: {
                        file_name: string;
                        parent_type: "explorer";
                        parent_node: string;
                        size: number;
                        checksum?: string;
                        file: Buffer;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { file_token?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/upload_all`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers: {
                            ...headers,
                            "Content-Type": "multipart/form-data",
                        },
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return get(res, "data", {});
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        folder_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/drive/v1/files`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                files?: Array<{
                                                    token: string;
                                                    name: string;
                                                    type: string;
                                                    parent_token?: string;
                                                    url?: string;
                                                    shortcut_info?: {
                                                        target_type: string;
                                                        target_token: string;
                                                    };
                                                }>;
                                                next_page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        folder_token?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                files?: Array<{
                                    token: string;
                                    name: string;
                                    type: string;
                                    parent_token?: string;
                                    url?: string;
                                    shortcut_info?: {
                                        target_type: string;
                                        target_token: string;
                                    };
                                }>;
                                next_page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file&apiName=subscribe&version=v1 click to debug }
             */
            subscribe: async (
                payload?: {
                    params: { file_type: "doc" | "docx" | "sheet" | "bitable" };
                    path: { file_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/subscribe`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        exportTask: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=export_task&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        file_extension: "docx" | "pdf" | "xlsx";
                        token: string;
                        type: "doc" | "sheet" | "bitable" | "docx";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { ticket?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/export_tasks`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=export_task&apiName=download&version=v1 click to debug }
             */
            download: async (
                payload?: {
                    path: { file_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await http
                    .request<any, any>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/export_tasks/file/:file_token/download`,
                            path
                        ),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return {
                    writeFile: async (filePath: string) => {
                        await res.pipe(fs.createWriteStream(filePath));
                    },
                };
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=export_task&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    params: { token: string };
                    path?: { ticket?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                result?: {
                                    file_extension: "docx" | "pdf" | "xlsx";
                                    type: "doc" | "sheet" | "bitable" | "docx";
                                    file_name?: string;
                                    file_token?: string;
                                    file_size?: number;
                                    job_error_msg?: string;
                                    job_status?: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/export_tasks/:ticket`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        fileCommentReply: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.comment.reply&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    params: { file_type: "doc" | "sheet" | "file" | "docx" };
                    path: {
                        file_token: string;
                        comment_id: string;
                        reply_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/comments/:comment_id/replies/:reply_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.comment.reply&apiName=update&version=v1 click to debug }
             */
            update: async (
                payload?: {
                    data: {
                        content: {
                            elements: Array<{
                                type: "text_run" | "docs_link" | "person";
                                text_run?: { text: string };
                                docs_link?: { url: string };
                                person?: { user_id: string };
                            }>;
                        };
                    };
                    params: {
                        file_type: "doc" | "sheet" | "file" | "docx";
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: {
                        file_token: string;
                        comment_id: string;
                        reply_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/comments/:comment_id/replies/:reply_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        fileComment: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.comment&apiName=patch&version=v1 click to debug }
             */
            patch: async (
                payload?: {
                    data: { is_solved: boolean };
                    params: { file_type: "doc" | "sheet" | "file" | "docx" };
                    path: { file_token: string; comment_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/comments/:comment_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.comment&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data?: {
                        comment_id?: string;
                        user_id?: string;
                        create_time?: number;
                        update_time?: number;
                        is_solved?: boolean;
                        solved_time?: number;
                        solver_user_id?: string;
                        has_more?: boolean;
                        page_token?: string;
                        is_whole?: boolean;
                        quote?: string;
                        reply_list?: {
                            replies: Array<{
                                reply_id?: string;
                                user_id?: string;
                                create_time?: number;
                                update_time?: number;
                                content: {
                                    elements: Array<{
                                        type:
                                            | "text_run"
                                            | "docs_link"
                                            | "person";
                                        text_run?: { text: string };
                                        docs_link?: { url: string };
                                        person?: { user_id: string };
                                    }>;
                                };
                                extra?: { image_list?: Array<string> };
                            }>;
                        };
                    };
                    params: {
                        file_type: "doc" | "sheet" | "file" | "docx";
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { file_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                comment_id?: string;
                                user_id?: string;
                                create_time?: number;
                                update_time?: number;
                                is_solved?: boolean;
                                solved_time?: number;
                                solver_user_id?: string;
                                has_more?: boolean;
                                page_token?: string;
                                is_whole?: boolean;
                                quote?: string;
                                reply_list?: {
                                    replies: Array<{
                                        reply_id?: string;
                                        user_id?: string;
                                        create_time?: number;
                                        update_time?: number;
                                        content: {
                                            elements: Array<{
                                                type:
                                                    | "text_run"
                                                    | "docs_link"
                                                    | "person";
                                                text_run?: { text: string };
                                                docs_link?: { url: string };
                                                person?: { user_id: string };
                                            }>;
                                        };
                                        extra?: { image_list?: Array<string> };
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/comments`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.comment&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    params: {
                        file_type: "doc" | "sheet" | "file" | "docx";
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { file_token: string; comment_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                comment_id?: string;
                                user_id?: string;
                                create_time?: number;
                                update_time?: number;
                                is_solved?: boolean;
                                solved_time?: number;
                                solver_user_id?: string;
                                has_more?: boolean;
                                page_token?: string;
                                is_whole?: boolean;
                                quote?: string;
                                reply_list?: {
                                    replies: Array<{
                                        reply_id?: string;
                                        user_id?: string;
                                        create_time?: number;
                                        update_time?: number;
                                        content: {
                                            elements: Array<{
                                                type:
                                                    | "text_run"
                                                    | "docs_link"
                                                    | "person";
                                                text_run?: { text: string };
                                                docs_link?: { url: string };
                                                person?: { user_id: string };
                                            }>;
                                        };
                                        extra?: { image_list?: Array<string> };
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/comments/:comment_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.comment&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params: {
                        file_type: "doc" | "sheet" | "file" | "docx";
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        is_solved?: boolean;
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { file_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/drive/v1/files/:file_token/comments`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                items?: Array<{
                                                    comment_id?: string;
                                                    user_id?: string;
                                                    create_time?: number;
                                                    update_time?: number;
                                                    is_solved?: boolean;
                                                    solved_time?: number;
                                                    solver_user_id?: string;
                                                    has_more?: boolean;
                                                    page_token?: string;
                                                    is_whole?: boolean;
                                                    quote?: string;
                                                    reply_list?: {
                                                        replies: Array<{
                                                            reply_id?: string;
                                                            user_id?: string;
                                                            create_time?: number;
                                                            update_time?: number;
                                                            content: {
                                                                elements: Array<{
                                                                    type:
                                                                        | "text_run"
                                                                        | "docs_link"
                                                                        | "person";
                                                                    text_run?: {
                                                                        text: string;
                                                                    };
                                                                    docs_link?: {
                                                                        url: string;
                                                                    };
                                                                    person?: {
                                                                        user_id: string;
                                                                    };
                                                                }>;
                                                            };
                                                            extra?: {
                                                                image_list?: Array<string>;
                                                            };
                                                        }>;
                                                    };
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=file.comment&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params: {
                        file_type: "doc" | "sheet" | "file" | "docx";
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        is_solved?: boolean;
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { file_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    comment_id?: string;
                                    user_id?: string;
                                    create_time?: number;
                                    update_time?: number;
                                    is_solved?: boolean;
                                    solved_time?: number;
                                    solver_user_id?: string;
                                    has_more?: boolean;
                                    page_token?: string;
                                    is_whole?: boolean;
                                    quote?: string;
                                    reply_list?: {
                                        replies: Array<{
                                            reply_id?: string;
                                            user_id?: string;
                                            create_time?: number;
                                            update_time?: number;
                                            content: {
                                                elements: Array<{
                                                    type:
                                                        | "text_run"
                                                        | "docs_link"
                                                        | "person";
                                                    text_run?: { text: string };
                                                    docs_link?: { url: string };
                                                    person?: {
                                                        user_id: string;
                                                    };
                                                }>;
                                            };
                                            extra?: {
                                                image_list?: Array<string>;
                                            };
                                        }>;
                                    };
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/files/:file_token/comments`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        permissionPublic: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=permission.public&apiName=patch&version=v1 click to debug }
             */
            patch: async (
                payload?: {
                    data?: {
                        external_access?: boolean;
                        security_entity?:
                            | "anyone_can_view"
                            | "anyone_can_edit"
                            | "only_full_access";
                        comment_entity?: "anyone_can_view" | "anyone_can_edit";
                        share_entity?:
                            | "anyone"
                            | "same_tenant"
                            | "only_full_access";
                        link_share_entity?:
                            | "tenant_readable"
                            | "tenant_editable"
                            | "anyone_readable"
                            | "anyone_editable"
                            | "closed";
                        invite_external?: boolean;
                    };
                    params: {
                        type:
                            | "doc"
                            | "sheet"
                            | "file"
                            | "wiki"
                            | "bitable"
                            | "docx";
                    };
                    path: { token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                permission_public?: {
                                    external_access?: boolean;
                                    security_entity?:
                                        | "anyone_can_view"
                                        | "anyone_can_edit"
                                        | "only_full_access";
                                    comment_entity?:
                                        | "anyone_can_view"
                                        | "anyone_can_edit";
                                    share_entity?:
                                        | "anyone"
                                        | "same_tenant"
                                        | "only_full_access";
                                    link_share_entity?:
                                        | "tenant_readable"
                                        | "tenant_editable"
                                        | "anyone_readable"
                                        | "anyone_editable"
                                        | "closed";
                                    invite_external?: boolean;
                                    lock_switch?: boolean;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/permissions/:token/public`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=permission.public&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    params: {
                        type:
                            | "doc"
                            | "sheet"
                            | "file"
                            | "wiki"
                            | "bitable"
                            | "docx";
                    };
                    path: { token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                permission_public?: {
                                    external_access?: boolean;
                                    security_entity?:
                                        | "anyone_can_view"
                                        | "anyone_can_edit"
                                        | "only_full_access";
                                    comment_entity?:
                                        | "anyone_can_view"
                                        | "anyone_can_edit";
                                    share_entity?:
                                        | "anyone"
                                        | "same_tenant"
                                        | "only_full_access";
                                    link_share_entity?:
                                        | "tenant_readable"
                                        | "tenant_editable"
                                        | "anyone_readable"
                                        | "anyone_editable"
                                        | "closed";
                                    invite_external?: boolean;
                                    lock_switch?: boolean;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/permissions/:token/public`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        permissionMember: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=permission.member&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    params: {
                        type:
                            | "doc"
                            | "sheet"
                            | "file"
                            | "wiki"
                            | "bitable"
                            | "docx"
                            | "folder"
                            | "mindnote";
                        member_type:
                            | "email"
                            | "openid"
                            | "openchat"
                            | "opendepartmentid"
                            | "userid";
                    };
                    path: { token: string; member_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/permissions/:token/members/:member_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=permission.member&apiName=update&version=v1 click to debug }
             */
            update: async (
                payload?: {
                    data: {
                        member_type:
                            | "email"
                            | "openid"
                            | "openchat"
                            | "opendepartmentid"
                            | "userid";
                        perm: "view" | "edit" | "full_access";
                    };
                    params: {
                        need_notification?: boolean;
                        type:
                            | "doc"
                            | "sheet"
                            | "file"
                            | "wiki"
                            | "bitable"
                            | "docx"
                            | "mindnote";
                    };
                    path: { token: string; member_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                member?: {
                                    member_type:
                                        | "email"
                                        | "openid"
                                        | "openchat"
                                        | "opendepartmentid"
                                        | "userid";
                                    member_id: string;
                                    perm: "view" | "edit" | "full_access";
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/permissions/:token/members/:member_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=permission.member&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        member_type:
                            | "email"
                            | "openid"
                            | "openchat"
                            | "opendepartmentid"
                            | "userid";
                        member_id: string;
                        perm: "view" | "edit" | "full_access";
                    };
                    params: {
                        type:
                            | "doc"
                            | "sheet"
                            | "file"
                            | "wiki"
                            | "bitable"
                            | "docx"
                            | "folder"
                            | "mindnote";
                        need_notification?: boolean;
                    };
                    path: { token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                member?: {
                                    member_type:
                                        | "email"
                                        | "openid"
                                        | "openchat"
                                        | "opendepartmentid"
                                        | "userid";
                                    member_id: string;
                                    perm: "view" | "edit" | "full_access";
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/permissions/:token/members`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        meta: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=drive&resource=meta&apiName=batch_query&version=v1 click to debug }
             */
            batchQuery: async (
                payload?: {
                    data: {
                        request_docs: Array<{
                            doc_token: string;
                            doc_type:
                                | "doc"
                                | "sheet"
                                | "bitable"
                                | "mindnote"
                                | "file"
                                | "wiki"
                                | "docx"
                                | "folder";
                        }>;
                        with_url?: boolean;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                metas: Array<{
                                    doc_token: string;
                                    doc_type: string;
                                    title: string;
                                    owner_id: string;
                                    create_time: string;
                                    latest_modify_user: string;
                                    latest_modify_time: string;
                                    url: string;
                                }>;
                                failed_list?: Array<{
                                    token: string;
                                    code: number;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/drive/v1/metas/batch_query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };

    edu = {};

    ehr = {
        attachment: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=ehr&resource=attachment&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    path: { token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await http
                    .request<any, any>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/ehr/v1/attachments/:token`,
                            path
                        ),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return {
                    writeFile: async (filePath: string) => {
                        await res.pipe(fs.createWriteStream(filePath));
                    },
                };
            },
        },
        employee: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=ehr&resource=employee&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: {
                        view?: "basic" | "full";
                        status?: number;
                        type?: number;
                        start_time?: string;
                        end_time?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        user_ids?: number;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/ehr/v1/employees`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    user_id?: string;
                                                    system_fields?: {
                                                        name?: string;
                                                        en_name?: string;
                                                        email?: string;
                                                        mobile?: string;
                                                        department_id?: string;
                                                        manager?: {
                                                            user_id?: string;
                                                            name?: string;
                                                            en_name?: string;
                                                        };
                                                        job?: {
                                                            id?: number;
                                                            name?: string;
                                                        };
                                                        job_level?: {
                                                            id?: number;
                                                            name?: string;
                                                        };
                                                        work_location?: {
                                                            id?: number;
                                                            name?: string;
                                                        };
                                                        gender?: number;
                                                        birthday?: string;
                                                        native_region?: {
                                                            iso_code?: string;
                                                            name?: string;
                                                        };
                                                        ethnicity?: number;
                                                        marital_status?: number;
                                                        political_status?: number;
                                                        entered_workforce_date?: string;
                                                        id_type?: number;
                                                        id_number?: string;
                                                        hukou_type?: number;
                                                        hukou_location?: string;
                                                        bank_account_number?: string;
                                                        bank_name?: string;
                                                        social_security_account?: string;
                                                        provident_fund_account?: string;
                                                        employee_no?: string;
                                                        employee_type?: number;
                                                        status?: number;
                                                        hire_date?: string;
                                                        probation_months?: number;
                                                        conversion_date?: string;
                                                        application?: number;
                                                        application_status?: number;
                                                        last_day?: string;
                                                        departure_type?: number;
                                                        departure_reason?: number;
                                                        departure_notes?: string;
                                                        contract_company?: {
                                                            id?: number;
                                                            name?: string;
                                                        };
                                                        contract_type?: number;
                                                        contract_start_date?: string;
                                                        contract_expiration_date?: string;
                                                        contract_sign_times?: number;
                                                        personal_email?: string;
                                                        family_address?: string;
                                                        primary_emergency_contact?: {
                                                            name?: string;
                                                            relationship?: number;
                                                            mobile?: string;
                                                        };
                                                        emergency_contact?: Array<{
                                                            name?: string;
                                                            relationship?: number;
                                                            mobile?: string;
                                                        }>;
                                                        highest_level_of_edu?: {
                                                            level?: number;
                                                            school?: string;
                                                            major?: string;
                                                            degree?: number;
                                                            start?: string;
                                                            end?: string;
                                                        };
                                                        education?: Array<{
                                                            level?: number;
                                                            school?: string;
                                                            major?: string;
                                                            degree?: number;
                                                            start?: string;
                                                            end?: string;
                                                        }>;
                                                        former_work_exp?: {
                                                            company?: string;
                                                            department?: string;
                                                            job?: string;
                                                            start?: string;
                                                            end?: string;
                                                            description?: string;
                                                        };
                                                        work_exp?: Array<{
                                                            company?: string;
                                                            department?: string;
                                                            job?: string;
                                                            start?: string;
                                                            end?: string;
                                                            description?: string;
                                                        }>;
                                                        id_photo_po_side?: Array<{
                                                            id?: string;
                                                            mime_type?: string;
                                                            name?: string;
                                                            size?: number;
                                                        }>;
                                                        id_photo_em_side?: Array<{
                                                            id?: string;
                                                            mime_type?: string;
                                                            name?: string;
                                                            size?: number;
                                                        }>;
                                                        id_photo?: Array<{
                                                            id?: string;
                                                            mime_type?: string;
                                                            name?: string;
                                                            size?: number;
                                                        }>;
                                                        diploma_photo?: Array<{
                                                            id?: string;
                                                            mime_type?: string;
                                                            name?: string;
                                                            size?: number;
                                                        }>;
                                                        graduation_cert?: Array<{
                                                            id?: string;
                                                            mime_type?: string;
                                                            name?: string;
                                                            size?: number;
                                                        }>;
                                                        cert_of_merit?: Array<{
                                                            id?: string;
                                                            mime_type?: string;
                                                            name?: string;
                                                            size?: number;
                                                        }>;
                                                        offboarding_file?: Array<{
                                                            id?: string;
                                                            mime_type?: string;
                                                            name?: string;
                                                            size?: number;
                                                        }>;
                                                        cancel_onboarding_reason?: number;
                                                        cancel_onboarding_notes?: string;
                                                        employee_form_status?: number;
                                                        create_time?: number;
                                                        update_time?: number;
                                                    };
                                                    custom_fields?: Array<{
                                                        key?: string;
                                                        label?: string;
                                                        type?:
                                                            | "text"
                                                            | "date"
                                                            | "option"
                                                            | "file";
                                                        value?: string;
                                                    }>;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=ehr&resource=employee&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        view?: "basic" | "full";
                        status?: number;
                        type?: number;
                        start_time?: string;
                        end_time?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        user_ids?: number;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    user_id?: string;
                                    system_fields?: {
                                        name?: string;
                                        en_name?: string;
                                        email?: string;
                                        mobile?: string;
                                        department_id?: string;
                                        manager?: {
                                            user_id?: string;
                                            name?: string;
                                            en_name?: string;
                                        };
                                        job?: { id?: number; name?: string };
                                        job_level?: {
                                            id?: number;
                                            name?: string;
                                        };
                                        work_location?: {
                                            id?: number;
                                            name?: string;
                                        };
                                        gender?: number;
                                        birthday?: string;
                                        native_region?: {
                                            iso_code?: string;
                                            name?: string;
                                        };
                                        ethnicity?: number;
                                        marital_status?: number;
                                        political_status?: number;
                                        entered_workforce_date?: string;
                                        id_type?: number;
                                        id_number?: string;
                                        hukou_type?: number;
                                        hukou_location?: string;
                                        bank_account_number?: string;
                                        bank_name?: string;
                                        social_security_account?: string;
                                        provident_fund_account?: string;
                                        employee_no?: string;
                                        employee_type?: number;
                                        status?: number;
                                        hire_date?: string;
                                        probation_months?: number;
                                        conversion_date?: string;
                                        application?: number;
                                        application_status?: number;
                                        last_day?: string;
                                        departure_type?: number;
                                        departure_reason?: number;
                                        departure_notes?: string;
                                        contract_company?: {
                                            id?: number;
                                            name?: string;
                                        };
                                        contract_type?: number;
                                        contract_start_date?: string;
                                        contract_expiration_date?: string;
                                        contract_sign_times?: number;
                                        personal_email?: string;
                                        family_address?: string;
                                        primary_emergency_contact?: {
                                            name?: string;
                                            relationship?: number;
                                            mobile?: string;
                                        };
                                        emergency_contact?: Array<{
                                            name?: string;
                                            relationship?: number;
                                            mobile?: string;
                                        }>;
                                        highest_level_of_edu?: {
                                            level?: number;
                                            school?: string;
                                            major?: string;
                                            degree?: number;
                                            start?: string;
                                            end?: string;
                                        };
                                        education?: Array<{
                                            level?: number;
                                            school?: string;
                                            major?: string;
                                            degree?: number;
                                            start?: string;
                                            end?: string;
                                        }>;
                                        former_work_exp?: {
                                            company?: string;
                                            department?: string;
                                            job?: string;
                                            start?: string;
                                            end?: string;
                                            description?: string;
                                        };
                                        work_exp?: Array<{
                                            company?: string;
                                            department?: string;
                                            job?: string;
                                            start?: string;
                                            end?: string;
                                            description?: string;
                                        }>;
                                        id_photo_po_side?: Array<{
                                            id?: string;
                                            mime_type?: string;
                                            name?: string;
                                            size?: number;
                                        }>;
                                        id_photo_em_side?: Array<{
                                            id?: string;
                                            mime_type?: string;
                                            name?: string;
                                            size?: number;
                                        }>;
                                        id_photo?: Array<{
                                            id?: string;
                                            mime_type?: string;
                                            name?: string;
                                            size?: number;
                                        }>;
                                        diploma_photo?: Array<{
                                            id?: string;
                                            mime_type?: string;
                                            name?: string;
                                            size?: number;
                                        }>;
                                        graduation_cert?: Array<{
                                            id?: string;
                                            mime_type?: string;
                                            name?: string;
                                            size?: number;
                                        }>;
                                        cert_of_merit?: Array<{
                                            id?: string;
                                            mime_type?: string;
                                            name?: string;
                                            size?: number;
                                        }>;
                                        offboarding_file?: Array<{
                                            id?: string;
                                            mime_type?: string;
                                            name?: string;
                                            size?: number;
                                        }>;
                                        cancel_onboarding_reason?: number;
                                        cancel_onboarding_notes?: string;
                                        employee_form_status?: number;
                                        create_time?: number;
                                        update_time?: number;
                                    };
                                    custom_fields?: Array<{
                                        key?: string;
                                        label?: string;
                                        type?:
                                            | "text"
                                            | "date"
                                            | "option"
                                            | "file";
                                        value?: string;
                                    }>;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/ehr/v1/employees`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };

    elearning = {};

    event = {
        outboundIp: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=event&resource=outbound_ip&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/event/v1/outbound_ip`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                ip_list?: Array<string>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=event&resource=outbound_ip&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                ip_list?: Array<string>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/event/v1/outbound_ip`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };

    exam = {};

    face_detection = {
        image: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=face_detection&resource=image&apiName=detect_face_attributes&version=v1 click to debug }
             */
            detectFaceAttributes: async (
                payload?: {
                    data?: { image?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                image_info: { width?: number; height?: number };
                                face_infos: Array<{
                                    position?: {
                                        upper_left: { x: number; y: number };
                                        lower_right: { x: number; y: number };
                                    };
                                    attribute?: {
                                        gender?: {
                                            type: number;
                                            probability: number;
                                        };
                                        age?: number;
                                        emotion?: {
                                            type: number;
                                            probability: number;
                                        };
                                        beauty?: number;
                                        pose?: {
                                            pitch?: number;
                                            yaw?: number;
                                            roll?: number;
                                        };
                                        hat?: {
                                            type: number;
                                            probability: number;
                                        };
                                        glass?: {
                                            type: number;
                                            probability: number;
                                        };
                                        mask?: {
                                            type: number;
                                            probability: number;
                                        };
                                    };
                                    quality?: {
                                        sharpness?: number;
                                        brightness?: number;
                                        occlude?: {
                                            eyebrow?: number;
                                            nose?: number;
                                            cheek?: number;
                                            mouth?: number;
                                            chin?: number;
                                            left_eye?: number;
                                            right_eye?: number;
                                        };
                                    };
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/face_detection/v1/image/detect_face_attributes`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };

    feelgood = {};

    helpdesk = {
        ticketCustomizedField: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket_customized_field&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        helpdesk_id: string;
                        key_name: string;
                        display_name: string;
                        position: string;
                        field_type: string;
                        description: string;
                        visible: boolean;
                        editable: boolean;
                        required: boolean;
                        dropdown_allow_multiple?: boolean;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/ticket_customized_fields`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket_customized_field&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path: { ticket_customized_field_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/ticket_customized_fields/:ticket_customized_field_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket_customized_field&apiName=patch&version=v1 click to debug }
             */
            patch: async (
                payload?: {
                    data?: {
                        display_name?: string;
                        position?: string;
                        description?: string;
                        visible?: boolean;
                        required?: boolean;
                    };
                    path: { ticket_customized_field_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/ticket_customized_fields/:ticket_customized_field_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket_customized_field&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    path: { ticket_customized_field_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                ticket_customized_field_id: string;
                                helpdesk_id: string;
                                key_name: string;
                                display_name: string;
                                position: string;
                                field_type: string;
                                description: string;
                                visible: boolean;
                                editable: boolean;
                                required: boolean;
                                created_at?: string;
                                updated_at?: string;
                                created_by?: {
                                    id?: string;
                                    avatar_url?: string;
                                    name?: string;
                                    email?: string;
                                    department?: string;
                                    city?: string;
                                    country?: string;
                                };
                                updated_by?: {
                                    id?: string;
                                    avatar_url?: string;
                                    name?: string;
                                    email?: string;
                                    department?: string;
                                    city?: string;
                                    country?: string;
                                };
                                dropdown_allow_multiple?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/ticket_customized_fields/:ticket_customized_field_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket_customized_field&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    data?: { visible?: boolean };
                    params?: { page_token?: string; page_size?: number };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/helpdesk/v1/ticket_customized_fields`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                next_page_token?: string;
                                                items?: Array<{
                                                    ticket_customized_field_id: string;
                                                    helpdesk_id: string;
                                                    key_name: string;
                                                    display_name: string;
                                                    position: string;
                                                    field_type: string;
                                                    description: string;
                                                    visible: boolean;
                                                    editable: boolean;
                                                    required: boolean;
                                                    created_at?: string;
                                                    updated_at?: string;
                                                    created_by?: {
                                                        id?: string;
                                                        avatar_url?: string;
                                                        name?: string;
                                                        email?: string;
                                                        department?: string;
                                                        city?: string;
                                                        country?: string;
                                                    };
                                                    updated_by?: {
                                                        id?: string;
                                                        avatar_url?: string;
                                                        name?: string;
                                                        email?: string;
                                                        department?: string;
                                                        city?: string;
                                                        country?: string;
                                                    };
                                                    dropdown_allow_multiple?: boolean;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket_customized_field&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    data?: { visible?: boolean };
                    params?: { page_token?: string; page_size?: number };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                next_page_token?: string;
                                items?: Array<{
                                    ticket_customized_field_id: string;
                                    helpdesk_id: string;
                                    key_name: string;
                                    display_name: string;
                                    position: string;
                                    field_type: string;
                                    description: string;
                                    visible: boolean;
                                    editable: boolean;
                                    required: boolean;
                                    created_at?: string;
                                    updated_at?: string;
                                    created_by?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                    updated_by?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                    dropdown_allow_multiple?: boolean;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/ticket_customized_fields`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        ticket: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket&apiName=update&version=v1 click to debug }
             */
            update: async (
                payload?: {
                    data?: {
                        status?: number;
                        tag_names?: Array<string>;
                        comment?: string;
                        customized_fields?: Array<{
                            id?: string;
                            value?: string;
                            key_name?: string;
                        }>;
                        ticket_type?: number;
                        solved?: number;
                        channel?: number;
                    };
                    path: { ticket_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/tickets/:ticket_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket&apiName=ticket_image&version=v1 click to debug }
             */
            ticketImage: async (
                payload?: {
                    params: {
                        ticket_id: string;
                        msg_id: string;
                        index?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await http
                    .request<any, any>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/ticket_images`,
                            path
                        ),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return {
                    writeFile: async (filePath: string) => {
                        await res.pipe(fs.createWriteStream(filePath));
                    },
                };
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket&apiName=answer_user_query&version=v1 click to debug }
             */
            answerUserQuery: async (
                payload?: {
                    data: {
                        event_id: string;
                        faqs?: Array<{ id?: string; score?: number }>;
                    };
                    path: { ticket_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/tickets/:ticket_id/answer_user_query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket&apiName=start_service&version=v1 click to debug }
             */
            startService: async (
                payload?: {
                    data: {
                        human_service?: boolean;
                        appointed_agents?: Array<string>;
                        open_id: string;
                        customized_info?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { chat_id: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/start_service`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket&apiName=customized_fields&version=v1 click to debug }
             */
            customizedFields: async (
                payload?: {
                    params?: { visible_only?: boolean };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_customized_fields?: Array<{
                                    user_customized_field_id?: string;
                                    id?: string;
                                    helpdesk_id?: string;
                                    key_name?: string;
                                    display_name?: string;
                                    position?: string;
                                    field_type?: string;
                                    description?: string;
                                    visible?: boolean;
                                    editable?: boolean;
                                    required?: boolean;
                                    created_at?: string;
                                    updated_at?: string;
                                }>;
                                ticket_customized_fields?: Array<{
                                    ticket_customized_field_id: string;
                                    helpdesk_id: string;
                                    key_name: string;
                                    display_name: string;
                                    position: string;
                                    field_type: string;
                                    description: string;
                                    visible: boolean;
                                    editable: boolean;
                                    required: boolean;
                                    created_at?: string;
                                    updated_at?: string;
                                    created_by?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                    updated_by?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                    dropdown_allow_multiple?: boolean;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/customized_fields`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    path: { ticket_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                ticket?: {
                                    ticket_id: string;
                                    helpdesk_id?: string;
                                    guest?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                    comments?: {
                                        content?: string;
                                        created_at?: number;
                                        id?: number;
                                        user_avatar_url?: string;
                                        user_name?: string;
                                        user_id?: number;
                                    };
                                    ticket_type?: number;
                                    status?: number;
                                    score?: number;
                                    created_at?: number;
                                    updated_at?: number;
                                    closed_at?: number;
                                    dissatisfaction_reason?: Array<string>;
                                    agents?: Array<{
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    }>;
                                    channel?: number;
                                    solve?: number;
                                    closed_by?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                    collaborators?: Array<{
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    }>;
                                    customized_fields?: Array<{
                                        id?: string;
                                        value?: string;
                                        key_name?: string;
                                        display_name?: string;
                                        position?: number;
                                        required?: boolean;
                                        editable?: boolean;
                                    }>;
                                    agent_service_duration?: number;
                                    agent_first_response_duration?: number;
                                    bot_service_duration?: number;
                                    agent_resolution_time?: number;
                                    actual_processing_time?: number;
                                    agent_entry_time?: number;
                                    agent_first_response_time?: number;
                                    agent_last_response_time?: number;
                                    agent_owner?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/tickets/:ticket_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        ticket_id?: string;
                        agent_id?: string;
                        closed_by_id?: string;
                        type?: number;
                        channel?: number;
                        solved?: number;
                        score?: number;
                        status_list?: number;
                        guest_name?: string;
                        guest_id?: string;
                        tags?: number;
                        page?: number;
                        page_size?: number;
                        create_time_start?: number;
                        create_time_end?: number;
                        update_time_start?: number;
                        update_time_end?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                total?: number;
                                tickets?: Array<{
                                    ticket_id: string;
                                    helpdesk_id?: string;
                                    guest?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                    comments?: {
                                        content?: string;
                                        created_at?: number;
                                        id?: number;
                                        user_avatar_url?: string;
                                        user_name?: string;
                                        user_id?: number;
                                    };
                                    ticket_type?: number;
                                    status?: number;
                                    score?: number;
                                    created_at?: number;
                                    updated_at?: number;
                                    closed_at?: number;
                                    dissatisfaction_reason?: Array<string>;
                                    agents?: Array<{
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    }>;
                                    channel?: number;
                                    solve?: number;
                                    closed_by?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                    collaborators?: Array<{
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    }>;
                                    customized_fields?: Array<{
                                        id?: string;
                                        value?: string;
                                        key_name?: string;
                                        display_name?: string;
                                        position?: number;
                                        required?: boolean;
                                        editable?: boolean;
                                    }>;
                                    agent_service_duration?: number;
                                    agent_first_response_duration?: number;
                                    bot_service_duration?: number;
                                    agent_resolution_time?: number;
                                    actual_processing_time?: number;
                                    agent_entry_time?: number;
                                    agent_first_response_time?: number;
                                    agent_last_response_time?: number;
                                    agent_owner?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/tickets`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        agentSchedules: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent.schedules&apiName=patch&version=v1 click to debug }
             */
            patch: async (
                payload?: {
                    data?: {
                        agent_schedule?: {
                            schedule?: Array<{
                                start_time?: string;
                                end_time?: string;
                                weekday?: number;
                            }>;
                            agent_skill_ids?: Array<string>;
                        };
                    };
                    path: { agent_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/agents/:agent_id/schedules`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent.schedules&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path?: { agent_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/agents/:agent_id/schedules`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent.schedules&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    path: { agent_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                agent_schedule?: {
                                    status?: number;
                                    agent?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        company_name?: string;
                                    };
                                    schedule?: Array<{
                                        start_time?: string;
                                        end_time?: string;
                                        weekday?: number;
                                    }>;
                                    agent_skills?: Array<{
                                        id?: string;
                                        name?: string;
                                        is_default?: boolean;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/agents/:agent_id/schedules`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        ticketMessage: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket.message&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: { msg_type: string; content: string };
                    path?: { ticket_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { message_id?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/tickets/:ticket_id/messages`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=ticket.message&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        time_start?: number;
                        time_end?: number;
                        page?: number;
                        page_size?: number;
                    };
                    path?: { ticket_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                messages?: Array<{
                                    id?: string;
                                    message_id?: string;
                                    message_type: string;
                                    created_at?: number;
                                    content: string;
                                    user_name?: string;
                                    avatar_url?: string;
                                    user_id?: string;
                                }>;
                                total?: number;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/tickets/:ticket_id/messages`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        faq: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=faq&apiName=faq_image&version=v1 click to debug }
             */
            faqImage: async (
                payload?: {
                    path?: { id?: string; image_key?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await http
                    .request<any, any>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/faqs/:id/image/:image_key`,
                            path
                        ),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return {
                    writeFile: async (filePath: string) => {
                        await res.pipe(fs.createWriteStream(filePath));
                    },
                };
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=faq&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path?: { id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/faqs/:id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=faq&apiName=patch&version=v1 click to debug }
             */
            patch: async (
                payload?: {
                    data?: {
                        faq?: {
                            category_id?: string;
                            question: string;
                            answer?: string;
                            answer_richtext?: string;
                            tags?: Array<string>;
                        };
                    };
                    path?: { id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/faqs/:id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=faq&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data?: {
                        faq?: {
                            category_id?: string;
                            question: string;
                            answer?: string;
                            answer_richtext?: string;
                            tags?: Array<string>;
                        };
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                faq?: {
                                    faq_id?: string;
                                    id?: string;
                                    helpdesk_id?: string;
                                    question?: string;
                                    answer?: string;
                                    answer_richtext?: Array<{
                                        content?: string;
                                        type?: string;
                                    }>;
                                    create_time?: number;
                                    update_time?: number;
                                    categories?: Array<{
                                        category_id: string;
                                        id: string;
                                        name: string;
                                        parent_id: string;
                                        helpdesk_id: string;
                                        language?: string;
                                    }>;
                                    tags?: Array<string>;
                                    expire_time?: number;
                                    update_user?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                    create_user?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/faqs`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=faq&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    path?: { id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                faq?: {
                                    faq_id?: string;
                                    id?: string;
                                    helpdesk_id?: string;
                                    question?: string;
                                    answer?: string;
                                    answer_richtext?: Array<{
                                        content?: string;
                                        type?: string;
                                    }>;
                                    create_time?: number;
                                    update_time?: number;
                                    categories?: Array<{
                                        category_id: string;
                                        id: string;
                                        name: string;
                                        parent_id: string;
                                        helpdesk_id: string;
                                        language?: string;
                                    }>;
                                    tags?: Array<string>;
                                    expire_time?: number;
                                    update_user?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                    create_user?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/faqs/:id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=faq&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: {
                        category_id?: string;
                        status?: string;
                        search?: string;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/helpdesk/v1/faqs`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                page_size?: number;
                                                total?: number;
                                                items?: Array<{
                                                    faq_id?: string;
                                                    id?: string;
                                                    helpdesk_id?: string;
                                                    question?: string;
                                                    answer?: string;
                                                    answer_richtext?: Array<{
                                                        content?: string;
                                                        type?: string;
                                                    }>;
                                                    create_time?: number;
                                                    update_time?: number;
                                                    categories?: Array<{
                                                        category_id: string;
                                                        id: string;
                                                        name: string;
                                                        parent_id: string;
                                                        helpdesk_id: string;
                                                        language?: string;
                                                    }>;
                                                    tags?: Array<string>;
                                                    expire_time?: number;
                                                    update_user?: {
                                                        id?: string;
                                                        avatar_url?: string;
                                                        name?: string;
                                                        department?: string;
                                                        city?: string;
                                                        country?: string;
                                                    };
                                                    create_user?: {
                                                        id?: string;
                                                        avatar_url?: string;
                                                        name?: string;
                                                        department?: string;
                                                        city?: string;
                                                        country?: string;
                                                    };
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=faq&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        category_id?: string;
                        status?: string;
                        search?: string;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                page_size?: number;
                                total?: number;
                                items?: Array<{
                                    faq_id?: string;
                                    id?: string;
                                    helpdesk_id?: string;
                                    question?: string;
                                    answer?: string;
                                    answer_richtext?: Array<{
                                        content?: string;
                                        type?: string;
                                    }>;
                                    create_time?: number;
                                    update_time?: number;
                                    categories?: Array<{
                                        category_id: string;
                                        id: string;
                                        name: string;
                                        parent_id: string;
                                        helpdesk_id: string;
                                        language?: string;
                                    }>;
                                    tags?: Array<string>;
                                    expire_time?: number;
                                    update_user?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                    create_user?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/faqs`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=faq&apiName=search&version=v1 click to debug }
             */
            searchWithIterator: async (
                payload?: {
                    params: {
                        query: string;
                        base64?: string;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/helpdesk/v1/faqs/search`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                items?: Array<{
                                                    faq_id?: string;
                                                    id?: string;
                                                    helpdesk_id?: string;
                                                    question?: string;
                                                    answer?: string;
                                                    answer_richtext?: Array<{
                                                        content?: string;
                                                        type?: string;
                                                    }>;
                                                    create_time?: number;
                                                    update_time?: number;
                                                    categories?: Array<{
                                                        category_id: string;
                                                        id: string;
                                                        name: string;
                                                        parent_id: string;
                                                        helpdesk_id: string;
                                                        language?: string;
                                                    }>;
                                                    tags?: Array<string>;
                                                    expire_time?: number;
                                                    update_user?: {
                                                        id?: string;
                                                        avatar_url?: string;
                                                        name?: string;
                                                        department?: string;
                                                        city?: string;
                                                        country?: string;
                                                    };
                                                    create_user?: {
                                                        id?: string;
                                                        avatar_url?: string;
                                                        name?: string;
                                                        department?: string;
                                                        city?: string;
                                                        country?: string;
                                                    };
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=faq&apiName=search&version=v1 click to debug }
             */
            search: async (
                payload?: {
                    params: {
                        query: string;
                        base64?: string;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    faq_id?: string;
                                    id?: string;
                                    helpdesk_id?: string;
                                    question?: string;
                                    answer?: string;
                                    answer_richtext?: Array<{
                                        content?: string;
                                        type?: string;
                                    }>;
                                    create_time?: number;
                                    update_time?: number;
                                    categories?: Array<{
                                        category_id: string;
                                        id: string;
                                        name: string;
                                        parent_id: string;
                                        helpdesk_id: string;
                                        language?: string;
                                    }>;
                                    tags?: Array<string>;
                                    expire_time?: number;
                                    update_user?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                    create_user?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        department?: string;
                                        city?: string;
                                        country?: string;
                                    };
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/faqs/search`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        agentSkillRule: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent_skill_rule&apiName=list&version=v1 click to debug }
             */
            list: async (payload?: {}, options?: IRequestOptions) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                rules?: Array<{
                                    id?: string;
                                    operator_options?: Array<number>;
                                    operand?: string;
                                    category?: number;
                                    display_name?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/agent_skill_rules`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        agentSkill: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent_skill&apiName=patch&version=v1 click to debug }
             */
            patch: async (
                payload?: {
                    data?: {
                        agent_skill?: {
                            name?: string;
                            rules?: Array<{
                                id?: string;
                                selected_operator?: number;
                                operator_options?: Array<number>;
                                operand?: string;
                            }>;
                            agent_ids?: Array<string>;
                        };
                    };
                    path: { agent_skill_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/agent_skills/:agent_skill_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent_skill&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path?: { agent_skill_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/agent_skills/:agent_skill_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent_skill&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    path?: { agent_skill_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                agent_skill?: {
                                    id?: string;
                                    name?: string;
                                    rules?: Array<{
                                        id?: string;
                                        selected_operator?: number;
                                        operator_options?: Array<number>;
                                        operand?: string;
                                        category?: number;
                                        display_name?: string;
                                    }>;
                                    agent_ids?: Array<string>;
                                    is_default?: boolean;
                                    agents?: Array<{
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/agent_skills/:agent_skill_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent_skill&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data?: {
                        name?: string;
                        rules?: Array<{
                            id?: string;
                            selected_operator?: number;
                            operand?: string;
                            category?: number;
                        }>;
                        agent_ids?: Array<string>;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { agent_skill_id?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/agent_skills`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent_skill&apiName=list&version=v1 click to debug }
             */
            list: async (payload?: {}, options?: IRequestOptions) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                agent_skills?: Array<{
                                    id?: string;
                                    name?: string;
                                    agent_ids?: Array<string>;
                                    is_default?: boolean;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/agent_skills`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        event: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=event&apiName=subscribe&version=v1 click to debug }
             */
            subscribe: async (
                payload?: {
                    data: { events: Array<{ type: string; subtype: string }> };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/events/subscribe`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=event&apiName=unsubscribe&version=v1 click to debug }
             */
            unsubscribe: async (
                payload?: {
                    data: { events: Array<{ type: string; subtype: string }> };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/events/unsubscribe`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        notification: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=notification&apiName=execute_send&version=v1 click to debug }
             */
            executeSend: async (
                payload?: {
                    data: { send_at: string };
                    path: { notification_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/notifications/:notification_id/execute_send`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=notification&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { notification_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                notification?: {
                                    id?: string;
                                    job_name?: string;
                                    status?: number;
                                    create_user?: {
                                        user_id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                    };
                                    created_at?: string;
                                    update_user?: {
                                        user_id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                    };
                                    updated_at?: string;
                                    target_user_count?: number;
                                    sent_user_count?: number;
                                    read_user_count?: number;
                                    send_at?: string;
                                    push_content?: string;
                                    push_type?: number;
                                    push_scope_type?: number;
                                    new_staff_scope_type?: number;
                                    new_staff_scope_department_list?: Array<{
                                        department_id?: string;
                                        name?: string;
                                    }>;
                                    user_list?: Array<{
                                        user_id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                    }>;
                                    department_list?: Array<{
                                        department_id?: string;
                                        name?: string;
                                    }>;
                                    chat_list?: Array<{
                                        chat_id?: string;
                                        name?: string;
                                    }>;
                                    ext?: string;
                                };
                                approval_app_link?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/notifications/:notification_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=notification&apiName=preview&version=v1 click to debug }
             */
            preview: async (
                payload?: {
                    path: { notification_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/notifications/:notification_id/preview`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=notification&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data?: {
                        id?: string;
                        job_name?: string;
                        status?: number;
                        create_user?: {
                            user_id?: string;
                            avatar_url?: string;
                            name?: string;
                        };
                        created_at?: string;
                        update_user?: {
                            user_id?: string;
                            avatar_url?: string;
                            name?: string;
                        };
                        updated_at?: string;
                        target_user_count?: number;
                        sent_user_count?: number;
                        read_user_count?: number;
                        send_at?: string;
                        push_content?: string;
                        push_type?: number;
                        push_scope_type?: number;
                        new_staff_scope_type?: number;
                        new_staff_scope_department_list?: Array<{
                            department_id?: string;
                            name?: string;
                        }>;
                        user_list?: Array<{
                            user_id?: string;
                            avatar_url?: string;
                            name?: string;
                        }>;
                        department_list?: Array<{
                            department_id?: string;
                            name?: string;
                        }>;
                        chat_list?: Array<{ chat_id?: string; name?: string }>;
                        ext?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                notification_id?: string;
                                status?: number;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/notifications`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=notification&apiName=patch&version=v1 click to debug }
             */
            patch: async (
                payload?: {
                    data?: {
                        id?: string;
                        job_name?: string;
                        status?: number;
                        create_user?: {
                            user_id?: string;
                            avatar_url?: string;
                            name?: string;
                        };
                        created_at?: string;
                        update_user?: {
                            user_id?: string;
                            avatar_url?: string;
                            name?: string;
                        };
                        updated_at?: string;
                        target_user_count?: number;
                        sent_user_count?: number;
                        read_user_count?: number;
                        send_at?: string;
                        push_content?: string;
                        push_type?: number;
                        push_scope_type?: number;
                        new_staff_scope_type?: number;
                        new_staff_scope_department_list?: Array<{
                            department_id?: string;
                            name?: string;
                        }>;
                        user_list?: Array<{
                            user_id?: string;
                            avatar_url?: string;
                            name?: string;
                        }>;
                        department_list?: Array<{
                            department_id?: string;
                            name?: string;
                        }>;
                        chat_list?: Array<{ chat_id?: string; name?: string }>;
                        ext?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { notification_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/notifications/:notification_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=notification&apiName=cancel_send&version=v1 click to debug }
             */
            cancelSend: async (
                payload?: {
                    data: { is_recall: boolean };
                    path: { notification_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/notifications/:notification_id/cancel_send`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=notification&apiName=cancel_approve&version=v1 click to debug }
             */
            cancelApprove: async (
                payload?: {
                    path: { notification_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/notifications/:notification_id/cancel_approve`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=notification&apiName=submit_approve&version=v1 click to debug }
             */
            submitApprove: async (
                payload?: {
                    data: { reason: string };
                    path: { notification_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { has_access?: boolean };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/notifications/:notification_id/submit_approve`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        agent: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent&apiName=patch&version=v1 click to debug }
             */
            patch: async (
                payload?: {
                    data?: { status?: number };
                    path: { agent_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/agents/:agent_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent&apiName=agent_email&version=v1 click to debug }
             */
            agentEmail: async (payload?: {}, options?: IRequestOptions) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { agents?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/agent_emails`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        category: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=category&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path: { id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/categories/:id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=category&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        lang?: string;
                        order_by?: number;
                        asc?: boolean;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                categories?: Array<{
                                    category_id: string;
                                    id: string;
                                    name: string;
                                    parent_id: string;
                                    helpdesk_id: string;
                                    language?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/categories`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=category&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        name: string;
                        parent_id: string;
                        language?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                category?: {
                                    category_id: string;
                                    id: string;
                                    name: string;
                                    parent_id: string;
                                    helpdesk_id: string;
                                    language?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/categories`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=category&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    path: { id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                category_id: string;
                                id: string;
                                name: string;
                                helpdesk_id: string;
                                language?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/categories/:id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=category&apiName=patch&version=v1 click to debug }
             */
            patch: async (
                payload?: {
                    data?: { name?: string; parent_id?: string };
                    path: { id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/categories/:id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        agentSchedule: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent_schedule&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data?: {
                        agent_schedules?: Array<{
                            agent_id?: string;
                            schedule?: Array<{
                                start_time?: string;
                                end_time?: string;
                                weekday?: number;
                            }>;
                            agent_skill_ids?: Array<string>;
                        }>;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/agent_schedules`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=agent_schedule&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params: { status: number };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                agent_schedules?: Array<{
                                    status?: number;
                                    agent?: {
                                        id?: string;
                                        avatar_url?: string;
                                        name?: string;
                                        email?: string;
                                        department?: string;
                                        company_name?: string;
                                    };
                                    schedule?: Array<{
                                        start_time?: string;
                                        end_time?: string;
                                        weekday?: number;
                                    }>;
                                    agent_skills?: Array<{
                                        id?: string;
                                        name?: string;
                                        is_default?: boolean;
                                    }>;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/agent_schedules`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        botMessage: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=helpdesk&resource=bot.message&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        msg_type: "text" | "post" | "image" | "interactive";
                        content: string;
                        receiver_id: string;
                        receive_type?: "chat" | "user";
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { message_id?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/helpdesk/v1/message`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };

    hire = {
        attachment: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=attachment&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    path: { attachment_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                attachment?: {
                                    id?: string;
                                    url?: string;
                                    name?: string;
                                    mime?: string;
                                    create_time?: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/attachments/:attachment_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=attachment&apiName=preview&version=v1 click to debug }
             */
            preview: async (
                payload?: {
                    path: { attachment_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        { code?: number; msg?: string; data?: { url: string } }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/attachments/:attachment_id/preview`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        jobProcess: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=job_process&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    id?: string;
                                    zh_name?: string;
                                    en_name?: string;
                                    type?: number;
                                    stage_list?: Array<{
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                        type?: number;
                                    }>;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/job_processes`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        application: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=application&apiName=terminate&version=v1 click to debug }
             */
            terminate: async (
                payload?: {
                    data: {
                        termination_type: number;
                        termination_reason_list?: Array<string>;
                        termination_reason_note?: string;
                    };
                    path: { application_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/applications/:application_id/terminate`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=application&apiName=offer&version=v1 click to debug }
             */
            offer: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { application_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                offer?: {
                                    id?: string;
                                    application_id?: string;
                                    basic_info?: {
                                        offer_type?: number;
                                        remark?: string;
                                        expire_time?: number;
                                        owner_user_id?: string;
                                        creator_user_id?: string;
                                        employee_type?: {
                                            id?: string;
                                            zh_name?: string;
                                            en_name?: string;
                                        };
                                        create_time?: string;
                                        leader_user_id?: string;
                                        onboard_date?: string;
                                        department_id?: string;
                                        probation_month?: number;
                                        contract_year?: number;
                                        recruitment_type?: {
                                            id?: string;
                                            zh_name?: string;
                                            en_name?: string;
                                        };
                                        sequence?: {
                                            id?: string;
                                            zh_name?: string;
                                            en_name?: string;
                                        };
                                        level?: {
                                            id?: string;
                                            zh_name?: string;
                                            en_name?: string;
                                        };
                                        onboard_address?: {
                                            id?: string;
                                            zh_name?: string;
                                            en_name?: string;
                                            district?: {
                                                zh_name?: string;
                                                en_name?: string;
                                                code?: string;
                                                location_type?: number;
                                            };
                                            city?: {
                                                zh_name?: string;
                                                en_name?: string;
                                                code?: string;
                                                location_type?: number;
                                            };
                                            state?: {
                                                zh_name?: string;
                                                en_name?: string;
                                                code?: string;
                                                location_type?: number;
                                            };
                                            country?: {
                                                zh_name?: string;
                                                en_name?: string;
                                                code?: string;
                                                location_type?: number;
                                            };
                                        };
                                        work_address?: {
                                            id?: string;
                                            zh_name?: string;
                                            en_name?: string;
                                            district?: {
                                                zh_name?: string;
                                                en_name?: string;
                                                code?: string;
                                                location_type?: number;
                                            };
                                            city?: {
                                                zh_name?: string;
                                                en_name?: string;
                                                code?: string;
                                                location_type?: number;
                                            };
                                            state?: {
                                                zh_name?: string;
                                                en_name?: string;
                                                code?: string;
                                                location_type?: number;
                                            };
                                            country?: {
                                                zh_name?: string;
                                                en_name?: string;
                                                code?: string;
                                                location_type?: number;
                                            };
                                        };
                                        customize_info_list?: Array<{
                                            object_id?: string;
                                            customize_value?: string;
                                        }>;
                                    };
                                    salary_plan?: {
                                        currency?: string;
                                        basic_salary?: string;
                                        probation_salary_percentage?: string;
                                        award_salary_multiple?: string;
                                        option_shares?: string;
                                        quarterly_bonus?: string;
                                        half_year_bonus?: string;
                                        total_annual_cash?: string;
                                        customize_info_list?: Array<{
                                            object_id?: string;
                                            customize_value?: string;
                                        }>;
                                    };
                                    schema_id?: string;
                                    offer_status?: number;
                                    job_info?: {
                                        job_id?: string;
                                        job_name?: string;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/applications/:application_id/offer`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=application&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        process_id?: string;
                        stage_id?: string;
                        talent_id?: string;
                        active_status?: string;
                        job_id?: string;
                        page_token?: string;
                        page_size?: number;
                        update_start_time?: string;
                        update_end_time?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<string>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/applications`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=application&apiName=transfer_onboard&version=v1 click to debug }
             */
            transferOnboard: async (
                payload?: {
                    data?: {
                        actual_onboard_time?: number;
                        expected_conversion_time?: number;
                        job_requirement_id?: string;
                        operator_id?: string;
                        onboard_city_code?: string;
                        department?: string;
                        leader?: string;
                        sequence?: string;
                        level?: string;
                        employee_type?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { application_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                employee?: {
                                    id?: string;
                                    application_id?: string;
                                    onboard_status?: number;
                                    conversion_status?: number;
                                    onboard_time?: number;
                                    expected_conversion_time?: number;
                                    actual_conversion_time?: number;
                                    overboard_time?: number;
                                    overboard_note?: string;
                                    onboard_city_code?: string;
                                    department?: string;
                                    leader?: string;
                                    sequence?: string;
                                    level?: string;
                                    employee_type?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/applications/:application_id/transfer_onboard`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=application&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        talent_id: string;
                        job_id: string;
                        resume_source_id?: string;
                        application_preferred_city_code_list?: Array<string>;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        { code?: number; msg?: string; data?: { id?: string } }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/applications`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=application&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    path: { application_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                application?: {
                                    id?: string;
                                    job_id?: string;
                                    talent_id?: string;
                                    resume_resource_id?: string;
                                    stage?: {
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                        type?: number;
                                    };
                                    active_status?: number;
                                    delivery_type?: number;
                                    resume_source_info?: {
                                        id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        resume_source_type?: number;
                                    };
                                    website_resume_source?: {
                                        website_id?: string;
                                        website_name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        channel?: {
                                            channel_id?: string;
                                            channel_name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                        };
                                    };
                                    talent_attachment_resume_id?: string;
                                    create_time?: string;
                                    modify_time?: string;
                                    stage_time_list?: Array<{
                                        stage_id?: string;
                                        enter_time?: string;
                                        exit_time?: string;
                                    }>;
                                    termination_type?: number;
                                    termination_reason_list?: Array<string>;
                                    termination_reason_note?: string;
                                    application_preferred_city_list?: Array<{
                                        code?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/applications/:application_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        offerSchema: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=offer_schema&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    path: { offer_schema_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                id?: string;
                                scenario?: number;
                                version?: number;
                                object_list?: Array<{
                                    id?: string;
                                    name?: { zh_cn?: string; en_us?: string };
                                    type?: string;
                                    is_customized?: boolean;
                                    option_list?: Array<{
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        index?: number;
                                        active_status?: number;
                                    }>;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/offer_schemas/:offer_schema_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        job: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=job&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_admin_id";
                    };
                    path: { job_id: number };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                job?: {
                                    id?: string;
                                    title?: string;
                                    description?: string;
                                    code?: string;
                                    requirement?: string;
                                    recruitment_type?: {
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                        active_status?: number;
                                    };
                                    department?: {
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                    };
                                    city?: {
                                        city_code?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                    };
                                    min_job_level?: {
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                        active_status?: number;
                                    };
                                    max_job_level?: {
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                        active_status?: number;
                                    };
                                    highlight_list?: Array<{
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                    }>;
                                    job_category?: {
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                        active_status?: number;
                                    };
                                    job_type?: {
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                    };
                                    active_status?: number;
                                    create_user_id?: string;
                                    create_time?: number;
                                    update_time?: number;
                                    process_type?: number;
                                    process_id?: string;
                                    process_name?: string;
                                    process_en_name?: string;
                                    customized_data_list?: Array<{
                                        object_id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        object_type?: number;
                                        value?: {
                                            content?: string;
                                            option?: {
                                                key?: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                            };
                                            option_list?: Array<{
                                                key?: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                            }>;
                                            time_range?: {
                                                start_time?: string;
                                                end_time?: string;
                                            };
                                            time?: string;
                                            number?: string;
                                        };
                                    }>;
                                    job_function?: {
                                        id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    };
                                    subject?: {
                                        id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    };
                                    head_count?: number;
                                    experience?: number;
                                    expiry_time?: number;
                                    min_salary?: number;
                                    max_salary?: number;
                                    required_degree?: number;
                                    city_list?: Array<{
                                        code?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/jobs/:job_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        jobManager: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=job.manager&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_admin_id";
                    };
                    path: { job_id: string; manager_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                info?: {
                                    id?: string;
                                    recruiter_id?: string;
                                    hiring_manager_id_list?: Array<string>;
                                    assistant_id_list?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/jobs/:job_id/managers/:manager_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        note: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=note&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_admin_id";
                    };
                    path: { note_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                note?: {
                                    id?: string;
                                    talent_id: string;
                                    application_id?: string;
                                    is_private?: boolean;
                                    create_time?: number;
                                    modify_time?: number;
                                    creator_id?: string;
                                    content: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/notes/:note_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=note&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params: {
                        page_size?: number;
                        page_token?: string;
                        talent_id: string;
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_admin_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id?: string;
                                    talent_id: string;
                                    application_id?: string;
                                    is_private?: boolean;
                                    create_time?: number;
                                    modify_time?: number;
                                    creator_id?: string;
                                    content: string;
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/notes`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=note&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        talent_id: string;
                        application_id?: string;
                        creator_id?: string;
                        content: string;
                        privacy?: number;
                    };
                    params?: {
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_admin_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                note?: {
                                    id?: string;
                                    talent_id: string;
                                    application_id?: string;
                                    is_private?: boolean;
                                    create_time?: number;
                                    modify_time?: number;
                                    creator_id?: string;
                                    content: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/notes`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=note&apiName=patch&version=v1 click to debug }
             */
            patch: async (
                payload?: {
                    data: { content: string };
                    params?: {
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_admin_id";
                    };
                    path: { note_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                note?: {
                                    id?: string;
                                    talent_id: string;
                                    application_id?: string;
                                    is_private?: boolean;
                                    create_time?: number;
                                    modify_time?: number;
                                    creator_id?: string;
                                    content: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/notes/:note_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        referral: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=referral&apiName=get_by_application&version=v1 click to debug }
             */
            getByApplication: async (
                payload?: {
                    params: {
                        application_id: string;
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_admin_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                referral?: {
                                    id: string;
                                    application_id: string;
                                    create_time: number;
                                    referral_user_id: string;
                                    referral_user?: {
                                        id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/referrals/get_by_application`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        employee: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=employee&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { employee_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                employee?: {
                                    id?: string;
                                    application_id?: string;
                                    onboard_status?: number;
                                    conversion_status?: number;
                                    onboard_time?: number;
                                    expected_conversion_time?: number;
                                    actual_conversion_time?: number;
                                    overboard_time?: number;
                                    overboard_note?: string;
                                    onboard_city_code?: string;
                                    department?: string;
                                    leader?: string;
                                    sequence?: string;
                                    level?: string;
                                    employee_type?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/employees/:employee_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=employee&apiName=patch&version=v1 click to debug }
             */
            patch: async (
                payload?: {
                    data: {
                        operation: number;
                        conversion_info?: { actual_conversion_time?: number };
                        overboard_info?: {
                            actual_overboard_time?: number;
                            overboard_note?: string;
                        };
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { employee_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                employee?: {
                                    id?: string;
                                    application_id?: string;
                                    onboard_status?: number;
                                    conversion_status?: number;
                                    onboard_time?: number;
                                    expected_conversion_time?: number;
                                    actual_conversion_time?: number;
                                    overboard_time?: number;
                                    overboard_note?: string;
                                    onboard_city_code?: string;
                                    department?: string;
                                    leader?: string;
                                    sequence?: string;
                                    level?: string;
                                    employee_type?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/employees/:employee_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=employee&apiName=get_by_application&version=v1 click to debug }
             */
            getByApplication: async (
                payload?: {
                    params: {
                        application_id: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                employee?: {
                                    id?: string;
                                    application_id?: string;
                                    onboard_status?: number;
                                    conversion_status?: number;
                                    onboard_time?: number;
                                    expected_conversion_time?: number;
                                    actual_conversion_time?: number;
                                    overboard_time?: number;
                                    overboard_note?: string;
                                    onboard_city_code?: string;
                                    department?: string;
                                    leader?: string;
                                    sequence?: string;
                                    level?: string;
                                    employee_type?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/employees/get_by_application`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        talent: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=talent&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    path: { talent_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                talent?: {
                                    id?: string;
                                    is_in_agency_period?: boolean;
                                    is_onboarded?: boolean;
                                    basic_info?: {
                                        name: string;
                                        mobile?: string;
                                        mobile_code?: string;
                                        mobile_country_code?: string;
                                        email?: string;
                                        experience_years?: number;
                                        age?: number;
                                        nationality?: {
                                            nationality_code?: string;
                                            zh_name?: string;
                                            en_name?: string;
                                        };
                                        gender?: number;
                                        current_city?: {
                                            city_code?: string;
                                            zh_name?: string;
                                            en_name?: string;
                                        };
                                        hometown_city?: {
                                            city_code?: string;
                                            zh_name?: string;
                                            en_name?: string;
                                        };
                                        preferred_city_list?: Array<{
                                            city_code?: string;
                                            zh_name?: string;
                                            en_name?: string;
                                        }>;
                                        identification_type?: number;
                                        identification_number?: string;
                                        identification?: {
                                            identification_type?: number;
                                            identification_number?: string;
                                        };
                                        birthday?: number;
                                        creator_id?: string;
                                        marital_status?: number;
                                        current_home_address?: string;
                                        customized_data_list?: Array<{
                                            object_id?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            object_type?: number;
                                            value?: {
                                                content?: string;
                                                option?: {
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                };
                                                option_list?: Array<{
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                }>;
                                                time_range?: {
                                                    start_time?: string;
                                                    end_time?: string;
                                                };
                                                time?: string;
                                                number?: string;
                                            };
                                        }>;
                                        modify_time?: string;
                                    };
                                    education_list?: Array<{
                                        id?: string;
                                        degree?: number;
                                        school?: string;
                                        field_of_study?: string;
                                        start_time?: string;
                                        end_time?: string;
                                        education_type?: number;
                                        academic_ranking?: number;
                                        tag_list?: Array<number>;
                                        customized_data_list?: Array<{
                                            object_id?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            object_type?: number;
                                            value?: {
                                                content?: string;
                                                option?: {
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                };
                                                option_list?: Array<{
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                }>;
                                                time_range?: {
                                                    start_time?: string;
                                                    end_time?: string;
                                                };
                                                time?: string;
                                                number?: string;
                                            };
                                        }>;
                                    }>;
                                    career_list?: Array<{
                                        id?: string;
                                        company?: string;
                                        title?: string;
                                        desc?: string;
                                        start_time?: string;
                                        end_time?: string;
                                        career_type?: number;
                                        tag_list?: Array<number>;
                                        customized_data_list?: Array<{
                                            object_id?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            object_type?: number;
                                            value?: {
                                                content?: string;
                                                option?: {
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                };
                                                option_list?: Array<{
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                }>;
                                                time_range?: {
                                                    start_time?: string;
                                                    end_time?: string;
                                                };
                                                time?: string;
                                                number?: string;
                                            };
                                        }>;
                                    }>;
                                    project_list?: Array<{
                                        id?: string;
                                        name?: string;
                                        role?: string;
                                        link?: string;
                                        desc?: string;
                                        start_time?: string;
                                        end_time?: string;
                                        customized_data_list?: Array<{
                                            object_id?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            object_type?: number;
                                            value?: {
                                                content?: string;
                                                option?: {
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                };
                                                option_list?: Array<{
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                }>;
                                                time_range?: {
                                                    start_time?: string;
                                                    end_time?: string;
                                                };
                                                time?: string;
                                                number?: string;
                                            };
                                        }>;
                                    }>;
                                    works_list?: Array<{
                                        id?: string;
                                        link?: string;
                                        desc?: string;
                                        name?: string;
                                        customized_data_list?: Array<{
                                            object_id?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            object_type?: number;
                                            value?: {
                                                content?: string;
                                                option?: {
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                };
                                                option_list?: Array<{
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                }>;
                                                time_range?: {
                                                    start_time?: string;
                                                    end_time?: string;
                                                };
                                                time?: string;
                                                number?: string;
                                            };
                                        }>;
                                    }>;
                                    award_list?: Array<{
                                        id?: string;
                                        title?: string;
                                        award_time?: string;
                                        desc?: string;
                                        customized_data_list?: Array<{
                                            object_id?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            object_type?: number;
                                            value?: {
                                                content?: string;
                                                option?: {
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                };
                                                option_list?: Array<{
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                }>;
                                                time_range?: {
                                                    start_time?: string;
                                                    end_time?: string;
                                                };
                                                time?: string;
                                                number?: string;
                                            };
                                        }>;
                                    }>;
                                    language_list?: Array<{
                                        id?: string;
                                        language?: number;
                                        proficiency?: number;
                                        customized_data_list?: Array<{
                                            object_id?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            object_type?: number;
                                            value?: {
                                                content?: string;
                                                option?: {
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                };
                                                option_list?: Array<{
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                }>;
                                                time_range?: {
                                                    start_time?: string;
                                                    end_time?: string;
                                                };
                                                time?: string;
                                                number?: string;
                                            };
                                        }>;
                                    }>;
                                    sns_list?: Array<{
                                        id?: string;
                                        sns_type?: number;
                                        link?: string;
                                        customized_data_list?: Array<{
                                            object_id?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            object_type?: number;
                                            value?: {
                                                content?: string;
                                                option?: {
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                };
                                                option_list?: Array<{
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                }>;
                                                time_range?: {
                                                    start_time?: string;
                                                    end_time?: string;
                                                };
                                                time?: string;
                                                number?: string;
                                            };
                                        }>;
                                    }>;
                                    resume_source_list?: Array<{
                                        id?: string;
                                        zh_name?: string;
                                        en_name?: string;
                                    }>;
                                    interview_registration_list?: Array<{
                                        id?: string;
                                        registration_time?: number;
                                    }>;
                                    resume_attachment_id_list?: Array<string>;
                                    customized_data_list?: Array<{
                                        object_id?: string;
                                        name?: {
                                            zh_cn?: string;
                                            en_us?: string;
                                        };
                                        object_type?: number;
                                        children?: Array<{
                                            object_id?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            object_type?: number;
                                            value?: {
                                                content?: string;
                                                option?: {
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                };
                                                option_list?: Array<{
                                                    key?: string;
                                                    name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                    };
                                                }>;
                                                time_range?: {
                                                    start_time?: string;
                                                    end_time?: string;
                                                };
                                                time?: string;
                                                number?: string;
                                            };
                                        }>;
                                    }>;
                                    top_degree?: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/talents/:talent_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        resumeSource: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=resume_source&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/hire/v1/resume_sources`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    id?: string;
                                                    zh_name?: string;
                                                    en_name?: string;
                                                    active_status?: number;
                                                    resume_source_type?: number;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=resume_source&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id?: string;
                                    zh_name?: string;
                                    en_name?: string;
                                    active_status?: number;
                                    resume_source_type?: number;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/resume_sources`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        applicationInterview: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=hire&resource=application.interview&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params: {
                        page_size: number;
                        page_token?: string;
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_admin_id";
                    };
                    path: { application_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                page_token?: string;
                                has_more?: boolean;
                                items?: Array<{
                                    id?: string;
                                    begin_time?: number;
                                    end_time?: number;
                                    round?: number;
                                    stage_id?: string;
                                    interview_record_list?: Array<{
                                        id?: string;
                                        user_id?: string;
                                        content?: string;
                                        min_job_level_id?: string;
                                        max_job_level_id?: string;
                                        commit_status?: number;
                                        feedback_submit_time?: number;
                                        conclusion?: number;
                                        interview_score?: {
                                            id?: string;
                                            level?: number;
                                            zh_name?: string;
                                            zh_description?: string;
                                            en_name?: string;
                                            en_description?: string;
                                        };
                                        interviewer?: {
                                            id?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                        };
                                        dimension_assessment_list?: Array<{
                                            id?: string;
                                            name?: {
                                                zh_cn?: string;
                                                en_us?: string;
                                            };
                                            content?: string;
                                            dimension_id?: string;
                                            dimension_score?: {
                                                id?: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                            };
                                            dimension_score_list?: Array<{
                                                id?: string;
                                                name?: {
                                                    zh_cn?: string;
                                                    en_us?: string;
                                                };
                                            }>;
                                            dimension_type?: number;
                                        }>;
                                    }>;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/hire/v1/applications/:application_id/interviews`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };

    human_authentication = {
        identity: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=human_authentication&resource=identity&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        identity_name: string;
                        identity_code: string;
                        mobile?: string;
                    };
                    params: {
                        user_id: string;
                        user_id_type?: "open_id" | "user_id" | "union_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { verify_uid: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/human_authentication/v1/identities`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };

    im = {
        message: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params: {
                        container_id_type: string;
                        container_id: string;
                        start_time?: string;
                        end_time?: string;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/im/v1/messages`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                items?: Array<{
                                                    message_id?: string;
                                                    root_id?: string;
                                                    parent_id?: string;
                                                    msg_type?: string;
                                                    create_time?: string;
                                                    update_time?: string;
                                                    deleted?: boolean;
                                                    updated?: boolean;
                                                    chat_id?: string;
                                                    sender?: {
                                                        id: string;
                                                        id_type: string;
                                                        sender_type: string;
                                                        tenant_key?: string;
                                                    };
                                                    body?: { content: string };
                                                    mentions?: Array<{
                                                        key: string;
                                                        id: string;
                                                        id_type: string;
                                                        name: string;
                                                        tenant_key?: string;
                                                    }>;
                                                    upper_message_id?: string;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params: {
                        container_id_type: string;
                        container_id: string;
                        start_time?: string;
                        end_time?: string;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    message_id?: string;
                                    root_id?: string;
                                    parent_id?: string;
                                    msg_type?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    deleted?: boolean;
                                    updated?: boolean;
                                    chat_id?: string;
                                    sender?: {
                                        id: string;
                                        id_type: string;
                                        sender_type: string;
                                        tenant_key?: string;
                                    };
                                    body?: { content: string };
                                    mentions?: Array<{
                                        key: string;
                                        id: string;
                                        id_type: string;
                                        name: string;
                                        tenant_key?: string;
                                    }>;
                                    upper_message_id?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/messages`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    path: { message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    message_id?: string;
                                    root_id?: string;
                                    parent_id?: string;
                                    msg_type?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    deleted?: boolean;
                                    updated?: boolean;
                                    chat_id?: string;
                                    sender?: {
                                        id: string;
                                        id_type: string;
                                        sender_type: string;
                                        tenant_key?: string;
                                    };
                                    body?: { content: string };
                                    mentions?: Array<{
                                        key: string;
                                        id: string;
                                        id_type: string;
                                        name: string;
                                        tenant_key?: string;
                                    }>;
                                    upper_message_id?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/messages/:message_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path: { message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/messages/:message_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=read_users&version=v1 click to debug }
             */
            readUsers: async (
                payload?: {
                    params: {
                        user_id_type: "user_id" | "union_id" | "open_id";
                        page_size?: number;
                        page_token?: string;
                    };
                    path: { message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    user_id_type: string;
                                    user_id: string;
                                    timestamp: string;
                                    tenant_key?: string;
                                }>;
                                has_more: boolean;
                                page_token?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/messages/:message_id/read_users`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=urgent_app&version=v1 click to debug }
             */
            urgentApp: async (
                payload?: {
                    data: { user_id_list: Array<string> };
                    params: {
                        user_id_type: "user_id" | "union_id" | "open_id";
                    };
                    path: { message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { invalid_user_id_list: Array<string> };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/messages/:message_id/urgent_app`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=urgent_phone&version=v1 click to debug }
             */
            urgentPhone: async (
                payload?: {
                    data: { user_id_list: Array<string> };
                    params: {
                        user_id_type: "user_id" | "union_id" | "open_id";
                    };
                    path: { message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { invalid_user_id_list: Array<string> };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/messages/:message_id/urgent_phone`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=urgent_sms&version=v1 click to debug }
             */
            urgentSms: async (
                payload?: {
                    data: { user_id_list: Array<string> };
                    params: {
                        user_id_type: "user_id" | "union_id" | "open_id";
                    };
                    path: { message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { invalid_user_id_list: Array<string> };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/messages/:message_id/urgent_sms`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=patch&version=v1 click to debug }
             */
            patch: async (
                payload?: {
                    data: { content: string };
                    path: { message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/messages/:message_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=reply&version=v1 click to debug }
             */
            reply: async (
                payload?: {
                    data: { content: string; msg_type: string; uuid?: string };
                    path: { message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                message_id?: string;
                                root_id?: string;
                                parent_id?: string;
                                msg_type?: string;
                                create_time?: string;
                                update_time?: string;
                                deleted?: boolean;
                                updated?: boolean;
                                chat_id?: string;
                                sender?: {
                                    id: string;
                                    id_type: string;
                                    sender_type: string;
                                    tenant_key?: string;
                                };
                                body?: { content: string };
                                mentions?: Array<{
                                    key: string;
                                    id: string;
                                    id_type: string;
                                    name: string;
                                    tenant_key?: string;
                                }>;
                                upper_message_id?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/messages/:message_id/reply`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        receive_id: string;
                        content: string;
                        msg_type: string;
                        uuid?: string;
                    };
                    params: {
                        receive_id_type:
                            | "open_id"
                            | "user_id"
                            | "union_id"
                            | "email"
                            | "chat_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                message_id?: string;
                                root_id?: string;
                                parent_id?: string;
                                msg_type?: string;
                                create_time?: string;
                                update_time?: string;
                                deleted?: boolean;
                                updated?: boolean;
                                chat_id?: string;
                                sender?: {
                                    id: string;
                                    id_type: string;
                                    sender_type: string;
                                    tenant_key?: string;
                                };
                                body?: { content: string };
                                mentions?: Array<{
                                    key: string;
                                    id: string;
                                    id_type: string;
                                    name: string;
                                    tenant_key?: string;
                                }>;
                                upper_message_id?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/messages`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        image: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=image&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    path: { image_key: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await http
                    .request<any, any>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/images/:image_key`,
                            path
                        ),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return {
                    writeFile: async (filePath: string) => {
                        await res.pipe(fs.createWriteStream(filePath));
                    },
                };
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=image&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: { image_type: "message" | "avatar"; image: Buffer };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { image_key?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/images`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers: {
                            ...headers,
                            "Content-Type": "multipart/form-data",
                        },
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return get(res, "data", {});
            },
        },
        batchMessage: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=batch_message&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path: { batch_message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/batch_messages/:batch_message_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=batch_message&apiName=read_user&version=v1 click to debug }
             */
            readUser: async (
                payload?: {
                    path: { batch_message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                read_user?: {
                                    read_count: string;
                                    total_count: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/batch_messages/:batch_message_id/read_user`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=batch_message&apiName=get_progress&version=v1 click to debug }
             */
            getProgress: async (
                payload?: {
                    path: { batch_message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                batch_message_send_progress?: {
                                    valid_user_ids_count?: number;
                                    success_user_ids_count?: number;
                                    read_user_ids_count?: number;
                                };
                                batch_message_recall_progress?: {
                                    recall?: boolean;
                                    recall_count?: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/batch_messages/:batch_message_id/get_progress`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        chat: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path?: { chat_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/im/v1/chats`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    chat_id?: string;
                                                    avatar?: string;
                                                    name?: string;
                                                    description?: string;
                                                    owner_id?: string;
                                                    owner_id_type?: string;
                                                    external?: boolean;
                                                    tenant_key?: string;
                                                    labels?: Array<string>;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    chat_id?: string;
                                    avatar?: string;
                                    name?: string;
                                    description?: string;
                                    owner_id?: string;
                                    owner_id_type?: string;
                                    external?: boolean;
                                    tenant_key?: string;
                                    labels?: Array<string>;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat&apiName=search&version=v1 click to debug }
             */
            searchWithIterator: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        query?: string;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/im/v1/chats/search`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    chat_id?: string;
                                                    avatar?: string;
                                                    name?: string;
                                                    description?: string;
                                                    owner_id?: string;
                                                    owner_id_type?: string;
                                                    external?: boolean;
                                                    tenant_key?: string;
                                                    labels?: Array<string>;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat&apiName=search&version=v1 click to debug }
             */
            search: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        query?: string;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    chat_id?: string;
                                    avatar?: string;
                                    name?: string;
                                    description?: string;
                                    owner_id?: string;
                                    owner_id_type?: string;
                                    external?: boolean;
                                    tenant_key?: string;
                                    labels?: Array<string>;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/search`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { chat_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                avatar?: string;
                                name?: string;
                                description?: string;
                                i18n_names?: {
                                    zh_cn?: string;
                                    en_us?: string;
                                    ja_jp?: string;
                                };
                                add_member_permission?: string;
                                share_card_permission?: string;
                                at_all_permission?: string;
                                edit_permission?: string;
                                owner_id_type?: string;
                                owner_id?: string;
                                chat_mode?: string;
                                chat_type?: string;
                                chat_tag?: string;
                                join_message_visibility?: string;
                                leave_message_visibility?: string;
                                membership_approval?: string;
                                moderation_permission?: string;
                                external?: boolean;
                                tenant_key?: string;
                                user_count?: string;
                                bot_count?: string;
                                labels?: Array<string>;
                                toolkit_ids?: Array<string>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data?: {
                        avatar?: string;
                        name?: string;
                        description?: string;
                        i18n_names?: {
                            zh_cn?: string;
                            en_us?: string;
                            ja_jp?: string;
                        };
                        owner_id?: string;
                        user_id_list?: Array<string>;
                        bot_id_list?: Array<string>;
                        chat_mode?: string;
                        chat_type?: string;
                        external?: boolean;
                        join_message_visibility?: string;
                        leave_message_visibility?: string;
                        membership_approval?: string;
                        labels?: Array<string>;
                        toolkit_ids?: Array<string>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        set_bot_manager?: boolean;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                chat_id?: string;
                                avatar?: string;
                                name?: string;
                                description?: string;
                                i18n_names?: {
                                    zh_cn?: string;
                                    en_us?: string;
                                    ja_jp?: string;
                                };
                                owner_id?: string;
                                owner_id_type?: string;
                                add_member_permission?: string;
                                share_card_permission?: string;
                                at_all_permission?: string;
                                edit_permission?: string;
                                chat_mode?: string;
                                chat_type?: string;
                                chat_tag?: string;
                                external?: boolean;
                                tenant_key?: string;
                                join_message_visibility?: string;
                                leave_message_visibility?: string;
                                membership_approval?: string;
                                moderation_permission?: string;
                                labels?: Array<string>;
                                toolkit_ids?: Array<string>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat&apiName=update&version=v1 click to debug }
             */
            update: async (
                payload?: {
                    data?: {
                        avatar?: string;
                        name?: string;
                        description?: string;
                        i18n_names?: {
                            zh_cn?: string;
                            en_us?: string;
                            ja_jp?: string;
                        };
                        add_member_permission?: string;
                        share_card_permission?: string;
                        at_all_permission?: string;
                        edit_permission?: string;
                        owner_id?: string;
                        join_message_visibility?: string;
                        leave_message_visibility?: string;
                        membership_approval?: string;
                        labels?: Array<string>;
                        toolkit_ids?: Array<string>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { chat_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        chatModeration: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.moderation&apiName=get&version=v1 click to debug }
             */
            getWithIterator: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path?: { chat_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/im/v1/chats/:chat_id/moderation`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                moderation_setting?: string;
                                                page_token?: string;
                                                has_more?: boolean;
                                                items?: Array<{
                                                    user_id_type?: string;
                                                    user_id?: string;
                                                    tenant_key?: string;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.moderation&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path?: { chat_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                moderation_setting?: string;
                                page_token?: string;
                                has_more?: boolean;
                                items?: Array<{
                                    user_id_type?: string;
                                    user_id?: string;
                                    tenant_key?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/moderation`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.moderation&apiName=update&version=v1 click to debug }
             */
            update: async (
                payload?: {
                    data?: {
                        moderation_setting?: string;
                        moderator_added_list?: Array<string>;
                        moderator_removed_list?: Array<string>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { chat_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/moderation`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        chatAnnouncement: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.announcement&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { chat_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                content?: string;
                                revision?: string;
                                create_time?: string;
                                update_time?: string;
                                owner_id_type?:
                                    | "user_id"
                                    | "union_id"
                                    | "open_id"
                                    | "app_id";
                                owner_id?: string;
                                modifier_id_type?:
                                    | "user_id"
                                    | "union_id"
                                    | "open_id"
                                    | "app_id";
                                modifier_id?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/announcement`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.announcement&apiName=patch&version=v1 click to debug }
             */
            patch: async (
                payload?: {
                    data: { revision: string; requests?: Array<string> };
                    path: { chat_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/announcement`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        chatMembers: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.members&apiName=get&version=v1 click to debug }
             */
            getWithIterator: async (
                payload?: {
                    params?: {
                        member_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path?: { chat_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/im/v1/chats/:chat_id/members`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    member_id_type?: string;
                                                    member_id?: string;
                                                    name?: string;
                                                    tenant_key?: string;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                                member_total?: number;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.members&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    params?: {
                        member_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path?: { chat_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    member_id_type?: string;
                                    member_id?: string;
                                    name?: string;
                                    tenant_key?: string;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                                member_total?: number;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/members`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.members&apiName=is_in_chat&version=v1 click to debug }
             */
            isInChat: async (
                payload?: {
                    path?: { chat_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { is_in_chat?: boolean };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/members/is_in_chat`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.members&apiName=me_join&version=v1 click to debug }
             */
            meJoin: async (
                payload?: {
                    path?: { chat_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/members/me_join`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.members&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    data?: { id_list?: Array<string> };
                    params?: {
                        member_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "app_id";
                    };
                    path?: { chat_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { invalid_id_list?: Array<string> };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/members`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.members&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data?: { id_list?: Array<string> };
                    params?: {
                        member_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "app_id";
                        succeed_type?: number;
                    };
                    path?: { chat_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                invalid_id_list?: Array<string>;
                                not_existed_id_list?: Array<string>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/members`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        file: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=file&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        file_type:
                            | "opus"
                            | "mp4"
                            | "pdf"
                            | "doc"
                            | "xls"
                            | "ppt"
                            | "stream";
                        file_name: string;
                        duration?: number;
                        file: Buffer;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { file_key?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/files`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers: {
                            ...headers,
                            "Content-Type": "multipart/form-data",
                        },
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return get(res, "data", {});
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=file&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    path: { file_key: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await http
                    .request<any, any>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/files/:file_key`,
                            path
                        ),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return {
                    writeFile: async (filePath: string) => {
                        await res.pipe(fs.createWriteStream(filePath));
                    },
                };
            },
        },
        chatTopNotice: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.top_notice&apiName=delete_top_notice&version=v1 click to debug }
             */
            deleteTopNotice: async (
                payload?: {
                    path: { chat_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/top_notice/delete_top_notice`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.top_notice&apiName=put_top_notice&version=v1 click to debug }
             */
            putTopNotice: async (
                payload?: {
                    data: {
                        chat_top_notice: Array<{
                            action_type?: "1" | "2";
                            message_id?: string;
                        }>;
                    };
                    path: { chat_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/top_notice/put_top_notice`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        chatManagers: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.managers&apiName=delete_managers&version=v1 click to debug }
             */
            deleteManagers: async (
                payload?: {
                    data?: { manager_ids?: Array<string> };
                    params?: {
                        member_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "app_id";
                    };
                    path?: { chat_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                chat_managers?: Array<string>;
                                chat_bot_managers?: Array<string>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/managers/delete_managers`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.managers&apiName=add_managers&version=v1 click to debug }
             */
            addManagers: async (
                payload?: {
                    data?: { manager_ids?: Array<string> };
                    params?: {
                        member_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "app_id";
                    };
                    path?: { chat_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                chat_managers?: Array<string>;
                                chat_bot_managers?: Array<string>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/managers/add_managers`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        messageReaction: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message.reaction&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: { reaction_type: { emoji_type: string } };
                    path: { message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                reaction_id?: string;
                                operator?: {
                                    operator_id: string;
                                    operator_type: "app" | "user";
                                };
                                action_time?: string;
                                reaction_type?: { emoji_type: string };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/messages/:message_id/reactions`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message.reaction&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path: { message_id: string; reaction_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                reaction_id?: string;
                                operator?: {
                                    operator_id: string;
                                    operator_type: "app" | "user";
                                };
                                action_time?: string;
                                reaction_type?: { emoji_type: string };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/messages/:message_id/reactions/:reaction_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message.reaction&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: {
                        reaction_type?: string;
                        page_token?: string;
                        page_size?: number;
                        user_id_type?: "open_id" | "union_id" | "user_id";
                    };
                    path: { message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/im/v1/messages/:message_id/reactions`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items: Array<{
                                                    reaction_id?: string;
                                                    operator?: {
                                                        operator_id: string;
                                                        operator_type:
                                                            | "app"
                                                            | "user";
                                                    };
                                                    action_time?: string;
                                                    reaction_type?: {
                                                        emoji_type: string;
                                                    };
                                                }>;
                                                has_more: boolean;
                                                page_token: string;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message.reaction&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        reaction_type?: string;
                        page_token?: string;
                        page_size?: number;
                        user_id_type?: "open_id" | "union_id" | "user_id";
                    };
                    path: { message_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items: Array<{
                                    reaction_id?: string;
                                    operator?: {
                                        operator_id: string;
                                        operator_type: "app" | "user";
                                    };
                                    action_time?: string;
                                    reaction_type?: { emoji_type: string };
                                }>;
                                has_more: boolean;
                                page_token: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/messages/:message_id/reactions`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        chatTab: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.tab&apiName=list_tabs&version=v1 click to debug }
             */
            listTabs: async (
                payload?: {
                    path?: { chat_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                chat_tabs?: Array<{
                                    tab_id?: string;
                                    tab_name?: string;
                                    tab_type:
                                        | "message"
                                        | "doc_list"
                                        | "doc"
                                        | "pin"
                                        | "meeting_minute"
                                        | "chat_announcement"
                                        | "url"
                                        | "file";
                                    tab_content?: {
                                        url?: string;
                                        doc?: string;
                                        meeting_minute?: string;
                                    };
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/chat_tabs/list_tabs`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.tab&apiName=sort_tabs&version=v1 click to debug }
             */
            sortTabs: async (
                payload?: {
                    data?: { tab_ids?: Array<string> };
                    path?: { chat_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                chat_tabs?: Array<{
                                    tab_id?: string;
                                    tab_name?: string;
                                    tab_type:
                                        | "message"
                                        | "doc_list"
                                        | "doc"
                                        | "pin"
                                        | "meeting_minute"
                                        | "chat_announcement"
                                        | "url"
                                        | "file";
                                    tab_content?: {
                                        url?: string;
                                        doc?: string;
                                        meeting_minute?: string;
                                    };
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/chat_tabs/sort_tabs`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.tab&apiName=delete_tabs&version=v1 click to debug }
             */
            deleteTabs: async (
                payload?: {
                    data: { tab_ids: Array<string> };
                    path?: { chat_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                chat_tabs?: Array<{
                                    tab_id?: string;
                                    tab_name?: string;
                                    tab_type:
                                        | "message"
                                        | "doc_list"
                                        | "doc"
                                        | "pin"
                                        | "meeting_minute"
                                        | "chat_announcement"
                                        | "url"
                                        | "file";
                                    tab_content?: {
                                        url?: string;
                                        doc?: string;
                                        meeting_minute?: string;
                                    };
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/chat_tabs/delete_tabs`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.tab&apiName=update_tabs&version=v1 click to debug }
             */
            updateTabs: async (
                payload?: {
                    data?: {
                        chat_tabs?: Array<{
                            tab_id?: string;
                            tab_name?: string;
                            tab_type:
                                | "message"
                                | "doc_list"
                                | "doc"
                                | "pin"
                                | "meeting_minute"
                                | "chat_announcement"
                                | "url"
                                | "file";
                            tab_content?: {
                                url?: string;
                                doc?: string;
                                meeting_minute?: string;
                            };
                        }>;
                    };
                    path?: { chat_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                chat_tabs?: Array<{
                                    tab_id?: string;
                                    tab_name?: string;
                                    tab_type:
                                        | "message"
                                        | "doc_list"
                                        | "doc"
                                        | "pin"
                                        | "meeting_minute"
                                        | "chat_announcement"
                                        | "url"
                                        | "file";
                                    tab_content?: {
                                        url?: string;
                                        doc?: string;
                                        meeting_minute?: string;
                                    };
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/chat_tabs/update_tabs`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=chat.tab&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        chat_tabs: Array<{
                            tab_id?: string;
                            tab_name?: string;
                            tab_type:
                                | "message"
                                | "doc_list"
                                | "doc"
                                | "pin"
                                | "meeting_minute"
                                | "chat_announcement"
                                | "url"
                                | "file";
                            tab_content?: {
                                url?: string;
                                doc?: string;
                                meeting_minute?: string;
                            };
                        }>;
                    };
                    path?: { chat_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                chat_tabs?: Array<{
                                    tab_id?: string;
                                    tab_name?: string;
                                    tab_type:
                                        | "message"
                                        | "doc_list"
                                        | "doc"
                                        | "pin"
                                        | "meeting_minute"
                                        | "chat_announcement"
                                        | "url"
                                        | "file";
                                    tab_content?: {
                                        url?: string;
                                        doc?: string;
                                        meeting_minute?: string;
                                    };
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/chats/:chat_id/chat_tabs`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        messageResource: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=im&resource=message.resource&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    params: { type: string };
                    path: { message_id: string; file_key: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await http
                    .request<any, any>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/im/v1/messages/:message_id/resources/:file_key`,
                            path
                        ),
                        method: "GET",
                        headers,
                        data,
                        params,
                        responseType: "stream",
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return {
                    writeFile: async (filePath: string) => {
                        await res.pipe(fs.createWriteStream(filePath));
                    },
                };
            },
        },
    };

    mail = {
        publicMailbox: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    path?: { public_mailbox_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                public_mailbox_id?: string;
                                email?: string;
                                name?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: { page_token?: string; page_size?: number };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/mail/v1/public_mailboxes`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                items?: Array<{
                                                    public_mailbox_id?: string;
                                                    email?: string;
                                                    name?: string;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: { page_token?: string; page_size?: number };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    public_mailbox_id?: string;
                                    email?: string;
                                    name?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path: { public_mailbox_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data?: { email?: string; name?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                public_mailbox_id?: string;
                                email?: string;
                                name?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox&apiName=patch&version=v1 click to debug }
             */
            patch: async (
                payload?: {
                    data?: { name?: string };
                    path?: { public_mailbox_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                public_mailbox_id?: string;
                                email?: string;
                                name?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox&apiName=update&version=v1 click to debug }
             */
            update: async (
                payload?: {
                    data?: { name?: string };
                    path?: { public_mailbox_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                public_mailbox_id?: string;
                                email?: string;
                                name?: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        publicMailboxMember: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox.member&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { public_mailbox_id?: string; member_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                member_id?: string;
                                user_id?: string;
                                type?: "USER";
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/:member_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox.member&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path?: { public_mailbox_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                items?: Array<{
                                                    member_id?: string;
                                                    user_id?: string;
                                                    type?: "USER";
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox.member&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path?: { public_mailbox_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    member_id?: string;
                                    user_id?: string;
                                    type?: "USER";
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox.member&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path?: { public_mailbox_id?: string; member_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/:member_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox.member&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data?: { user_id?: string; type?: "USER" };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { public_mailbox_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                member_id?: string;
                                user_id?: string;
                                type?: "USER";
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox.member&apiName=clear&version=v1 click to debug }
             */
            clear: async (
                payload?: {
                    path?: { public_mailbox_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/clear`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        mailgroupPermissionMember: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.permission_member&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path?: { mailgroup_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                items?: Array<{
                                                    permission_member_id?: string;
                                                    user_id?: string;
                                                    department_id?: string;
                                                    type?:
                                                        | "USER"
                                                        | "DEPARTMENT";
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.permission_member&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path?: { mailgroup_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    permission_member_id?: string;
                                    user_id?: string;
                                    department_id?: string;
                                    type?: "USER" | "DEPARTMENT";
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.permission_member&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data?: {
                        user_id?: string;
                        department_id?: string;
                        type?: "USER" | "DEPARTMENT";
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path?: { mailgroup_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                permission_member_id?: string;
                                user_id?: string;
                                department_id?: string;
                                type?: "USER" | "DEPARTMENT";
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.permission_member&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path?: {
                        mailgroup_id?: string;
                        permission_member_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                permission_member_id?: string;
                                user_id?: string;
                                department_id?: string;
                                type?: "USER" | "DEPARTMENT";
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/:permission_member_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.permission_member&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path?: {
                        mailgroup_id?: string;
                        permission_member_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/:permission_member_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        mailgroup: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    path?: { mailgroup_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                mailgroup_id?: string;
                                email?: string;
                                name?: string;
                                description?: string;
                                direct_members_count?: string;
                                include_external_member?: boolean;
                                include_all_company_member?: boolean;
                                who_can_send_mail?:
                                    | "ANYONE"
                                    | "ALL_INTERNAL_USERS"
                                    | "ALL_GROUP_MEMBERS"
                                    | "CUSTOM_MEMBERS";
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path?: { mailgroup_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: {
                        manager_user_id?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/mail/v1/mailgroups`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                items?: Array<{
                                                    mailgroup_id?: string;
                                                    email?: string;
                                                    name?: string;
                                                    description?: string;
                                                    direct_members_count?: string;
                                                    include_external_member?: boolean;
                                                    include_all_company_member?: boolean;
                                                    who_can_send_mail?:
                                                        | "ANYONE"
                                                        | "ALL_INTERNAL_USERS"
                                                        | "ALL_GROUP_MEMBERS"
                                                        | "CUSTOM_MEMBERS";
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        manager_user_id?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    mailgroup_id?: string;
                                    email?: string;
                                    name?: string;
                                    description?: string;
                                    direct_members_count?: string;
                                    include_external_member?: boolean;
                                    include_all_company_member?: boolean;
                                    who_can_send_mail?:
                                        | "ANYONE"
                                        | "ALL_INTERNAL_USERS"
                                        | "ALL_GROUP_MEMBERS"
                                        | "CUSTOM_MEMBERS";
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data?: {
                        email?: string;
                        name?: string;
                        description?: string;
                        who_can_send_mail?:
                            | "ANYONE"
                            | "ALL_INTERNAL_USERS"
                            | "ALL_GROUP_MEMBERS"
                            | "CUSTOM_MEMBERS";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                mailgroup_id?: string;
                                email?: string;
                                name?: string;
                                description?: string;
                                direct_members_count?: string;
                                include_external_member?: boolean;
                                include_all_company_member?: boolean;
                                who_can_send_mail?:
                                    | "ANYONE"
                                    | "ALL_INTERNAL_USERS"
                                    | "ALL_GROUP_MEMBERS"
                                    | "CUSTOM_MEMBERS";
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup&apiName=patch&version=v1 click to debug }
             */
            patch: async (
                payload?: {
                    data?: {
                        name?: string;
                        description?: string;
                        who_can_send_mail?:
                            | "ANYONE"
                            | "ALL_INTERNAL_USERS"
                            | "ALL_GROUP_MEMBERS"
                            | "CUSTOM_MEMBERS";
                    };
                    path?: { mailgroup_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                mailgroup_id?: string;
                                email?: string;
                                name?: string;
                                description?: string;
                                direct_members_count?: string;
                                include_external_member?: boolean;
                                include_all_company_member?: boolean;
                                who_can_send_mail?:
                                    | "ANYONE"
                                    | "ALL_INTERNAL_USERS"
                                    | "ALL_GROUP_MEMBERS"
                                    | "CUSTOM_MEMBERS";
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup&apiName=update&version=v1 click to debug }
             */
            update: async (
                payload?: {
                    data?: {
                        name?: string;
                        description?: string;
                        who_can_send_mail?:
                            | "ANYONE"
                            | "ALL_INTERNAL_USERS"
                            | "ALL_GROUP_MEMBERS"
                            | "CUSTOM_MEMBERS";
                    };
                    path?: { mailgroup_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                mailgroup_id?: string;
                                email?: string;
                                name?: string;
                                description?: string;
                                direct_members_count?: string;
                                include_external_member?: boolean;
                                include_all_company_member?: boolean;
                                who_can_send_mail?:
                                    | "ANYONE"
                                    | "ALL_INTERNAL_USERS"
                                    | "ALL_GROUP_MEMBERS"
                                    | "CUSTOM_MEMBERS";
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        publicMailboxAlias: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox.alias&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path?: { public_mailbox_id?: string; alias_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases/:alias_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox.alias&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    path?: { public_mailbox_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    primary_email?: string;
                                    email_alias?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=public_mailbox.alias&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data?: { email_alias?: string };
                    path?: { public_mailbox_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                public_mailbox_alias?: {
                                    primary_email?: string;
                                    email_alias?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        mailgroupMember: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.member&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path?: { mailgroup_id?: string; member_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/members/:member_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.member&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path?: { mailgroup_id?: string; member_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                member_id?: string;
                                email?: string;
                                user_id?: string;
                                department_id?: string;
                                type?:
                                    | "USER"
                                    | "DEPARTMENT"
                                    | "COMPANY"
                                    | "EXTERNAL_USER"
                                    | "MAIL_GROUP"
                                    | "PUBLIC_MAILBOX"
                                    | "OTHER_MEMBER";
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/members/:member_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.member&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path?: { mailgroup_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/members`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                items?: Array<{
                                                    member_id?: string;
                                                    email?: string;
                                                    user_id?: string;
                                                    department_id?: string;
                                                    type?:
                                                        | "USER"
                                                        | "DEPARTMENT"
                                                        | "COMPANY"
                                                        | "EXTERNAL_USER"
                                                        | "MAIL_GROUP"
                                                        | "PUBLIC_MAILBOX"
                                                        | "OTHER_MEMBER";
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.member&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                        page_token?: string;
                        page_size?: number;
                    };
                    path?: { mailgroup_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    member_id?: string;
                                    email?: string;
                                    user_id?: string;
                                    department_id?: string;
                                    type?:
                                        | "USER"
                                        | "DEPARTMENT"
                                        | "COMPANY"
                                        | "EXTERNAL_USER"
                                        | "MAIL_GROUP"
                                        | "PUBLIC_MAILBOX"
                                        | "OTHER_MEMBER";
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/members`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.member&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data?: {
                        email?: string;
                        user_id?: string;
                        department_id?: string;
                        type?:
                            | "USER"
                            | "DEPARTMENT"
                            | "COMPANY"
                            | "EXTERNAL_USER"
                            | "MAIL_GROUP"
                            | "PUBLIC_MAILBOX"
                            | "OTHER_MEMBER";
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        department_id_type?:
                            | "department_id"
                            | "open_department_id";
                    };
                    path?: { mailgroup_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                member_id?: string;
                                email?: string;
                                user_id?: string;
                                department_id?: string;
                                type?:
                                    | "USER"
                                    | "DEPARTMENT"
                                    | "COMPANY"
                                    | "EXTERNAL_USER"
                                    | "MAIL_GROUP"
                                    | "PUBLIC_MAILBOX"
                                    | "OTHER_MEMBER";
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/members`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        mailgroupAlias: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.alias&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path?: { mailgroup_id?: string; alias_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases/:alias_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.alias&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    path?: { mailgroup_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    primary_email?: string;
                                    email_alias?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=mailgroup.alias&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data?: { email_alias?: string };
                    path?: { mailgroup_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                mailgroup_alias?: {
                                    primary_email?: string;
                                    email_alias?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        userMailbox: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=user_mailbox&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    params?: { transfer_mailbox?: string };
                    path: { user_mailbox_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/user_mailboxes/:user_mailbox_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        userMailboxAlias: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=user_mailbox.alias&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path?: { user_mailbox_id?: string; alias_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases/:alias_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=user_mailbox.alias&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: { page_token?: string; page_size?: number };
                    path?: { user_mailbox_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    primary_email?: string;
                                                    email_alias?: string;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=user_mailbox.alias&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: { page_token?: string; page_size?: number };
                    path?: { user_mailbox_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    primary_email?: string;
                                    email_alias?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=user_mailbox.alias&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data?: { email_alias?: string };
                    path?: { user_mailbox_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_mailbox_alias?: {
                                    primary_email?: string;
                                    email_alias?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        user: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=mail&resource=user&apiName=query&version=v1 click to debug }
             */
            query: async (
                payload?: {
                    data: { email_list: Array<string> };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                user_list?: Array<{
                                    email?: string;
                                    status?: number;
                                    type?: number;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/mail/v1/users/query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };

    mdm = {};

    meeting_room = {};

    moments = {};

    okr = {
        progressRecord: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=okr&resource=progress_record&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path: { progress_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/okr/v1/progress_records/:progress_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=okr&resource=progress_record&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    path?: { progress_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                progress_id?: string;
                                modify_time?: string;
                                content?: {
                                    blocks?: Array<{
                                        type?: "paragraph" | "gallery";
                                        paragraph?: {
                                            style?: {
                                                list?: Array<{
                                                    type?:
                                                        | "number"
                                                        | "bullet"
                                                        | "checkBox"
                                                        | "checkedBox"
                                                        | "indent";
                                                    indentLevel?: number;
                                                    number?: number;
                                                }>;
                                            };
                                            elements?: Array<{
                                                type?:
                                                    | "textRun"
                                                    | "docsLink"
                                                    | "person";
                                                textRun?: {
                                                    text?: string;
                                                    style?: {
                                                        bold?: boolean;
                                                        strikeThrough?: boolean;
                                                        backColor?: {
                                                            red?: number;
                                                            green?: number;
                                                            blue?: number;
                                                            alpha?: number;
                                                        };
                                                        textColor?: {
                                                            red?: number;
                                                            green?: number;
                                                            blue?: number;
                                                            alpha?: number;
                                                        };
                                                        link?: { url?: string };
                                                    };
                                                };
                                                docsLink?: {
                                                    url?: string;
                                                    title?: string;
                                                };
                                                person?: { openId?: string };
                                            }>;
                                        };
                                        gallery?: {
                                            imageList?: Array<{
                                                fileToken?: string;
                                                url?: string;
                                                width?: number;
                                                height?: number;
                                            }>;
                                        };
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/okr/v1/progress_records/:progress_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=okr&resource=progress_record&apiName=update&version=v1 click to debug }
             */
            update: async (
                payload?: {
                    data: {
                        content: {
                            blocks?: Array<{
                                type?: "paragraph" | "gallery";
                                paragraph?: {
                                    style?: {
                                        list?: Array<{
                                            type?:
                                                | "number"
                                                | "bullet"
                                                | "checkBox"
                                                | "checkedBox"
                                                | "indent";
                                            indentLevel?: number;
                                            number?: number;
                                        }>;
                                    };
                                    elements?: Array<{
                                        type?:
                                            | "textRun"
                                            | "docsLink"
                                            | "person";
                                        textRun?: {
                                            text?: string;
                                            style?: {
                                                bold?: boolean;
                                                strikeThrough?: boolean;
                                                backColor?: {
                                                    red?: number;
                                                    green?: number;
                                                    blue?: number;
                                                    alpha?: number;
                                                };
                                                textColor?: {
                                                    red?: number;
                                                    green?: number;
                                                    blue?: number;
                                                    alpha?: number;
                                                };
                                                link?: { url?: string };
                                            };
                                        };
                                        docsLink?: {
                                            url?: string;
                                            title?: string;
                                        };
                                        person?: { openId?: string };
                                    }>;
                                };
                                gallery?: {
                                    imageList?: Array<{
                                        fileToken?: string;
                                        url?: string;
                                        width?: number;
                                        height?: number;
                                    }>;
                                };
                            }>;
                        };
                    };
                    path: { progress_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                data?: {
                                    progress_id?: string;
                                    modify_time?: string;
                                    content?: {
                                        blocks?: Array<{
                                            type?: "paragraph" | "gallery";
                                            paragraph?: {
                                                style?: {
                                                    list?: Array<{
                                                        type?:
                                                            | "number"
                                                            | "bullet"
                                                            | "checkBox"
                                                            | "checkedBox"
                                                            | "indent";
                                                        indentLevel?: number;
                                                        number?: number;
                                                    }>;
                                                };
                                                elements?: Array<{
                                                    type?:
                                                        | "textRun"
                                                        | "docsLink"
                                                        | "person";
                                                    textRun?: {
                                                        text?: string;
                                                        style?: {
                                                            bold?: boolean;
                                                            strikeThrough?: boolean;
                                                            backColor?: {
                                                                red?: number;
                                                                green?: number;
                                                                blue?: number;
                                                                alpha?: number;
                                                            };
                                                            textColor?: {
                                                                red?: number;
                                                                green?: number;
                                                                blue?: number;
                                                                alpha?: number;
                                                            };
                                                            link?: {
                                                                url?: string;
                                                            };
                                                        };
                                                    };
                                                    docsLink?: {
                                                        url?: string;
                                                        title?: string;
                                                    };
                                                    person?: {
                                                        openId?: string;
                                                    };
                                                }>;
                                            };
                                            gallery?: {
                                                imageList?: Array<{
                                                    fileToken?: string;
                                                    url?: string;
                                                    width?: number;
                                                    height?: number;
                                                }>;
                                            };
                                        }>;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/okr/v1/progress_records/:progress_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=okr&resource=progress_record&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        source_title: string;
                        source_url: string;
                        target_id: string;
                        target_type: number;
                        content: {
                            blocks?: Array<{
                                type?: "paragraph" | "gallery";
                                paragraph?: {
                                    style?: {
                                        list?: Array<{
                                            type?:
                                                | "number"
                                                | "bullet"
                                                | "checkBox"
                                                | "checkedBox"
                                                | "indent";
                                            indentLevel?: number;
                                            number?: number;
                                        }>;
                                    };
                                    elements?: Array<{
                                        type?:
                                            | "textRun"
                                            | "docsLink"
                                            | "person";
                                        textRun?: {
                                            text?: string;
                                            style?: {
                                                bold?: boolean;
                                                strikeThrough?: boolean;
                                                backColor?: {
                                                    red?: number;
                                                    green?: number;
                                                    blue?: number;
                                                    alpha?: number;
                                                };
                                                textColor?: {
                                                    red?: number;
                                                    green?: number;
                                                    blue?: number;
                                                    alpha?: number;
                                                };
                                                link?: { url?: string };
                                            };
                                        };
                                        docsLink?: {
                                            url?: string;
                                            title?: string;
                                        };
                                        person?: { openId?: string };
                                    }>;
                                };
                                gallery?: {
                                    imageList?: Array<{
                                        fileToken?: string;
                                        url?: string;
                                        width?: number;
                                        height?: number;
                                    }>;
                                };
                            }>;
                        };
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                data?: {
                                    progress_id?: string;
                                    modify_time?: string;
                                    content?: {
                                        blocks?: Array<{
                                            type?: "paragraph" | "gallery";
                                            paragraph?: {
                                                style?: {
                                                    list?: Array<{
                                                        type?:
                                                            | "number"
                                                            | "bullet"
                                                            | "checkBox"
                                                            | "checkedBox"
                                                            | "indent";
                                                        indentLevel?: number;
                                                        number?: number;
                                                    }>;
                                                };
                                                elements?: Array<{
                                                    type?:
                                                        | "textRun"
                                                        | "docsLink"
                                                        | "person";
                                                    textRun?: {
                                                        text?: string;
                                                        style?: {
                                                            bold?: boolean;
                                                            strikeThrough?: boolean;
                                                            backColor?: {
                                                                red?: number;
                                                                green?: number;
                                                                blue?: number;
                                                                alpha?: number;
                                                            };
                                                            textColor?: {
                                                                red?: number;
                                                                green?: number;
                                                                blue?: number;
                                                                alpha?: number;
                                                            };
                                                            link?: {
                                                                url?: string;
                                                            };
                                                        };
                                                    };
                                                    docsLink?: {
                                                        url?: string;
                                                        title?: string;
                                                    };
                                                    person?: {
                                                        openId?: string;
                                                    };
                                                }>;
                                            };
                                            gallery?: {
                                                imageList?: Array<{
                                                    fileToken?: string;
                                                    url?: string;
                                                    width?: number;
                                                    height?: number;
                                                }>;
                                            };
                                        }>;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/okr/v1/progress_records`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        image: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=okr&resource=image&apiName=upload&version=v1 click to debug }
             */
            upload: async (
                payload?: {
                    data: {
                        data: Buffer;
                        target_id: string;
                        target_type: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const res = await http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                data?: { file_token?: string; url?: string };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/okr/v1/images/upload`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers: {
                            ...headers,
                            "Content-Type": "multipart/form-data",
                        },
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });

                return get(res, "data", {});
            },
        },
        period: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=okr&resource=period&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: { page_token?: string; page_size?: number };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                page_token?: string;
                                has_more?: boolean;
                                items?: Array<{
                                    id?: string;
                                    zh_name?: string;
                                    en_name?: string;
                                    status?: number;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/okr/v1/periods`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        okr: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=okr&resource=okr&apiName=batch_get&version=v1 click to debug }
             */
            batchGet: async (
                payload?: {
                    params: {
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_admin_id";
                        okr_ids: number;
                        lang?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                okr_list?: Array<{
                                    id?: string;
                                    permission?: number;
                                    period_id?: string;
                                    name?: string;
                                    objective_list?: Array<{
                                        id?: string;
                                        permission?: number;
                                        content?: string;
                                        progress_report?: string;
                                        score?: number;
                                        weight?: number;
                                        progress_rate?: {
                                            percent?: number;
                                            status?: "-1" | "0" | "1" | "2";
                                        };
                                        kr_list?: Array<{
                                            id?: string;
                                            content?: string;
                                            score?: number;
                                            weight?: number;
                                            kr_weight?: number;
                                            progress_rate?: {
                                                percent?: number;
                                                status?: "-1" | "0" | "1" | "2";
                                            };
                                            progress_record_list?: Array<{
                                                id?: string;
                                            }>;
                                            progress_rate_percent_last_updated_time?: string;
                                            progress_rate_status_last_updated_time?: string;
                                            progress_record_last_updated_time?: string;
                                            progress_report_last_updated_time?: string;
                                            score_last_updated_time?: string;
                                            deadline?: string;
                                            mentioned_user_list?: Array<{
                                                open_id?: string;
                                                user_id?: string;
                                            }>;
                                        }>;
                                        aligned_objective_list?: Array<{
                                            id?: string;
                                            okr_id?: string;
                                            owner?: {
                                                open_id?: string;
                                                user_id?: string;
                                            };
                                        }>;
                                        aligning_objective_list?: Array<{
                                            id?: string;
                                            okr_id?: string;
                                            owner?: {
                                                open_id?: string;
                                                user_id?: string;
                                            };
                                        }>;
                                        progress_record_list?: Array<{
                                            id?: string;
                                        }>;
                                        progress_rate_percent_last_updated_time?: string;
                                        progress_rate_status_last_updated_time?: string;
                                        progress_record_last_updated_time?: string;
                                        progress_report_last_updated_time?: string;
                                        score_last_updated_time?: string;
                                        deadline?: string;
                                        mentioned_user_list?: Array<{
                                            open_id?: string;
                                            user_id?: string;
                                        }>;
                                    }>;
                                    confirm_status?: number;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/okr/v1/okrs/batch_get`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        userOkr: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=okr&resource=user.okr&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params: {
                        user_id_type?:
                            | "user_id"
                            | "union_id"
                            | "open_id"
                            | "people_admin_id";
                        offset: string;
                        limit: string;
                        lang?: string;
                        period_ids?: number;
                    };
                    path?: { user_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                total?: number;
                                okr_list?: Array<{
                                    id?: string;
                                    permission?: number;
                                    period_id?: string;
                                    name?: string;
                                    objective_list?: Array<{
                                        id?: string;
                                        permission?: number;
                                        content?: string;
                                        progress_report?: string;
                                        score?: number;
                                        weight?: number;
                                        progress_rate?: {
                                            percent?: number;
                                            status?: "-1" | "0" | "1" | "2";
                                        };
                                        kr_list?: Array<{
                                            id?: string;
                                            content?: string;
                                            score?: number;
                                            weight?: number;
                                            kr_weight?: number;
                                            progress_rate?: {
                                                percent?: number;
                                                status?: "-1" | "0" | "1" | "2";
                                            };
                                            progress_record_list?: Array<{
                                                id?: string;
                                            }>;
                                            progress_rate_percent_last_updated_time?: string;
                                            progress_rate_status_last_updated_time?: string;
                                            progress_record_last_updated_time?: string;
                                            progress_report_last_updated_time?: string;
                                            score_last_updated_time?: string;
                                            deadline?: string;
                                            mentioned_user_list?: Array<{
                                                open_id?: string;
                                                user_id?: string;
                                            }>;
                                        }>;
                                        aligned_objective_list?: Array<{
                                            id?: string;
                                            okr_id?: string;
                                            owner?: {
                                                open_id?: string;
                                                user_id?: string;
                                            };
                                        }>;
                                        aligning_objective_list?: Array<{
                                            id?: string;
                                            okr_id?: string;
                                            owner?: {
                                                open_id?: string;
                                                user_id?: string;
                                            };
                                        }>;
                                        progress_record_list?: Array<{
                                            id?: string;
                                        }>;
                                        progress_rate_percent_last_updated_time?: string;
                                        progress_rate_status_last_updated_time?: string;
                                        progress_record_last_updated_time?: string;
                                        progress_report_last_updated_time?: string;
                                        score_last_updated_time?: string;
                                        deadline?: string;
                                        mentioned_user_list?: Array<{
                                            open_id?: string;
                                            user_id?: string;
                                        }>;
                                    }>;
                                    confirm_status?: number;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/okr/v1/users/:user_id/okrs`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };

    optical_char_recognition = {
        image: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=optical_char_recognition&resource=image&apiName=basic_recognize&version=v1 click to debug }
             */
            basicRecognize: async (
                payload?: {
                    data?: { image?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { text_list: Array<string> };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/optical_char_recognition/v1/image/basic_recognize`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };

    passport = {
        session: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=passport&resource=session&apiName=query&version=v1 click to debug }
             */
            query: async (
                payload?: {
                    data?: { user_ids?: Array<string> };
                    params?: {
                        user_id_type?: "open_id" | "union_id" | "user_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                mask_sessions?: Array<{
                                    create_time?: string;
                                    terminal_type?: number;
                                    user_id?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/passport/v1/sessions/query`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };

    people_admin = {};

    people_bytedance = {};

    performance = {};

    report = {};

    search_in_app = {};

    search = {
        schema: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=search&resource=schema&apiName=get&version=v2 click to debug }
             */
            get: async (
                payload?: {
                    path: { schema_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                schema?: {
                                    properties: Array<{
                                        name: string;
                                        type:
                                            | "text"
                                            | "int"
                                            | "tag"
                                            | "timestamp"
                                            | "double"
                                            | "tinytext";
                                        is_searchable?: boolean;
                                        is_sortable?: boolean;
                                        is_returnable?: boolean;
                                        sort_options?: {
                                            priority?: number;
                                            order?: "asc" | "desc";
                                        };
                                        type_definitions?: {
                                            tag?: Array<{
                                                name: string;
                                                color:
                                                    | "red"
                                                    | "green"
                                                    | "blue"
                                                    | "grey"
                                                    | "yellow";
                                                text: string;
                                            }>;
                                        };
                                        search_options?: {
                                            enable_semantic_match?: boolean;
                                            enable_exact_match?: boolean;
                                            enable_prefix_match?: boolean;
                                            enable_number_suffix_match?: boolean;
                                            enable_camel_match?: boolean;
                                        };
                                    }>;
                                    display: {
                                        card_key: "search_common_card";
                                        fields_mapping?: Array<{
                                            display_field: string;
                                            data_field: string;
                                        }>;
                                    };
                                    schema_id: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/search/v2/schemas/:schema_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=search&resource=schema&apiName=delete&version=v2 click to debug }
             */
            delete: async (
                payload?: {
                    path: { schema_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/search/v2/schemas/:schema_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=search&resource=schema&apiName=patch&version=v2 click to debug }
             */
            patch: async (
                payload?: {
                    data?: {
                        display?: {
                            card_key: "search_common_card";
                            fields_mapping?: Array<{
                                display_field: string;
                                data_field: string;
                            }>;
                        };
                    };
                    path: { schema_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                schema?: {
                                    properties: Array<{
                                        name: string;
                                        type:
                                            | "text"
                                            | "int"
                                            | "tag"
                                            | "timestamp"
                                            | "double"
                                            | "tinytext";
                                        is_searchable?: boolean;
                                        is_sortable?: boolean;
                                        is_returnable?: boolean;
                                        sort_options?: {
                                            priority?: number;
                                            order?: "asc" | "desc";
                                        };
                                        type_definitions?: {
                                            tag?: Array<{
                                                name: string;
                                                color:
                                                    | "red"
                                                    | "green"
                                                    | "blue"
                                                    | "grey"
                                                    | "yellow";
                                                text: string;
                                            }>;
                                        };
                                        search_options?: {
                                            enable_semantic_match?: boolean;
                                            enable_exact_match?: boolean;
                                            enable_prefix_match?: boolean;
                                            enable_number_suffix_match?: boolean;
                                            enable_camel_match?: boolean;
                                        };
                                    }>;
                                    display: {
                                        card_key: "search_common_card";
                                        fields_mapping?: Array<{
                                            display_field: string;
                                            data_field: string;
                                        }>;
                                    };
                                    schema_id: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/search/v2/schemas/:schema_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=search&resource=schema&apiName=create&version=v2 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        properties: Array<{
                            name: string;
                            type:
                                | "text"
                                | "int"
                                | "tag"
                                | "timestamp"
                                | "double"
                                | "tinytext";
                            is_searchable?: boolean;
                            is_sortable?: boolean;
                            is_returnable?: boolean;
                            sort_options?: {
                                priority?: number;
                                order?: "asc" | "desc";
                            };
                            type_definitions?: {
                                tag?: Array<{
                                    name: string;
                                    color:
                                        | "red"
                                        | "green"
                                        | "blue"
                                        | "grey"
                                        | "yellow";
                                    text: string;
                                }>;
                            };
                            search_options?: {
                                enable_semantic_match?: boolean;
                                enable_exact_match?: boolean;
                                enable_prefix_match?: boolean;
                                enable_number_suffix_match?: boolean;
                                enable_camel_match?: boolean;
                            };
                        }>;
                        display: {
                            card_key: "search_common_card";
                            fields_mapping?: Array<{
                                display_field: string;
                                data_field: string;
                            }>;
                        };
                        schema_id: string;
                    };
                    params?: { validate_only?: boolean };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                schema?: {
                                    properties: Array<{
                                        name: string;
                                        type:
                                            | "text"
                                            | "int"
                                            | "tag"
                                            | "timestamp"
                                            | "double"
                                            | "tinytext";
                                        is_searchable?: boolean;
                                        is_sortable?: boolean;
                                        is_returnable?: boolean;
                                        sort_options?: {
                                            priority?: number;
                                            order?: "asc" | "desc";
                                        };
                                        type_definitions?: {
                                            tag?: Array<{
                                                name: string;
                                                color:
                                                    | "red"
                                                    | "green"
                                                    | "blue"
                                                    | "grey"
                                                    | "yellow";
                                                text: string;
                                            }>;
                                        };
                                        search_options?: {
                                            enable_semantic_match?: boolean;
                                            enable_exact_match?: boolean;
                                            enable_prefix_match?: boolean;
                                            enable_number_suffix_match?: boolean;
                                            enable_camel_match?: boolean;
                                        };
                                    }>;
                                    display: {
                                        card_key: "search_common_card";
                                        fields_mapping?: Array<{
                                            display_field: string;
                                            data_field: string;
                                        }>;
                                    };
                                    schema_id: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/search/v2/schemas`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        dataSource: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=search&resource=data_source&apiName=delete&version=v2 click to debug }
             */
            delete: async (
                payload?: {
                    path: { data_source_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/search/v2/data_sources/:data_source_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=search&resource=data_source&apiName=get&version=v2 click to debug }
             */
            get: async (
                payload?: {
                    path: { data_source_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                data_source?: {
                                    id?: string;
                                    name: string;
                                    state?: number;
                                    description?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    is_exceed_quota?: boolean;
                                    icon_url?: string;
                                    template?: string;
                                    searchable_fields?: Array<string>;
                                    i18n_name?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                        ja_jp?: string;
                                    };
                                    i18n_description?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                        ja_jp?: string;
                                    };
                                    schema_id?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/search/v2/data_sources/:data_source_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=search&resource=data_source&apiName=list&version=v2 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: {
                        view?: number;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/search/v2/data_sources`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                items?: Array<{
                                                    id?: string;
                                                    name: string;
                                                    state?: number;
                                                    description?: string;
                                                    create_time?: string;
                                                    update_time?: string;
                                                    is_exceed_quota?: boolean;
                                                    icon_url?: string;
                                                    template?: string;
                                                    searchable_fields?: Array<string>;
                                                    i18n_name?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                        ja_jp?: string;
                                                    };
                                                    i18n_description?: {
                                                        zh_cn?: string;
                                                        en_us?: string;
                                                        ja_jp?: string;
                                                    };
                                                    schema_id?: string;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=search&resource=data_source&apiName=list&version=v2 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        view?: number;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                items?: Array<{
                                    id?: string;
                                    name: string;
                                    state?: number;
                                    description?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    is_exceed_quota?: boolean;
                                    icon_url?: string;
                                    template?: string;
                                    searchable_fields?: Array<string>;
                                    i18n_name?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                        ja_jp?: string;
                                    };
                                    i18n_description?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                        ja_jp?: string;
                                    };
                                    schema_id?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/search/v2/data_sources`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=search&resource=data_source&apiName=create&version=v2 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        name: string;
                        state?: number;
                        description?: string;
                        icon_url?: string;
                        template?: string;
                        searchable_fields?: Array<string>;
                        i18n_name?: {
                            zh_cn?: string;
                            en_us?: string;
                            ja_jp?: string;
                        };
                        i18n_description?: {
                            zh_cn?: string;
                            en_us?: string;
                            ja_jp?: string;
                        };
                        schema_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                data_source?: {
                                    id?: string;
                                    name: string;
                                    state?: number;
                                    description?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    is_exceed_quota?: boolean;
                                    icon_url?: string;
                                    template?: string;
                                    searchable_fields?: Array<string>;
                                    i18n_name?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                        ja_jp?: string;
                                    };
                                    i18n_description?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                        ja_jp?: string;
                                    };
                                    schema_id?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/search/v2/data_sources`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=search&resource=data_source&apiName=patch&version=v2 click to debug }
             */
            patch: async (
                payload?: {
                    data?: {
                        name?: string;
                        state?: number;
                        description?: string;
                        icon_url?: string;
                        i18n_name?: {
                            zh_cn?: string;
                            en_us?: string;
                            ja_jp?: string;
                        };
                        i18n_description?: {
                            zh_cn?: string;
                            en_us?: string;
                            ja_jp?: string;
                        };
                    };
                    path: { data_source_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                data_source?: {
                                    id?: string;
                                    name: string;
                                    state?: number;
                                    description?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    is_exceed_quota?: boolean;
                                    icon_url?: string;
                                    template?: string;
                                    searchable_fields?: Array<string>;
                                    i18n_name?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                        ja_jp?: string;
                                    };
                                    i18n_description?: {
                                        zh_cn?: string;
                                        en_us?: string;
                                        ja_jp?: string;
                                    };
                                    schema_id?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/search/v2/data_sources/:data_source_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        dataSourceItem: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=search&resource=data_source.item&apiName=delete&version=v2 click to debug }
             */
            delete: async (
                payload?: {
                    path: { data_source_id: string; item_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/search/v2/data_sources/:data_source_id/items/:item_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=search&resource=data_source.item&apiName=create&version=v2 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        id: string;
                        acl: Array<{
                            access?: "allow" | "deny";
                            value?: string;
                            type?: "user" | "group" | "open_id";
                        }>;
                        metadata: {
                            title: string;
                            source_url: string;
                            create_time?: number;
                            update_time?: number;
                            source_url_mobile?: string;
                        };
                        structured_data: string;
                        content?: {
                            format?: "html" | "plaintext";
                            content_data?: string;
                        };
                    };
                    path: { data_source_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/search/v2/data_sources/:data_source_id/items`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=search&resource=data_source.item&apiName=get&version=v2 click to debug }
             */
            get: async (
                payload?: {
                    path?: { data_source_id?: string; item_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                item: {
                                    id: string;
                                    acl: Array<{
                                        access?: "allow" | "deny";
                                        value?: string;
                                        type?: "user" | "group" | "open_id";
                                    }>;
                                    metadata: {
                                        title: string;
                                        source_url: string;
                                        create_time?: number;
                                        update_time?: number;
                                        source_url_mobile?: string;
                                    };
                                    structured_data: string;
                                    content?: {
                                        format?: "html" | "plaintext";
                                        content_data?: string;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/search/v2/data_sources/:data_source_id/items/:item_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };

    security_and_compliance = {};

    sheets = {
        spreadsheetSheetFloatImage: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.float_image&apiName=delete&version=v3 click to debug }
             */
            delete: async (
                payload?: {
                    path?: {
                        spreadsheet_token?: string;
                        sheet_id?: string;
                        float_image_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/float_images/:float_image_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.float_image&apiName=patch&version=v3 click to debug }
             */
            patch: async (
                payload?: {
                    data?: {
                        float_image_token?: string;
                        range?: string;
                        width?: number;
                        height?: number;
                        offset_x?: number;
                        offset_y?: number;
                    };
                    path?: {
                        spreadsheet_token?: string;
                        sheet_id?: string;
                        float_image_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                float_image?: {
                                    float_image_id?: string;
                                    float_image_token?: string;
                                    range?: string;
                                    width?: number;
                                    height?: number;
                                    offset_x?: number;
                                    offset_y?: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/float_images/:float_image_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.float_image&apiName=get&version=v3 click to debug }
             */
            get: async (
                payload?: {
                    path?: {
                        spreadsheet_token?: string;
                        sheet_id?: string;
                        float_image_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                float_image?: {
                                    float_image_id?: string;
                                    float_image_token?: string;
                                    range?: string;
                                    width?: number;
                                    height?: number;
                                    offset_x?: number;
                                    offset_y?: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/float_images/:float_image_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.float_image&apiName=create&version=v3 click to debug }
             */
            create: async (
                payload?: {
                    data?: {
                        float_image_id?: string;
                        float_image_token?: string;
                        range?: string;
                        width?: number;
                        height?: number;
                        offset_x?: number;
                        offset_y?: number;
                    };
                    path?: { spreadsheet_token?: string; sheet_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                float_image?: {
                                    float_image_id?: string;
                                    float_image_token?: string;
                                    range?: string;
                                    width?: number;
                                    height?: number;
                                    offset_x?: number;
                                    offset_y?: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/float_images`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.float_image&apiName=query&version=v3 click to debug }
             */
            query: async (
                payload?: {
                    path?: { spreadsheet_token?: string; sheet_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    float_image_id?: string;
                                    float_image_token?: string;
                                    range?: string;
                                    width?: number;
                                    height?: number;
                                    offset_x?: number;
                                    offset_y?: number;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/float_images/query`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        spreadsheetSheetFilter: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter&apiName=update&version=v3 click to debug }
             */
            update: async (
                payload?: {
                    data: {
                        col: string;
                        condition: {
                            filter_type: string;
                            compare_type?: string;
                            expected: Array<string>;
                        };
                    };
                    path?: { spreadsheet_token?: string; sheet_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter&apiName=create&version=v3 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        range: string;
                        col: string;
                        condition: {
                            filter_type: string;
                            compare_type?: string;
                            expected: Array<string>;
                        };
                    };
                    path?: { spreadsheet_token?: string; sheet_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter&apiName=get&version=v3 click to debug }
             */
            get: async (
                payload?: {
                    path?: { spreadsheet_token?: string; sheet_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                sheet_filter_info?: {
                                    range: string;
                                    filtered_out_rows: Array<number>;
                                    filter_infos: Array<{
                                        col: string;
                                        conditions: Array<{
                                            filter_type: string;
                                            compare_type?: string;
                                            expected: Array<string>;
                                        }>;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter&apiName=delete&version=v3 click to debug }
             */
            delete: async (
                payload?: {
                    path?: { spreadsheet_token?: string; sheet_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        spreadsheetSheetFilterView: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view&apiName=get&version=v3 click to debug }
             */
            get: async (
                payload?: {
                    path?: {
                        spreadsheet_token?: string;
                        sheet_id?: string;
                        filter_view_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                filter_view?: {
                                    filter_view_id?: string;
                                    filter_view_name?: string;
                                    range?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view&apiName=create&version=v3 click to debug }
             */
            create: async (
                payload?: {
                    data?: {
                        filter_view_id?: string;
                        filter_view_name?: string;
                        range?: string;
                    };
                    path?: { spreadsheet_token?: string; sheet_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                filter_view?: {
                                    filter_view_id?: string;
                                    filter_view_name?: string;
                                    range?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view&apiName=query&version=v3 click to debug }
             */
            query: async (
                payload?: {
                    path?: { spreadsheet_token?: string; sheet_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    filter_view_id?: string;
                                    filter_view_name?: string;
                                    range?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/query`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view&apiName=patch&version=v3 click to debug }
             */
            patch: async (
                payload?: {
                    data?: { filter_view_name?: string; range?: string };
                    path?: {
                        spreadsheet_token?: string;
                        sheet_id?: string;
                        filter_view_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                filter_view?: {
                                    filter_view_id?: string;
                                    filter_view_name?: string;
                                    range?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view&apiName=delete&version=v3 click to debug }
             */
            delete: async (
                payload?: {
                    path?: {
                        spreadsheet_token?: string;
                        sheet_id?: string;
                        filter_view_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        spreadsheetSheetFilterViewCondition: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view.condition&apiName=get&version=v3 click to debug }
             */
            get: async (
                payload?: {
                    path?: {
                        spreadsheet_token?: string;
                        sheet_id?: string;
                        filter_view_id?: string;
                        condition_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                condition?: {
                                    condition_id?: string;
                                    filter_type?: string;
                                    compare_type?: string;
                                    expected?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id/conditions/:condition_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view.condition&apiName=delete&version=v3 click to debug }
             */
            delete: async (
                payload?: {
                    path?: {
                        spreadsheet_token?: string;
                        sheet_id?: string;
                        filter_view_id?: string;
                        condition_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id/conditions/:condition_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view.condition&apiName=create&version=v3 click to debug }
             */
            create: async (
                payload?: {
                    data?: {
                        condition_id?: string;
                        filter_type?: string;
                        compare_type?: string;
                        expected?: Array<string>;
                    };
                    path?: {
                        spreadsheet_token?: string;
                        sheet_id?: string;
                        filter_view_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                condition?: {
                                    condition_id?: string;
                                    filter_type?: string;
                                    compare_type?: string;
                                    expected?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id/conditions`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view.condition&apiName=update&version=v3 click to debug }
             */
            update: async (
                payload?: {
                    data?: {
                        filter_type?: string;
                        compare_type?: string;
                        expected?: Array<string>;
                    };
                    path?: {
                        spreadsheet_token?: string;
                        sheet_id?: string;
                        filter_view_id?: string;
                        condition_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                condition?: {
                                    condition_id?: string;
                                    filter_type?: string;
                                    compare_type?: string;
                                    expected?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id/conditions/:condition_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet.filter_view.condition&apiName=query&version=v3 click to debug }
             */
            query: async (
                payload?: {
                    path?: {
                        spreadsheet_token?: string;
                        sheet_id?: string;
                        filter_view_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    condition_id?: string;
                                    filter_type?: string;
                                    compare_type?: string;
                                    expected?: Array<string>;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id/conditions/query`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        spreadsheetSheet: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet&apiName=move_dimension&version=v3 click to debug }
             */
            moveDimension: async (
                payload?: {
                    data?: {
                        source?: {
                            major_dimension?: string;
                            start_index?: number;
                            end_index?: number;
                        };
                        destination_index?: number;
                    };
                    path?: { spreadsheet_token?: string; sheet_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/move_dimension`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet&apiName=find&version=v3 click to debug }
             */
            find: async (
                payload?: {
                    data: {
                        find_condition: {
                            range: string;
                            match_case?: boolean;
                            match_entire_cell?: boolean;
                            search_by_regex?: boolean;
                            include_formulas?: boolean;
                        };
                        find: string;
                    };
                    path?: { spreadsheet_token?: string; sheet_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                find_result?: {
                                    matched_cells?: Array<string>;
                                    matched_formula_cells?: Array<string>;
                                    rows_count?: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/find`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet.sheet&apiName=replace&version=v3 click to debug }
             */
            replace: async (
                payload?: {
                    data: {
                        find_condition: {
                            range: string;
                            match_case?: boolean;
                            match_entire_cell?: boolean;
                            search_by_regex?: boolean;
                            include_formulas?: boolean;
                        };
                        find: string;
                        replacement: string;
                    };
                    path?: { spreadsheet_token?: string; sheet_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                replace_result?: {
                                    matched_cells?: Array<string>;
                                    matched_formula_cells?: Array<string>;
                                    rows_count?: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/replace`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        spreadsheet: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=sheets&resource=spreadsheet&apiName=create&version=v3 click to debug }
             */
            create: async (
                payload?: {
                    data?: { title?: string; folder_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                spreadsheet?: {
                                    title?: string;
                                    folder_token?: string;
                                    url?: string;
                                    spreadsheet_token?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/sheets/v3/spreadsheets`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };

    speech_to_text = {
        speech: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=speech_to_text&resource=speech&apiName=stream_recognize&version=v1 click to debug }
             */
            streamRecognize: async (
                payload?: {
                    data: {
                        speech: { speech?: string };
                        config: {
                            stream_id: string;
                            sequence_id: number;
                            action: number;
                            format: string;
                            engine_type: string;
                        };
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                stream_id: string;
                                sequence_id: number;
                                recognition_text: string;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/speech_to_text/v1/speech/stream_recognize`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=speech_to_text&resource=speech&apiName=file_recognize&version=v1 click to debug }
             */
            fileRecognize: async (
                payload?: {
                    data: {
                        speech: { speech?: string };
                        config: {
                            file_id: string;
                            format: string;
                            engine_type: string;
                        };
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { recognition_text: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/speech_to_text/v1/speech/file_recognize`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };

    spend = {};

    sup_project = {};

    task = {
        taskReminder: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.reminder&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                    path?: { task_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/task/v1/tasks/:task_id/reminders`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    id?: string;
                                                    relative_fire_minute: number;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.reminder&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                    path?: { task_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id?: string;
                                    relative_fire_minute: number;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/reminders`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.reminder&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: { relative_fire_minute: number };
                    path: { task_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                reminder?: {
                                    id?: string;
                                    relative_fire_minute: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/reminders`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.reminder&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path: { task_id: string; reminder_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/reminders/:reminder_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        taskComment: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.comment&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path: { task_id: string; comment_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/comments/:comment_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.comment&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    path: { task_id: string; comment_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                comment?: {
                                    content?: string;
                                    parent_id?: string;
                                    id?: string;
                                    create_milli_time?: string;
                                    rich_content?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/comments/:comment_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.comment&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        list_direction?: number;
                    };
                    path?: { task_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/task/v1/tasks/:task_id/comments`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    content?: string;
                                                    parent_id?: string;
                                                    id?: string;
                                                    create_milli_time?: string;
                                                    rich_content?: string;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.comment&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        list_direction?: number;
                    };
                    path?: { task_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    content?: string;
                                    parent_id?: string;
                                    id?: string;
                                    create_milli_time?: string;
                                    rich_content?: string;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/comments`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.comment&apiName=update&version=v1 click to debug }
             */
            update: async (
                payload?: {
                    data?: { content?: string; rich_content?: string };
                    path: { task_id: string; comment_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                comment?: {
                                    content?: string;
                                    parent_id?: string;
                                    id?: string;
                                    create_milli_time?: string;
                                    rich_content?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/comments/:comment_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.comment&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data?: {
                        content?: string;
                        parent_id?: string;
                        id?: string;
                        create_milli_time?: string;
                        rich_content?: string;
                    };
                    path: { task_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                comment?: {
                                    content?: string;
                                    parent_id?: string;
                                    id?: string;
                                    create_milli_time?: string;
                                    rich_content?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/comments`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        taskCollaborator: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.collaborator&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { task_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/task/v1/tasks/:task_id/collaborators`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    id?: string;
                                                    id_list?: Array<string>;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.collaborator&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { task_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id?: string;
                                    id_list?: Array<string>;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/collaborators`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.collaborator&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data?: { id?: string; id_list?: Array<string> };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { task_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                collaborator: {
                                    id?: string;
                                    id_list?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/collaborators`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.collaborator&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { task_id: string; collaborator_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/collaborators/:collaborator_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        taskFollower: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.follower&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { task_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/task/v1/tasks/:task_id/followers`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    id?: string;
                                                    id_list?: Array<string>;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.follower&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { task_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id?: string;
                                    id_list?: Array<string>;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/followers`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.follower&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data?: { id?: string; id_list?: Array<string> };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { task_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                follower: {
                                    id?: string;
                                    id_list?: Array<string>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/followers`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task.follower&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { task_id: string; follower_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/followers/:follower_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        task: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task&apiName=batch_delete_follower&version=v1 click to debug }
             */
            batchDeleteFollower: async (
                payload?: {
                    data?: { id_list?: Array<string> };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { task_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { followers?: Array<string> };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/batch_delete_follower`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task&apiName=batch_delete_collaborator&version=v1 click to debug }
             */
            batchDeleteCollaborator: async (
                payload?: {
                    data?: { id_list?: Array<string> };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { task_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { collaborators?: Array<string> };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/batch_delete_collaborator`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { task_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                task?: {
                                    id?: string;
                                    summary?: string;
                                    description?: string;
                                    complete_time?: string;
                                    creator_id?: string;
                                    extra?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    due?: {
                                        time?: string;
                                        timezone?: string;
                                        is_all_day?: boolean;
                                    };
                                    origin: {
                                        platform_i18n_name: string;
                                        href?: { url?: string; title?: string };
                                    };
                                    can_edit?: boolean;
                                    custom?: string;
                                    source?: number;
                                    followers?: Array<{
                                        id?: string;
                                        id_list?: Array<string>;
                                    }>;
                                    collaborators?: Array<{
                                        id?: string;
                                        id_list?: Array<string>;
                                    }>;
                                    collaborator_ids?: Array<string>;
                                    follower_ids?: Array<string>;
                                    repeat_rule?: string;
                                    rich_summary?: string;
                                    rich_description?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        start_create_time?: string;
                        end_create_time?: string;
                        task_completed?: boolean;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/task/v1/tasks`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    id?: string;
                                                    summary?: string;
                                                    description?: string;
                                                    complete_time?: string;
                                                    creator_id?: string;
                                                    extra?: string;
                                                    create_time?: string;
                                                    update_time?: string;
                                                    due?: {
                                                        time?: string;
                                                        timezone?: string;
                                                        is_all_day?: boolean;
                                                    };
                                                    origin: {
                                                        platform_i18n_name: string;
                                                        href?: {
                                                            url?: string;
                                                            title?: string;
                                                        };
                                                    };
                                                    can_edit?: boolean;
                                                    custom?: string;
                                                    source?: number;
                                                    followers?: Array<{
                                                        id?: string;
                                                        id_list?: Array<string>;
                                                    }>;
                                                    collaborators?: Array<{
                                                        id?: string;
                                                        id_list?: Array<string>;
                                                    }>;
                                                    collaborator_ids?: Array<string>;
                                                    follower_ids?: Array<string>;
                                                    repeat_rule?: string;
                                                    rich_summary?: string;
                                                    rich_description?: string;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        start_create_time?: string;
                        end_create_time?: string;
                        task_completed?: boolean;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    id?: string;
                                    summary?: string;
                                    description?: string;
                                    complete_time?: string;
                                    creator_id?: string;
                                    extra?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    due?: {
                                        time?: string;
                                        timezone?: string;
                                        is_all_day?: boolean;
                                    };
                                    origin: {
                                        platform_i18n_name: string;
                                        href?: { url?: string; title?: string };
                                    };
                                    can_edit?: boolean;
                                    custom?: string;
                                    source?: number;
                                    followers?: Array<{
                                        id?: string;
                                        id_list?: Array<string>;
                                    }>;
                                    collaborators?: Array<{
                                        id?: string;
                                        id_list?: Array<string>;
                                    }>;
                                    collaborator_ids?: Array<string>;
                                    follower_ids?: Array<string>;
                                    repeat_rule?: string;
                                    rich_summary?: string;
                                    rich_description?: string;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path: { task_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task&apiName=complete&version=v1 click to debug }
             */
            complete: async (
                payload?: {
                    path: { task_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/complete`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task&apiName=uncomplete&version=v1 click to debug }
             */
            uncomplete: async (
                payload?: {
                    path: { task_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id/uncomplete`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task&apiName=patch&version=v1 click to debug }
             */
            patch: async (
                payload?: {
                    data: {
                        task: {
                            summary?: string;
                            description?: string;
                            extra?: string;
                            due?: {
                                time?: string;
                                timezone?: string;
                                is_all_day?: boolean;
                            };
                            origin?: {
                                platform_i18n_name: string;
                                href?: { url?: string; title?: string };
                            };
                            can_edit?: boolean;
                            custom?: string;
                            followers?: Array<{
                                id?: string;
                                id_list?: Array<string>;
                            }>;
                            collaborators?: Array<{
                                id?: string;
                                id_list?: Array<string>;
                            }>;
                            collaborator_ids?: Array<string>;
                            follower_ids?: Array<string>;
                            repeat_rule?: string;
                            rich_summary?: string;
                            rich_description?: string;
                        };
                        update_fields: Array<string>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { task_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                task?: {
                                    id?: string;
                                    summary?: string;
                                    description?: string;
                                    complete_time?: string;
                                    creator_id?: string;
                                    extra?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    due?: {
                                        time?: string;
                                        timezone?: string;
                                        is_all_day?: boolean;
                                    };
                                    origin: {
                                        platform_i18n_name: string;
                                        href?: { url?: string; title?: string };
                                    };
                                    can_edit?: boolean;
                                    custom?: string;
                                    source?: number;
                                    followers?: Array<{
                                        id?: string;
                                        id_list?: Array<string>;
                                    }>;
                                    collaborators?: Array<{
                                        id?: string;
                                        id_list?: Array<string>;
                                    }>;
                                    collaborator_ids?: Array<string>;
                                    follower_ids?: Array<string>;
                                    repeat_rule?: string;
                                    rich_summary?: string;
                                    rich_description?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks/:task_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=task&resource=task&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        summary: string;
                        description?: string;
                        extra?: string;
                        due?: {
                            time?: string;
                            timezone?: string;
                            is_all_day?: boolean;
                        };
                        origin: {
                            platform_i18n_name: string;
                            href?: { url?: string; title?: string };
                        };
                        can_edit?: boolean;
                        custom?: string;
                        collaborator_ids?: Array<string>;
                        follower_ids?: Array<string>;
                        repeat_rule?: string;
                        rich_summary?: string;
                        rich_description?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                task?: {
                                    id?: string;
                                    summary?: string;
                                    description?: string;
                                    complete_time?: string;
                                    creator_id?: string;
                                    extra?: string;
                                    create_time?: string;
                                    update_time?: string;
                                    due?: {
                                        time?: string;
                                        timezone?: string;
                                        is_all_day?: boolean;
                                    };
                                    origin: {
                                        platform_i18n_name: string;
                                        href?: { url?: string; title?: string };
                                    };
                                    can_edit?: boolean;
                                    custom?: string;
                                    source?: number;
                                    followers?: Array<{
                                        id?: string;
                                        id_list?: Array<string>;
                                    }>;
                                    collaborators?: Array<{
                                        id?: string;
                                        id_list?: Array<string>;
                                    }>;
                                    collaborator_ids?: Array<string>;
                                    follower_ids?: Array<string>;
                                    repeat_rule?: string;
                                    rich_summary?: string;
                                    rich_description?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/task/v1/tasks`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };

    tenant = {
        tenant: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=tenant&resource=tenant&apiName=query&version=v2 click to debug }
             */
            query: async (payload?: {}, options?: IRequestOptions) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                tenant?: {
                                    name: string;
                                    display_id: string;
                                    tenant_tag: number;
                                    tenant_key: string;
                                    avatar: {
                                        avatar_origin?: string;
                                        avatar_72?: string;
                                        avatar_240?: string;
                                        avatar_640?: string;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/tenant/v2/tenant/query`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };

    translation = {
        text: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=translation&resource=text&apiName=detect&version=v1 click to debug }
             */
            detect: async (
                payload?: {
                    data: { text: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { language: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/translation/v1/text/detect`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=translation&resource=text&apiName=translate&version=v1 click to debug }
             */
            translate: async (
                payload?: {
                    data: {
                        source_language: string;
                        text: string;
                        target_language: string;
                        glossary?: Array<{ from: string; to: string }>;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        { code?: number; msg?: string; data?: { text: string } }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/translation/v1/text/translate`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };

    unified_kms_log = {};

    vc = {
        reserve: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=reserve&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path?: { reserve_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/reserves/:reserve_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=reserve&apiName=get_active_meeting&version=v1 click to debug }
             */
            getActiveMeeting: async (
                payload?: {
                    params?: {
                        with_participants?: boolean;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { reserve_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                meeting?: {
                                    id?: string;
                                    topic?: string;
                                    url?: string;
                                    meeting_no?: string;
                                    create_time?: string;
                                    start_time?: string;
                                    end_time?: string;
                                    host_user?: {
                                        id?: string;
                                        user_type?: number;
                                    };
                                    status?: number;
                                    participant_count?: string;
                                    participant_count_accumulated?: string;
                                    participants?: Array<{
                                        id?: string;
                                        first_join_time?: string;
                                        final_leave_time?: string;
                                        in_meeting_duration?: string;
                                        user_type?: number;
                                        is_host?: boolean;
                                        is_cohost?: boolean;
                                        is_external?: boolean;
                                        status?: number;
                                    }>;
                                    ability?: {
                                        use_video?: boolean;
                                        use_audio?: boolean;
                                        use_share_screen?: boolean;
                                        use_follow_screen?: boolean;
                                        use_recording?: boolean;
                                        use_pstn?: boolean;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/reserves/:reserve_id/get_active_meeting`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=reserve&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { reserve_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                reserve?: {
                                    id?: string;
                                    meeting_no?: string;
                                    url?: string;
                                    app_link?: string;
                                    live_link?: string;
                                    end_time?: string;
                                    expire_status?: number;
                                    reserve_user_id?: string;
                                    meeting_settings?: {
                                        topic?: string;
                                        action_permissions?: Array<{
                                            permission: number;
                                            permission_checkers: Array<{
                                                check_field: number;
                                                check_mode: number;
                                                check_list: Array<string>;
                                            }>;
                                        }>;
                                        meeting_initial_type?: number;
                                        call_setting?: {
                                            callee: {
                                                id?: string;
                                                user_type: number;
                                                pstn_sip_info?: {
                                                    nickname?: string;
                                                    main_address: string;
                                                };
                                            };
                                        };
                                        auto_record?: boolean;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/reserves/:reserve_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=reserve&apiName=update&version=v1 click to debug }
             */
            update: async (
                payload?: {
                    data?: {
                        end_time?: string;
                        meeting_settings?: {
                            topic?: string;
                            action_permissions?: Array<{
                                permission: number;
                                permission_checkers: Array<{
                                    check_field: number;
                                    check_mode: number;
                                    check_list: Array<string>;
                                }>;
                            }>;
                            meeting_initial_type?: number;
                            call_setting?: {
                                callee: {
                                    id?: string;
                                    user_type: number;
                                    pstn_sip_info?: {
                                        nickname?: string;
                                        main_address: string;
                                    };
                                };
                            };
                            auto_record?: boolean;
                        };
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { reserve_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                reserve?: {
                                    id?: string;
                                    meeting_no?: string;
                                    url?: string;
                                    live_link?: string;
                                    end_time?: string;
                                    expire_status?: number;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/reserves/:reserve_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=reserve&apiName=apply&version=v1 click to debug }
             */
            apply: async (
                payload?: {
                    data: {
                        end_time?: string;
                        meeting_settings: {
                            topic?: string;
                            action_permissions?: Array<{
                                permission: number;
                                permission_checkers: Array<{
                                    check_field: number;
                                    check_mode: number;
                                    check_list: Array<string>;
                                }>;
                            }>;
                            meeting_initial_type?: number;
                            call_setting?: {
                                callee: {
                                    id?: string;
                                    user_type: number;
                                    pstn_sip_info?: {
                                        nickname?: string;
                                        main_address: string;
                                    };
                                };
                            };
                            auto_record?: boolean;
                        };
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                reserve?: {
                                    id?: string;
                                    meeting_no?: string;
                                    url?: string;
                                    app_link?: string;
                                    live_link?: string;
                                    end_time?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/reserves/apply`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        report: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=report&apiName=get_top_user&version=v1 click to debug }
             */
            getTopUser: async (
                payload?: {
                    params: {
                        start_time: string;
                        end_time: string;
                        limit: number;
                        order_by: number;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                top_user_report?: Array<{
                                    id?: string;
                                    name?: string;
                                    user_type?: number;
                                    meeting_count?: string;
                                    meeting_duration?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/reports/get_top_user`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=report&apiName=get_daily&version=v1 click to debug }
             */
            getDaily: async (
                payload?: {
                    params: { start_time: string; end_time: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                meeting_report?: {
                                    total_meeting_count?: string;
                                    total_meeting_duration?: string;
                                    total_participant_count?: string;
                                    daily_report?: Array<{
                                        date?: string;
                                        meeting_count?: string;
                                        meeting_duration?: string;
                                        participant_count?: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/reports/get_daily`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        meetingRecording: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting.recording&apiName=set_permission&version=v1 click to debug }
             */
            setPermission: async (
                payload?: {
                    data: {
                        permission_objects: Array<{
                            id?: string;
                            type: number;
                            permission: number;
                        }>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { meeting_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/meetings/:meeting_id/recording/set_permission`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting.recording&apiName=stop&version=v1 click to debug }
             */
            stop: async (
                payload?: {
                    path?: { meeting_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/meetings/:meeting_id/recording/stop`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting.recording&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    path?: { meeting_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                recording?: { url?: string; duration?: string };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/meetings/:meeting_id/recording`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting.recording&apiName=start&version=v1 click to debug }
             */
            start: async (
                payload?: {
                    data?: { timezone?: number };
                    path?: { meeting_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/meetings/:meeting_id/recording/start`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        meeting: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting&apiName=kickout&version=v1 click to debug }
             */
            kickout: async (
                payload?: {
                    data: {
                        kickout_users: Array<{
                            id?: string;
                            user_type?: number;
                        }>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { meeting_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                kickout_results?: Array<{
                                    id?: string;
                                    user_type?: number;
                                    result?: number;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/meetings/:meeting_id/kickout`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting&apiName=end&version=v1 click to debug }
             */
            end: async (
                payload?: {
                    path?: { meeting_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/meetings/:meeting_id/end`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    params?: {
                        with_participants?: boolean;
                        with_meeting_ability?: boolean;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { meeting_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                meeting?: {
                                    id?: string;
                                    topic?: string;
                                    url?: string;
                                    meeting_no?: string;
                                    create_time?: string;
                                    start_time?: string;
                                    end_time?: string;
                                    host_user?: {
                                        id?: string;
                                        user_type?: number;
                                    };
                                    status?: number;
                                    participant_count?: string;
                                    participant_count_accumulated?: string;
                                    participants?: Array<{
                                        id?: string;
                                        first_join_time?: string;
                                        final_leave_time?: string;
                                        in_meeting_duration?: string;
                                        user_type?: number;
                                        is_host?: boolean;
                                        is_cohost?: boolean;
                                        is_external?: boolean;
                                        status?: number;
                                    }>;
                                    ability?: {
                                        use_video?: boolean;
                                        use_audio?: boolean;
                                        use_share_screen?: boolean;
                                        use_follow_screen?: boolean;
                                        use_recording?: boolean;
                                        use_pstn?: boolean;
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/meetings/:meeting_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting&apiName=invite&version=v1 click to debug }
             */
            invite: async (
                payload?: {
                    data: {
                        invitees: Array<{ id?: string; user_type?: number }>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { meeting_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                invite_results?: Array<{
                                    id?: string;
                                    user_type?: number;
                                    status?: number;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/meetings/:meeting_id/invite`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting&apiName=set_host&version=v1 click to debug }
             */
            setHost: async (
                payload?: {
                    data: {
                        host_user: { id?: string; user_type?: number };
                        old_host_user?: { id?: string; user_type?: number };
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path?: { meeting_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                host_user?: { id?: string; user_type?: number };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/meetings/:meeting_id/set_host`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting&apiName=list_by_no&version=v1 click to debug }
             */
            listByNoWithIterator: async (
                payload?: {
                    params: {
                        meeting_no: string;
                        start_time: string;
                        end_time: string;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/vc/v1/meetings/list_by_no`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                meeting_briefs?: Array<{
                                                    id?: string;
                                                    topic?: string;
                                                    url?: string;
                                                    meeting_no?: string;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=meeting&apiName=list_by_no&version=v1 click to debug }
             */
            listByNo: async (
                payload?: {
                    params: {
                        meeting_no: string;
                        start_time: string;
                        end_time: string;
                        page_token?: string;
                        page_size?: number;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                meeting_briefs?: Array<{
                                    id?: string;
                                    topic?: string;
                                    url?: string;
                                    meeting_no?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/meetings/list_by_no`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        roomConfig: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room_config&apiName=query&version=v1 click to debug }
             */
            query: async (
                payload?: {
                    params: {
                        scope: number;
                        country_id?: string;
                        district_id?: string;
                        building_id?: string;
                        floor_name?: string;
                        room_id?: string;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                room_background?: string;
                                display_background?: string;
                                digital_signage?: {
                                    enable?: boolean;
                                    mute?: boolean;
                                    start_display?: number;
                                    stop_display?: number;
                                    materials?: Array<{
                                        id?: string;
                                        name?: string;
                                        material_type?: number;
                                        url?: string;
                                        duration?: number;
                                        cover?: string;
                                        md5?: string;
                                        vid?: string;
                                        size?: string;
                                    }>;
                                };
                                room_box_digital_signage?: {
                                    enable?: boolean;
                                    mute?: boolean;
                                    start_display?: number;
                                    stop_display?: number;
                                    materials?: Array<{
                                        id?: string;
                                        name?: string;
                                        material_type?: number;
                                        url?: string;
                                        duration?: number;
                                        cover?: string;
                                        md5?: string;
                                        vid?: string;
                                        size?: string;
                                    }>;
                                };
                                room_status?: {
                                    status: boolean;
                                    schedule_status?: boolean;
                                    disable_start_time?: string;
                                    disable_end_time?: string;
                                    disable_reason?: string;
                                    contact_ids?: Array<string>;
                                    disable_notice?: boolean;
                                    resume_notice?: boolean;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/room_configs/query`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=room_config&apiName=set&version=v1 click to debug }
             */
            set: async (
                payload?: {
                    data: {
                        scope: number;
                        country_id?: string;
                        district_id?: string;
                        building_id?: string;
                        floor_name?: string;
                        room_id?: string;
                        room_config: {
                            room_background?: string;
                            display_background?: string;
                            digital_signage?: {
                                enable?: boolean;
                                mute?: boolean;
                                start_display?: number;
                                stop_display?: number;
                                materials?: Array<{
                                    id?: string;
                                    name?: string;
                                    material_type?: number;
                                    url?: string;
                                    duration?: number;
                                    cover?: string;
                                    md5?: string;
                                    vid?: string;
                                    size?: string;
                                }>;
                            };
                            room_box_digital_signage?: {
                                enable?: boolean;
                                mute?: boolean;
                                start_display?: number;
                                stop_display?: number;
                                materials?: Array<{
                                    id?: string;
                                    name?: string;
                                    material_type?: number;
                                    url?: string;
                                    duration?: number;
                                    cover?: string;
                                    md5?: string;
                                    vid?: string;
                                    size?: string;
                                }>;
                            };
                            room_status?: {
                                status: boolean;
                                disable_start_time?: string;
                                disable_end_time?: string;
                                disable_reason?: string;
                                contact_ids?: Array<string>;
                                disable_notice?: boolean;
                                resume_notice?: boolean;
                            };
                        };
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/room_configs/set`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        export: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=export&apiName=meeting_list&version=v1 click to debug }
             */
            meetingList: async (
                payload?: {
                    data: {
                        start_time: string;
                        end_time: string;
                        meeting_no?: string;
                        user_id?: string;
                        room_id?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { task_id?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/exports/meeting_list`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=export&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    path?: { task_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { status: number; url?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/exports/:task_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=export&apiName=participant_quality_list&version=v1 click to debug }
             */
            participantQualityList: async (
                payload?: {
                    data: {
                        meeting_start_time: string;
                        meeting_end_time: string;
                        meeting_no: string;
                        join_time: string;
                        user_id?: string;
                        room_id?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { task_id?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/exports/participant_quality_list`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=vc&resource=export&apiName=participant_list&version=v1 click to debug }
             */
            participantList: async (
                payload?: {
                    data: {
                        meeting_start_time: string;
                        meeting_end_time: string;
                        meeting_no: string;
                        user_id?: string;
                        room_id?: string;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { task_id?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/vc/v1/exports/participant_list`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };

    wiki = {
        space: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space&apiName=create&version=v2 click to debug }
             */
            create: async (
                payload?: {
                    data?: { name?: string; description?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                space?: {
                                    name?: string;
                                    description?: string;
                                    space_id?: string;
                                    space_type?: "team" | "person";
                                    visibility?: "public" | "private";
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/wiki/v2/spaces`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space&apiName=get&version=v2 click to debug }
             */
            get: async (
                payload?: {
                    path?: { space_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                space?: {
                                    name?: string;
                                    description?: string;
                                    space_id?: string;
                                    space_type?: "team" | "person";
                                    visibility?: "public" | "private";
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/wiki/v2/spaces/:space_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space&apiName=list&version=v2 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/wiki/v2/spaces`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    name?: string;
                                                    description?: string;
                                                    space_id?: string;
                                                    space_type?:
                                                        | "team"
                                                        | "person";
                                                    visibility?:
                                                        | "public"
                                                        | "private";
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space&apiName=list&version=v2 click to debug }
             */
            list: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    name?: string;
                                    description?: string;
                                    space_id?: string;
                                    space_type?: "team" | "person";
                                    visibility?: "public" | "private";
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/wiki/v2/spaces`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space&apiName=get_node&version=v2 click to debug }
             */
            getNode: async (
                payload?: {
                    params: { token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                node?: {
                                    space_id?: string;
                                    node_token?: string;
                                    obj_token?: string;
                                    obj_type:
                                        | "doc"
                                        | "sheet"
                                        | "mindnote"
                                        | "bitable"
                                        | "file"
                                        | "docx";
                                    parent_node_token?: string;
                                    node_type: "origin" | "shortcut";
                                    origin_node_token?: string;
                                    origin_space_id?: string;
                                    has_child?: boolean;
                                    title?: string;
                                    obj_create_time?: string;
                                    obj_edit_time?: string;
                                    node_create_time?: string;
                                    creator?: string;
                                    owner?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/wiki/v2/spaces/get_node`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        spaceSetting: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space.setting&apiName=update&version=v2 click to debug }
             */
            update: async (
                payload?: {
                    data?: {
                        create_setting?: string;
                        security_setting?: string;
                        comment_setting?: string;
                    };
                    path?: { space_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                setting?: {
                                    create_setting?: string;
                                    security_setting?: string;
                                    comment_setting?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/wiki/v2/spaces/:space_id/setting`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        spaceMember: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space.member&apiName=create&version=v2 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        member_type: string;
                        member_id: string;
                        member_role: string;
                    };
                    params?: { need_notification?: boolean };
                    path?: { space_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                member?: {
                                    member_type: string;
                                    member_id: string;
                                    member_role: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/wiki/v2/spaces/:space_id/members`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space.member&apiName=delete&version=v2 click to debug }
             */
            delete: async (
                payload?: {
                    data: { member_type: string; member_role: string };
                    path: { space_id: string; member_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                member: {
                                    member_type: string;
                                    member_id: string;
                                    member_role: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/wiki/v2/spaces/:space_id/members/:member_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        spaceNode: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space.node&apiName=move_docs_to_wiki&version=v2 click to debug }
             */
            moveDocsToWiki: async (
                payload?: {
                    data: {
                        parent_wiki_token?: string;
                        obj_type:
                            | "doc"
                            | "sheet"
                            | "bitable"
                            | "mindnote"
                            | "docx"
                            | "file";
                        obj_token: string;
                        apply?: boolean;
                    };
                    path: { space_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                wiki_token?: string;
                                task_id?: string;
                                applied?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/wiki/v2/spaces/:space_id/nodes/move_docs_to_wiki`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space.node&apiName=move&version=v2 click to debug }
             */
            move: async (
                payload?: {
                    data?: {
                        target_parent_token?: string;
                        target_space_id?: string;
                    };
                    path: { space_id: string; node_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                node?: {
                                    space_id?: string;
                                    node_token?: string;
                                    obj_token?: string;
                                    obj_type:
                                        | "doc"
                                        | "sheet"
                                        | "mindnote"
                                        | "bitable"
                                        | "file"
                                        | "docx";
                                    parent_node_token?: string;
                                    node_type: "origin" | "shortcut";
                                    origin_node_token?: string;
                                    origin_space_id?: string;
                                    has_child?: boolean;
                                    title?: string;
                                    obj_create_time?: string;
                                    obj_edit_time?: string;
                                    node_create_time?: string;
                                    creator?: string;
                                    owner?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/wiki/v2/spaces/:space_id/nodes/:node_token/move`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space.node&apiName=list&version=v2 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        parent_node_token?: string;
                    };
                    path?: { space_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/wiki/v2/spaces/:space_id/nodes`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    space_id?: string;
                                                    node_token?: string;
                                                    obj_token?: string;
                                                    obj_type:
                                                        | "doc"
                                                        | "sheet"
                                                        | "mindnote"
                                                        | "bitable"
                                                        | "file"
                                                        | "docx";
                                                    parent_node_token?: string;
                                                    node_type:
                                                        | "origin"
                                                        | "shortcut";
                                                    origin_node_token?: string;
                                                    origin_space_id?: string;
                                                    has_child?: boolean;
                                                    title?: string;
                                                    obj_create_time?: string;
                                                    obj_edit_time?: string;
                                                    node_create_time?: string;
                                                    creator?: string;
                                                    owner?: string;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space.node&apiName=list&version=v2 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        page_size?: number;
                        page_token?: string;
                        parent_node_token?: string;
                    };
                    path?: { space_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    space_id?: string;
                                    node_token?: string;
                                    obj_token?: string;
                                    obj_type:
                                        | "doc"
                                        | "sheet"
                                        | "mindnote"
                                        | "bitable"
                                        | "file"
                                        | "docx";
                                    parent_node_token?: string;
                                    node_type: "origin" | "shortcut";
                                    origin_node_token?: string;
                                    origin_space_id?: string;
                                    has_child?: boolean;
                                    title?: string;
                                    obj_create_time?: string;
                                    obj_edit_time?: string;
                                    node_create_time?: string;
                                    creator?: string;
                                    owner?: string;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/wiki/v2/spaces/:space_id/nodes`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space.node&apiName=create&version=v2 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        obj_type:
                            | "doc"
                            | "sheet"
                            | "mindnote"
                            | "bitable"
                            | "file"
                            | "docx";
                        parent_node_token?: string;
                        node_type: "origin" | "shortcut";
                        origin_node_token?: string;
                        title?: string;
                        creator?: string;
                        owner?: string;
                    };
                    path?: { space_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                node?: {
                                    space_id?: string;
                                    node_token?: string;
                                    obj_token?: string;
                                    obj_type:
                                        | "doc"
                                        | "sheet"
                                        | "mindnote"
                                        | "bitable"
                                        | "file"
                                        | "docx";
                                    parent_node_token?: string;
                                    node_type: "origin" | "shortcut";
                                    origin_node_token?: string;
                                    origin_space_id?: string;
                                    has_child?: boolean;
                                    title?: string;
                                    obj_create_time?: string;
                                    obj_edit_time?: string;
                                    node_create_time?: string;
                                    creator?: string;
                                    owner?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/wiki/v2/spaces/:space_id/nodes`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space.node&apiName=copy&version=v2 click to debug }
             */
            copy: async (
                payload?: {
                    data?: {
                        target_parent_token?: string;
                        target_space_id?: string;
                        title?: string;
                    };
                    path?: { space_id?: string; node_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                node: {
                                    space_id?: string;
                                    node_token?: string;
                                    obj_token?: string;
                                    obj_type:
                                        | "doc"
                                        | "sheet"
                                        | "mindnote"
                                        | "bitable"
                                        | "file"
                                        | "docx";
                                    parent_node_token?: string;
                                    node_type: "origin" | "shortcut";
                                    origin_node_token?: string;
                                    origin_space_id?: string;
                                    has_child?: boolean;
                                    title?: string;
                                    obj_create_time?: string;
                                    obj_edit_time?: string;
                                    node_create_time?: string;
                                    creator?: string;
                                    owner?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/wiki/v2/spaces/:space_id/nodes/:node_token/copy`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=space.node&apiName=update_title&version=v2 click to debug }
             */
            updateTitle: async (
                payload?: {
                    data: { title: string };
                    path?: { space_id?: string; node_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/wiki/v2/spaces/:space_id/nodes/:node_token/update_title`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        task: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=wiki&resource=task&apiName=get&version=v2 click to debug }
             */
            get: async (
                payload?: {
                    params: { task_type: "move" };
                    path?: { task_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                task: {
                                    task_id: string;
                                    move_result?: Array<{
                                        node: {
                                            space_id?: string;
                                            node_token?: string;
                                            obj_token?: string;
                                            obj_type:
                                                | "doc"
                                                | "sheet"
                                                | "mindnote"
                                                | "bitable"
                                                | "file"
                                                | "docx";
                                            parent_node_token?: string;
                                            node_type: "origin" | "shortcut";
                                            origin_node_token?: string;
                                            origin_space_id?: string;
                                            has_child?: boolean;
                                            title?: string;
                                            obj_create_time?: string;
                                            obj_edit_time?: string;
                                            node_create_time?: string;
                                            creator?: string;
                                            owner?: string;
                                        };
                                        status: number;
                                        status_msg: string;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/wiki/v2/tasks/:task_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };

    workplace = {};

    bitable = {
        appTableField: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.field&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: {
                        view_id?: string;
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { app_token: string; table_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                total?: number;
                                                items?: Array<{
                                                    field_id?: string;
                                                    field_name: string;
                                                    type: number;
                                                    property?: {
                                                        options?: Array<{
                                                            name?: string;
                                                            id?: string;
                                                            color?: number;
                                                        }>;
                                                        formatter?: string;
                                                        date_formatter?: string;
                                                        auto_fill?: boolean;
                                                        multiple?: boolean;
                                                        table_id?: string;
                                                        table_name?: string;
                                                        back_field_name?: string;
                                                        auto_serial?: {
                                                            type:
                                                                | "custom"
                                                                | "auto_increment_number";
                                                            options?: Array<{
                                                                type:
                                                                    | "system_number"
                                                                    | "fixed_text"
                                                                    | "created_time";
                                                                value: string;
                                                            }>;
                                                        };
                                                        location?: {
                                                            input_type:
                                                                | "only_mobile"
                                                                | "not_limit";
                                                        };
                                                    };
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.field&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        view_id?: string;
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { app_token: string; table_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                total?: number;
                                items?: Array<{
                                    field_id?: string;
                                    field_name: string;
                                    type: number;
                                    property?: {
                                        options?: Array<{
                                            name?: string;
                                            id?: string;
                                            color?: number;
                                        }>;
                                        formatter?: string;
                                        date_formatter?: string;
                                        auto_fill?: boolean;
                                        multiple?: boolean;
                                        table_id?: string;
                                        table_name?: string;
                                        back_field_name?: string;
                                        auto_serial?: {
                                            type:
                                                | "custom"
                                                | "auto_increment_number";
                                            options?: Array<{
                                                type:
                                                    | "system_number"
                                                    | "fixed_text"
                                                    | "created_time";
                                                value: string;
                                            }>;
                                        };
                                        location?: {
                                            input_type:
                                                | "only_mobile"
                                                | "not_limit";
                                        };
                                    };
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.field&apiName=update&version=v1 click to debug }
             */
            update: async (
                payload?: {
                    data: {
                        field_name: string;
                        type: number;
                        property?: {
                            options?: Array<{
                                name?: string;
                                id?: string;
                                color?: number;
                            }>;
                            formatter?: string;
                            date_formatter?: string;
                            auto_fill?: boolean;
                            multiple?: boolean;
                            table_id?: string;
                            table_name?: string;
                            back_field_name?: string;
                            auto_serial?: {
                                type: "custom" | "auto_increment_number";
                                options?: Array<{
                                    type:
                                        | "system_number"
                                        | "fixed_text"
                                        | "created_time";
                                    value: string;
                                }>;
                            };
                            location?: {
                                input_type: "only_mobile" | "not_limit";
                            };
                        };
                    };
                    path: {
                        app_token: string;
                        table_id: string;
                        field_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                field?: {
                                    field_id?: string;
                                    field_name: string;
                                    type: number;
                                    property?: {
                                        options?: Array<{
                                            name?: string;
                                            id?: string;
                                            color?: number;
                                        }>;
                                        formatter?: string;
                                        date_formatter?: string;
                                        auto_fill?: boolean;
                                        multiple?: boolean;
                                        table_id?: string;
                                        table_name?: string;
                                        back_field_name?: string;
                                        auto_serial?: {
                                            type:
                                                | "custom"
                                                | "auto_increment_number";
                                            options?: Array<{
                                                type:
                                                    | "system_number"
                                                    | "fixed_text"
                                                    | "created_time";
                                                value: string;
                                            }>;
                                        };
                                        location?: {
                                            input_type:
                                                | "only_mobile"
                                                | "not_limit";
                                        };
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields/:field_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.field&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        field_name: string;
                        type: number;
                        property?: {
                            options?: Array<{
                                name?: string;
                                id?: string;
                                color?: number;
                            }>;
                            formatter?: string;
                            date_formatter?: string;
                            auto_fill?: boolean;
                            multiple?: boolean;
                            table_id?: string;
                            table_name?: string;
                            back_field_name?: string;
                            auto_serial?: {
                                type: "custom" | "auto_increment_number";
                                options?: Array<{
                                    type:
                                        | "system_number"
                                        | "fixed_text"
                                        | "created_time";
                                    value: string;
                                }>;
                            };
                            location?: {
                                input_type: "only_mobile" | "not_limit";
                            };
                        };
                    };
                    path: { app_token: string; table_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                field?: {
                                    field_id?: string;
                                    field_name: string;
                                    type: number;
                                    property?: {
                                        options?: Array<{
                                            name?: string;
                                            id?: string;
                                            color?: number;
                                        }>;
                                        formatter?: string;
                                        date_formatter?: string;
                                        auto_fill?: boolean;
                                        multiple?: boolean;
                                        table_id?: string;
                                        table_name?: string;
                                        back_field_name?: string;
                                        auto_serial?: {
                                            type:
                                                | "custom"
                                                | "auto_increment_number";
                                            options?: Array<{
                                                type:
                                                    | "system_number"
                                                    | "fixed_text"
                                                    | "created_time";
                                                value: string;
                                            }>;
                                        };
                                        location?: {
                                            input_type:
                                                | "only_mobile"
                                                | "not_limit";
                                        };
                                    };
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.field&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path: {
                        app_token: string;
                        table_id: string;
                        field_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { field_id?: string; deleted?: boolean };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields/:field_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        appTableForm: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.form&apiName=patch&version=v1 click to debug }
             */
            patch: async (
                payload?: {
                    data?: {
                        name?: string;
                        description?: string;
                        shared?: boolean;
                        shared_limit?:
                            | "off"
                            | "tenant_editable"
                            | "anyone_editable";
                        submit_limit_once?: boolean;
                    };
                    path: {
                        app_token: string;
                        table_id: string;
                        form_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                form: {
                                    name?: string;
                                    description?: string;
                                    shared?: boolean;
                                    shared_url?: string;
                                    shared_limit?:
                                        | "off"
                                        | "tenant_editable"
                                        | "anyone_editable";
                                    submit_limit_once?: boolean;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/forms/:form_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.form&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    path: {
                        app_token: string;
                        table_id: string;
                        form_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                form: {
                                    name?: string;
                                    description?: string;
                                    shared?: boolean;
                                    shared_url?: string;
                                    shared_limit?:
                                        | "off"
                                        | "tenant_editable"
                                        | "anyone_editable";
                                    submit_limit_once?: boolean;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/forms/:form_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        app: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app&apiName=update&version=v1 click to debug }
             */
            update: async (
                payload?: {
                    data?: { name?: string; is_advanced?: boolean };
                    path: { app_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                app?: {
                                    app_token?: string;
                                    name?: string;
                                    is_advanced?: boolean;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    path: { app_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                app?: {
                                    app_token?: string;
                                    name?: string;
                                    revision?: number;
                                    is_advanced?: boolean;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        appRole: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.role&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                    path?: { app_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/bitable/v1/apps/:app_token/roles`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    role_name: string;
                                                    role_id?: string;
                                                    table_roles: Array<{
                                                        table_name?: string;
                                                        table_id?: string;
                                                        table_perm: number;
                                                        rec_rule?: {
                                                            conditions: Array<{
                                                                field_name: string;
                                                                operator?:
                                                                    | "is"
                                                                    | "isNot"
                                                                    | "contains"
                                                                    | "doesNotContain"
                                                                    | "isEmpty"
                                                                    | "isNotEmpty";
                                                                value?: Array<string>;
                                                                field_type?: number;
                                                            }>;
                                                            conjunction?:
                                                                | "and"
                                                                | "or";
                                                            other_perm?: number;
                                                        };
                                                        field_perm?: {};
                                                        allow_add_record?: boolean;
                                                        allow_delete_record?: boolean;
                                                    }>;
                                                    block_roles?: Array<{
                                                        block_id: string;
                                                        block_type?: "dashboard";
                                                        block_perm: number;
                                                    }>;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                                total?: number;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.role&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                    path?: { app_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    role_name: string;
                                    role_id?: string;
                                    table_roles: Array<{
                                        table_name?: string;
                                        table_id?: string;
                                        table_perm: number;
                                        rec_rule?: {
                                            conditions: Array<{
                                                field_name: string;
                                                operator?:
                                                    | "is"
                                                    | "isNot"
                                                    | "contains"
                                                    | "doesNotContain"
                                                    | "isEmpty"
                                                    | "isNotEmpty";
                                                value?: Array<string>;
                                                field_type?: number;
                                            }>;
                                            conjunction?: "and" | "or";
                                            other_perm?: number;
                                        };
                                        field_perm?: {};
                                        allow_add_record?: boolean;
                                        allow_delete_record?: boolean;
                                    }>;
                                    block_roles?: Array<{
                                        block_id: string;
                                        block_type?: "dashboard";
                                        block_perm: number;
                                    }>;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                                total?: number;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/roles`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.role&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path?: { app_token?: string; role_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.role&apiName=update&version=v1 click to debug }
             */
            update: async (
                payload?: {
                    data: {
                        role_name: string;
                        table_roles: Array<{
                            table_name?: string;
                            table_id?: string;
                            table_perm: number;
                            rec_rule?: {
                                conditions: Array<{
                                    field_name: string;
                                    operator?:
                                        | "is"
                                        | "isNot"
                                        | "contains"
                                        | "doesNotContain"
                                        | "isEmpty"
                                        | "isNotEmpty";
                                    value?: Array<string>;
                                }>;
                                conjunction?: "and" | "or";
                                other_perm?: number;
                            };
                            field_perm?: {};
                            allow_add_record?: boolean;
                            allow_delete_record?: boolean;
                        }>;
                        block_roles?: Array<{
                            block_id: string;
                            block_perm: number;
                        }>;
                    };
                    path?: { app_token?: string; role_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                role?: {
                                    role_name: string;
                                    role_id?: string;
                                    table_roles: Array<{
                                        table_name?: string;
                                        table_id?: string;
                                        table_perm: number;
                                        rec_rule?: {
                                            conditions: Array<{
                                                field_name: string;
                                                operator?:
                                                    | "is"
                                                    | "isNot"
                                                    | "contains"
                                                    | "doesNotContain"
                                                    | "isEmpty"
                                                    | "isNotEmpty";
                                                value?: Array<string>;
                                                field_type?: number;
                                            }>;
                                            conjunction?: "and" | "or";
                                            other_perm?: number;
                                        };
                                        field_perm?: {};
                                        allow_add_record?: boolean;
                                        allow_delete_record?: boolean;
                                    }>;
                                    block_roles?: Array<{
                                        block_id: string;
                                        block_type?: "dashboard";
                                        block_perm: number;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.role&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        role_name: string;
                        table_roles: Array<{
                            table_name?: string;
                            table_id?: string;
                            table_perm: number;
                            rec_rule?: {
                                conditions: Array<{
                                    field_name: string;
                                    operator?:
                                        | "is"
                                        | "isNot"
                                        | "contains"
                                        | "doesNotContain"
                                        | "isEmpty"
                                        | "isNotEmpty";
                                    value?: Array<string>;
                                }>;
                                conjunction?: "and" | "or";
                                other_perm?: number;
                            };
                            field_perm?: {};
                            allow_add_record?: boolean;
                            allow_delete_record?: boolean;
                        }>;
                        block_roles?: Array<{
                            block_id: string;
                            block_perm: number;
                        }>;
                    };
                    path?: { app_token?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                role?: {
                                    role_name: string;
                                    role_id?: string;
                                    table_roles: Array<{
                                        table_name?: string;
                                        table_id?: string;
                                        table_perm: number;
                                        rec_rule?: {
                                            conditions: Array<{
                                                field_name: string;
                                                operator?:
                                                    | "is"
                                                    | "isNot"
                                                    | "contains"
                                                    | "doesNotContain"
                                                    | "isEmpty"
                                                    | "isNotEmpty";
                                                value?: Array<string>;
                                                field_type?: number;
                                            }>;
                                            conjunction?: "and" | "or";
                                            other_perm?: number;
                                        };
                                        field_perm?: {};
                                        allow_add_record?: boolean;
                                        allow_delete_record?: boolean;
                                    }>;
                                    block_roles?: Array<{
                                        block_id: string;
                                        block_type?: "dashboard";
                                        block_perm: number;
                                    }>;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/roles`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        appRoleMember: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.role.member&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    params?: {
                        member_id_type?:
                            | "open_id"
                            | "union_id"
                            | "user_id"
                            | "chat_id"
                            | "department_id"
                            | "open_department_id";
                    };
                    path: {
                        app_token?: string;
                        role_id?: string;
                        member_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id/members/:member_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.role.member&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                    path: { app_token: string; role_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id/members`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    open_id?: string;
                                                    union_id?: string;
                                                    user_id?: string;
                                                    chat_id?: string;
                                                    department_id?: string;
                                                    open_department_id?: string;
                                                    member_name?: string;
                                                    member_en_name?: string;
                                                    member_type?:
                                                        | "user"
                                                        | "chat"
                                                        | "department";
                                                }>;
                                                has_more?: boolean;
                                                page_token?: string;
                                                total?: number;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.role.member&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                    path: { app_token: string; role_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    open_id?: string;
                                    union_id?: string;
                                    user_id?: string;
                                    chat_id?: string;
                                    department_id?: string;
                                    open_department_id?: string;
                                    member_name?: string;
                                    member_en_name?: string;
                                    member_type?:
                                        | "user"
                                        | "chat"
                                        | "department";
                                }>;
                                has_more?: boolean;
                                page_token?: string;
                                total?: number;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id/members`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.role.member&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: { member_id: string };
                    params?: {
                        member_id_type?:
                            | "open_id"
                            | "union_id"
                            | "user_id"
                            | "chat_id"
                            | "department_id"
                            | "open_department_id";
                    };
                    path?: { app_token?: string; role_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id/members`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.role.member&apiName=batch_create&version=v1 click to debug }
             */
            batchCreate: async (
                payload?: {
                    data: {
                        member_list: Array<{
                            type?:
                                | "open_id"
                                | "union_id"
                                | "user_id"
                                | "chat_id"
                                | "department_id"
                                | "open_department_id";
                            id: string;
                        }>;
                    };
                    path: { app_token: string; role_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id/members/batch_create`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.role.member&apiName=batch_delete&version=v1 click to debug }
             */
            batchDelete: async (
                payload?: {
                    data: {
                        member_list: Array<{
                            type?:
                                | "open_id"
                                | "union_id"
                                | "user_id"
                                | "chat_id"
                                | "department_id"
                                | "open_department_id";
                            id: string;
                        }>;
                    };
                    path: { app_token: string; role_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/roles/:role_id/members/batch_delete`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        appTableRecord: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.record&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: {
                        view_id?: string;
                        filter?: string;
                        sort?: string;
                        field_names?: string;
                        text_field_as_array?: boolean;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        display_formula_ref?: boolean;
                        automatic_fields?: boolean;
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { app_token: string; table_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                total?: number;
                                                items?: Array<{
                                                    record_id?: string;
                                                    created_by?: {
                                                        id?: string;
                                                        name?: string;
                                                        en_name?: string;
                                                        email?: string;
                                                    };
                                                    created_time?: number;
                                                    last_modified_by?: {
                                                        id?: string;
                                                        name?: string;
                                                        en_name?: string;
                                                        email?: string;
                                                    };
                                                    last_modified_time?: number;
                                                    fields: Map<
                                                        string,
                                                        | string
                                                        | boolean
                                                        | {
                                                              text?: string;
                                                              link?: string;
                                                          }
                                                        | {
                                                              location?: string;
                                                              pname?: string;
                                                              cityname?: string;
                                                              adname?: string;
                                                              address?: string;
                                                              name?: string;
                                                              full_address?: string;
                                                          }
                                                        | Array<string>
                                                        | Array<{
                                                              id?: string;
                                                              name?: string;
                                                              en_name?: string;
                                                              email?: string;
                                                          }>
                                                        | Array<{
                                                              file_token?: string;
                                                              name?: string;
                                                              type?: string;
                                                              size?: number;
                                                              url?: string;
                                                              tmp_url?: string;
                                                          }>
                                                    >;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.record&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: {
                        view_id?: string;
                        filter?: string;
                        sort?: string;
                        field_names?: string;
                        text_field_as_array?: boolean;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        display_formula_ref?: boolean;
                        automatic_fields?: boolean;
                        page_token?: string;
                        page_size?: number;
                    };
                    path: { app_token: string; table_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                total?: number;
                                items?: Array<{
                                    record_id?: string;
                                    created_by?: {
                                        id?: string;
                                        name?: string;
                                        en_name?: string;
                                        email?: string;
                                    };
                                    created_time?: number;
                                    last_modified_by?: {
                                        id?: string;
                                        name?: string;
                                        en_name?: string;
                                        email?: string;
                                    };
                                    last_modified_time?: number;
                                    fields: Map<
                                        string,
                                        | string
                                        | boolean
                                        | { text?: string; link?: string }
                                        | {
                                              location?: string;
                                              pname?: string;
                                              cityname?: string;
                                              adname?: string;
                                              address?: string;
                                              name?: string;
                                              full_address?: string;
                                          }
                                        | Array<string>
                                        | Array<{
                                              id?: string;
                                              name?: string;
                                              en_name?: string;
                                              email?: string;
                                          }>
                                        | Array<{
                                              file_token?: string;
                                              name?: string;
                                              type?: string;
                                              size?: number;
                                              url?: string;
                                              tmp_url?: string;
                                          }>
                                    >;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.record&apiName=get&version=v1 click to debug }
             */
            get: async (
                payload?: {
                    params?: {
                        text_field_as_array?: boolean;
                        user_id_type?: "user_id" | "union_id" | "open_id";
                        display_formula_ref?: boolean;
                        automatic_fields?: boolean;
                    };
                    path: {
                        app_token: string;
                        table_id: string;
                        record_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                record?: {
                                    record_id?: string;
                                    created_by?: {
                                        id?: string;
                                        name?: string;
                                        en_name?: string;
                                        email?: string;
                                    };
                                    created_time?: number;
                                    last_modified_by?: {
                                        id?: string;
                                        name?: string;
                                        en_name?: string;
                                        email?: string;
                                    };
                                    last_modified_time?: number;
                                    fields: Map<
                                        string,
                                        | string
                                        | boolean
                                        | { text?: string; link?: string }
                                        | {
                                              location?: string;
                                              pname?: string;
                                              cityname?: string;
                                              adname?: string;
                                              address?: string;
                                              name?: string;
                                              full_address?: string;
                                          }
                                        | Array<string>
                                        | Array<{
                                              id?: string;
                                              name?: string;
                                              en_name?: string;
                                              email?: string;
                                          }>
                                        | Array<{
                                              file_token?: string;
                                              name?: string;
                                              type?: string;
                                              size?: number;
                                              url?: string;
                                              tmp_url?: string;
                                          }>
                                    >;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/:record_id`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.record&apiName=update&version=v1 click to debug }
             */
            update: async (
                payload?: {
                    data: {
                        fields: Map<
                            string,
                            | string
                            | boolean
                            | { text?: string; link?: string }
                            | {
                                  location?: string;
                                  pname?: string;
                                  cityname?: string;
                                  adname?: string;
                                  address?: string;
                                  name?: string;
                                  full_address?: string;
                              }
                            | Array<string>
                            | Array<{
                                  id?: string;
                                  name?: string;
                                  en_name?: string;
                                  email?: string;
                              }>
                            | Array<{
                                  file_token?: string;
                                  name?: string;
                                  type?: string;
                                  size?: number;
                                  url?: string;
                                  tmp_url?: string;
                              }>
                        >;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: {
                        app_token: string;
                        table_id: string;
                        record_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                record?: {
                                    record_id?: string;
                                    created_by?: {
                                        id?: string;
                                        name?: string;
                                        en_name?: string;
                                        email?: string;
                                    };
                                    created_time?: number;
                                    last_modified_by?: {
                                        id?: string;
                                        name?: string;
                                        en_name?: string;
                                        email?: string;
                                    };
                                    last_modified_time?: number;
                                    fields: Map<
                                        string,
                                        | string
                                        | boolean
                                        | { text?: string; link?: string }
                                        | {
                                              location?: string;
                                              pname?: string;
                                              cityname?: string;
                                              adname?: string;
                                              address?: string;
                                              name?: string;
                                              full_address?: string;
                                          }
                                        | Array<string>
                                        | Array<{
                                              id?: string;
                                              name?: string;
                                              en_name?: string;
                                              email?: string;
                                          }>
                                        | Array<{
                                              file_token?: string;
                                              name?: string;
                                              type?: string;
                                              size?: number;
                                              url?: string;
                                              tmp_url?: string;
                                          }>
                                    >;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/:record_id`,
                            path
                        ),
                        method: "PUT",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.record&apiName=batch_update&version=v1 click to debug }
             */
            batchUpdate: async (
                payload?: {
                    data: {
                        records: Array<{
                            record_id?: string;
                            created_by?: {
                                id?: string;
                                name?: string;
                                en_name?: string;
                                email?: string;
                            };
                            created_time?: number;
                            last_modified_by?: {
                                id?: string;
                                name?: string;
                                en_name?: string;
                                email?: string;
                            };
                            last_modified_time?: number;
                            fields: Map<
                                string,
                                | string
                                | boolean
                                | { text?: string; link?: string }
                                | {
                                      location?: string;
                                      pname?: string;
                                      cityname?: string;
                                      adname?: string;
                                      address?: string;
                                      name?: string;
                                      full_address?: string;
                                  }
                                | Array<string>
                                | Array<{
                                      id?: string;
                                      name?: string;
                                      en_name?: string;
                                      email?: string;
                                  }>
                                | Array<{
                                      file_token?: string;
                                      name?: string;
                                      type?: string;
                                      size?: number;
                                      url?: string;
                                      tmp_url?: string;
                                  }>
                            >;
                        }>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { app_token: string; table_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                records?: Array<{
                                    record_id?: string;
                                    created_by?: {
                                        id?: string;
                                        name?: string;
                                        en_name?: string;
                                        email?: string;
                                    };
                                    created_time?: number;
                                    last_modified_by?: {
                                        id?: string;
                                        name?: string;
                                        en_name?: string;
                                        email?: string;
                                    };
                                    last_modified_time?: number;
                                    fields: Map<
                                        string,
                                        | string
                                        | boolean
                                        | { text?: string; link?: string }
                                        | {
                                              location?: string;
                                              pname?: string;
                                              cityname?: string;
                                              adname?: string;
                                              address?: string;
                                              name?: string;
                                              full_address?: string;
                                          }
                                        | Array<string>
                                        | Array<{
                                              id?: string;
                                              name?: string;
                                              en_name?: string;
                                              email?: string;
                                          }>
                                        | Array<{
                                              file_token?: string;
                                              name?: string;
                                              type?: string;
                                              size?: number;
                                              url?: string;
                                              tmp_url?: string;
                                          }>
                                    >;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/batch_update`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.record&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path: {
                        app_token: string;
                        table_id: string;
                        record_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { deleted?: boolean; record_id?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/:record_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.record&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        fields: Map<
                            string,
                            | string
                            | boolean
                            | { text?: string; link?: string }
                            | {
                                  location?: string;
                                  pname?: string;
                                  cityname?: string;
                                  adname?: string;
                                  address?: string;
                                  name?: string;
                                  full_address?: string;
                              }
                            | Array<string>
                            | Array<{
                                  id?: string;
                                  name?: string;
                                  en_name?: string;
                                  email?: string;
                              }>
                            | Array<{
                                  file_token?: string;
                                  name?: string;
                                  type?: string;
                                  size?: number;
                                  url?: string;
                                  tmp_url?: string;
                              }>
                        >;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { app_token: string; table_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                record?: {
                                    record_id?: string;
                                    created_by?: {
                                        id?: string;
                                        name?: string;
                                        en_name?: string;
                                        email?: string;
                                    };
                                    created_time?: number;
                                    last_modified_by?: {
                                        id?: string;
                                        name?: string;
                                        en_name?: string;
                                        email?: string;
                                    };
                                    last_modified_time?: number;
                                    fields: Map<
                                        string,
                                        | string
                                        | boolean
                                        | { text?: string; link?: string }
                                        | {
                                              location?: string;
                                              pname?: string;
                                              cityname?: string;
                                              adname?: string;
                                              address?: string;
                                              name?: string;
                                              full_address?: string;
                                          }
                                        | Array<string>
                                        | Array<{
                                              id?: string;
                                              name?: string;
                                              en_name?: string;
                                              email?: string;
                                          }>
                                        | Array<{
                                              file_token?: string;
                                              name?: string;
                                              type?: string;
                                              size?: number;
                                              url?: string;
                                              tmp_url?: string;
                                          }>
                                    >;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.record&apiName=batch_delete&version=v1 click to debug }
             */
            batchDelete: async (
                payload?: {
                    data: { records: Array<string> };
                    path: { app_token: string; table_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                records?: Array<{
                                    deleted?: boolean;
                                    record_id?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/batch_delete`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.record&apiName=batch_create&version=v1 click to debug }
             */
            batchCreate: async (
                payload?: {
                    data: {
                        records: Array<{
                            created_by?: {
                                id?: string;
                                name?: string;
                                en_name?: string;
                                email?: string;
                            };
                            created_time?: number;
                            last_modified_by?: {
                                id?: string;
                                name?: string;
                                en_name?: string;
                                email?: string;
                            };
                            last_modified_time?: number;
                            fields: Map<
                                string,
                                | string
                                | boolean
                                | { text?: string; link?: string }
                                | {
                                      location?: string;
                                      pname?: string;
                                      cityname?: string;
                                      adname?: string;
                                      address?: string;
                                      name?: string;
                                      full_address?: string;
                                  }
                                | Array<string>
                                | Array<{
                                      id?: string;
                                      name?: string;
                                      en_name?: string;
                                      email?: string;
                                  }>
                                | Array<{
                                      file_token?: string;
                                      name?: string;
                                      type?: string;
                                      size?: number;
                                      url?: string;
                                      tmp_url?: string;
                                  }>
                            >;
                        }>;
                    };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { app_token: string; table_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                records?: Array<{
                                    record_id?: string;
                                    created_by?: {
                                        id?: string;
                                        name?: string;
                                        en_name?: string;
                                        email?: string;
                                    };
                                    created_time?: number;
                                    last_modified_by?: {
                                        id?: string;
                                        name?: string;
                                        en_name?: string;
                                        email?: string;
                                    };
                                    last_modified_time?: number;
                                    fields: Map<
                                        string,
                                        | string
                                        | boolean
                                        | { text?: string; link?: string }
                                        | {
                                              location?: string;
                                              pname?: string;
                                              cityname?: string;
                                              adname?: string;
                                              address?: string;
                                              name?: string;
                                              full_address?: string;
                                          }
                                        | Array<string>
                                        | Array<{
                                              id?: string;
                                              name?: string;
                                              en_name?: string;
                                              email?: string;
                                          }>
                                        | Array<{
                                              file_token?: string;
                                              name?: string;
                                              type?: string;
                                              size?: number;
                                              url?: string;
                                              tmp_url?: string;
                                          }>
                                    >;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/batch_create`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        appTable: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table&apiName=batch_delete&version=v1 click to debug }
             */
            batchDelete: async (
                payload?: {
                    data?: { table_ids?: Array<string> };
                    path: { app_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/batch_delete`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path: { app_token: string; table_id: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: { page_token?: string; page_size?: number };
                    path: { app_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                has_more?: boolean;
                                                page_token?: string;
                                                total?: number;
                                                items?: Array<{
                                                    table_id?: string;
                                                    revision?: number;
                                                    name?: string;
                                                }>;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: { page_token?: string; page_size?: number };
                    path: { app_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                has_more?: boolean;
                                page_token?: string;
                                total?: number;
                                items?: Array<{
                                    table_id?: string;
                                    revision?: number;
                                    name?: string;
                                }>;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table&apiName=batch_create&version=v1 click to debug }
             */
            batchCreate: async (
                payload?: {
                    data?: { tables?: Array<{ name?: string }> };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { app_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { table_ids?: Array<string> };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/batch_create`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data?: { table?: { name?: string } };
                    params?: {
                        user_id_type?: "user_id" | "union_id" | "open_id";
                    };
                    path: { app_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: { table_id?: string };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        appTableView: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.view&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                    path?: { app_token?: string; table_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items?: Array<{
                                                    view_id?: string;
                                                    view_name?: string;
                                                    view_type?: string;
                                                }>;
                                                page_token?: string;
                                                has_more?: boolean;
                                                total?: number;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.view&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                    path?: { app_token?: string; table_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items?: Array<{
                                    view_id?: string;
                                    view_name?: string;
                                    view_type?: string;
                                }>;
                                page_token?: string;
                                has_more?: boolean;
                                total?: number;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.view&apiName=delete&version=v1 click to debug }
             */
            delete: async (
                payload?: {
                    path?: {
                        app_token?: string;
                        table_id?: string;
                        view_id?: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<any, { code?: number; msg?: string; data?: {} }>({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views/:view_id`,
                            path
                        ),
                        method: "DELETE",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.view&apiName=create&version=v1 click to debug }
             */
            create: async (
                payload?: {
                    data: {
                        view_name: string;
                        view_type?:
                            | "grid"
                            | "kanban"
                            | "gallery"
                            | "gantt"
                            | "form";
                    };
                    path?: { app_token?: string; table_id?: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                view?: {
                                    view_id?: string;
                                    view_name?: string;
                                    view_type?: string;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views`,
                            path
                        ),
                        method: "POST",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        appTableFormField: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.form.field&apiName=patch&version=v1 click to debug }
             */
            patch: async (
                payload?: {
                    data?: {
                        pre_field_id?: string;
                        title?: string;
                        description?: string;
                        required?: boolean;
                        visible?: boolean;
                    };
                    path: {
                        app_token: string;
                        table_id: string;
                        form_id: string;
                        field_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                field?: {
                                    pre_field_id?: string;
                                    title?: string;
                                    description?: string;
                                    required?: boolean;
                                    visible?: boolean;
                                };
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/forms/:form_id/fields/:field_id`,
                            path
                        ),
                        method: "PATCH",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.form.field&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                    path: {
                        app_token: string;
                        table_id: string;
                        form_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/forms/:form_id/fields`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                items: Array<{
                                                    field_id?: string;
                                                    title?: string;
                                                    description?: string;
                                                    required?: boolean;
                                                    visible?: boolean;
                                                }>;
                                                page_token: string;
                                                has_more: boolean;
                                                total: number;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.table.form.field&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                    path: {
                        app_token: string;
                        table_id: string;
                        form_id: string;
                    };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                items: Array<{
                                    field_id?: string;
                                    title?: string;
                                    description?: string;
                                    required?: boolean;
                                    visible?: boolean;
                                }>;
                                page_token: string;
                                has_more: boolean;
                                total: number;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/tables/:table_id/forms/:form_id/fields`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
        appDashboard: {
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.dashboard&apiName=list&version=v1 click to debug }
             */
            listWithIterator: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                    path: { app_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                const sendRequest = async (innerPayload: {
                    headers: any;
                    params: any;
                    data: any;
                }) => {
                    const res = await http
                        .request<any, any>({
                            url: fillApiPath(
                                `${this.domain}/open-apis/bitable/v1/apps/:app_token/dashboards`,
                                path
                            ),
                            method: "GET",
                            headers: pickBy(innerPayload.headers, identity),
                            params: pickBy(innerPayload.params, identity),
                        })
                        .catch((e) => {
                            this.logger.error(formatErrors(e));
                        });
                    return res;
                };

                const Iterable = {
                    async *[Symbol.asyncIterator]() {
                        let hasMore = true;
                        let pageToken;

                        while (hasMore) {
                            try {
                                const res = await sendRequest({
                                    headers,
                                    params: {
                                        ...params,
                                        page_token: pageToken,
                                    },
                                    data,
                                });

                                const {
                                    // @ts-ignore
                                    has_more,
                                    // @ts-ignore
                                    page_token,
                                    // @ts-ignore
                                    next_page_token,
                                    ...rest
                                } =
                                    get<
                                        {
                                            code?: number;
                                            msg?: string;
                                            data?: {
                                                dashboards: Array<{
                                                    block_id: string;
                                                    name: string;
                                                }>;
                                                page_token: string;
                                                has_more: boolean;
                                            };
                                        },
                                        "data"
                                    >(res, "data") || {};

                                yield rest;

                                hasMore = Boolean(has_more);
                                pageToken = page_token || next_page_token;
                            } catch (e) {
                                yield null;
                                break;
                            }
                        }
                    },
                };

                return Iterable;
            },
            /**
             * {@link https://open.feishu.cn/api-explorer?project=bitable&resource=app.dashboard&apiName=list&version=v1 click to debug }
             */
            list: async (
                payload?: {
                    params?: { page_size?: number; page_token?: string };
                    path: { app_token: string };
                },
                options?: IRequestOptions
            ) => {
                const { headers, params, data, path } =
                    await this.formatPayload(payload, options);

                return http
                    .request<
                        any,
                        {
                            code?: number;
                            msg?: string;
                            data?: {
                                dashboards: Array<{
                                    block_id: string;
                                    name: string;
                                }>;
                                page_token: string;
                                has_more: boolean;
                            };
                        }
                    >({
                        url: fillApiPath(
                            `${this.domain}/open-apis/bitable/v1/apps/:app_token/dashboards`,
                            path
                        ),
                        method: "GET",
                        data,
                        params,
                        headers,
                    })
                    .catch((e) => {
                        this.logger.error(formatErrors(e));
                        throw e;
                    });
            },
        },
    };
}
